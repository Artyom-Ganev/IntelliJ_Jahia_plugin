{
  parserClass="fr.tolc.jahia.intellij.plugin.cnd.parser.CndParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cnd"
  psiImplClassSuffix="Impl"
  psiPackage="fr.tolc.jahia.intellij.plugin.cnd.psi"
  psiImplPackage="fr.tolc.jahia.intellij.plugin.cnd.psi.impl"

  elementTypeHolderClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes"
  elementTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndElementType"
  tokenTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTokenType"

  psiImplUtilClass="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndPsiImplUtil"
}

cnd ::= namespace* nodeType*



namespace ::= LEFT_ANGLE_BRACKET NAMESPACE_NAME EQUAL SINGLE_QUOTE NAMESPACE_URI SINGLE_QUOTE RIGHT_ANGLE_BRACKET { mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndNamespaceElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.CndNamespaceElement" methods=[getNamespaceName getNamespaceURI] }



nodeType ::= LEFT_BRACKET NAMESPACE_NAME COLON NODE_TYPE_NAME RIGHT_BRACKET [superTypes] [options] [extends] [itemType] {property | node} { mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndNodeTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.CndNodeTypeElement" methods=[getNodeTypeName setNodeTypeName getNodeTypeNamespace getNameIdentifier getName setName] }

superTypes ::= RIGHT_ANGLE_BRACKET superType (COMMA superType)*
superType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

options ::= OPTION+

extends ::= EXTENDS EQUAL extendNodeType (COMMA extendNodeType)*
extendNodeType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

itemType ::= ITEMTYPE EQUAL ITEMTYPE_TYPE



property ::= MINUS PROPERTY_NAME LEFT_PARENTHESIS propertyType RIGHT_PARENTHESIS [propertyDefault] [propertyAttributes] [propertyConstraint]
private propertyType ::= PROPERTY_TYPE [COMMA PROPERTY_MASK [propertyMaskOptions]]
private propertyMaskOptions ::= LEFT_BRACKET propertyMaskOption (COMMA propertyMaskOption)* RIGHT_BRACKET 
private propertyMaskOption ::= PROPERTY_MASK_OPTION [EQUAL PROPERTY_MASK_OPTION_VALUE]

propertyDefault ::= EQUAL PROPERTY_DEFAULT_VALUE

propertyAttributes ::= PROPERTY_ATTRIBUTE+

propertyConstraint ::= LEFT_ANGLE_BRACKET PROPERTY_CONSTRAINT



node ::= PLUS NODE_NAME LEFT_PARENTHESIS subnodeTypes RIGHT_PARENTHESIS [nodeDefault] [nodeAttributes]
private subnodeTypes ::= subnodeType (COMMA subnodeType)*
private subnodeType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

nodeDefault ::= EQUAL NAMESPACE_NAME COLON NODE_TYPE_NAME

nodeAttributes ::= NODE_ATTRIBUTE+