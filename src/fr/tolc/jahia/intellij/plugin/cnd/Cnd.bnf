{
  parserClass="fr.tolc.jahia.intellij.plugin.cnd.parser.CndParser"

  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="Cnd"
  psiImplClassSuffix="Impl"
  psiPackage="fr.tolc.jahia.intellij.plugin.cnd.psi"
  psiImplPackage="fr.tolc.jahia.intellij.plugin.cnd.psi.impl"

  elementTypeHolderClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes"
  elementTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndElementType"
  tokenTypeClass="fr.tolc.jahia.intellij.plugin.cnd.psi.CndTokenType"

  psiImplUtilClass="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndPsiImplUtil"
}

cnd ::= (COMMENT|CRLF)* (namespace CRLF)* (nodeType | COMMENT | CRLF)*



namespace ::= LEFT_ANGLE_BRACKET NAMESPACE_NAME EQUAL SINGLE_QUOTE NAMESPACE_URI SINGLE_QUOTE RIGHT_ANGLE_BRACKET
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndNamespaceElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.CndNamespaceElement" 
  methods=[getNamespaceName getNamespaceURI] }



nodeType ::= LEFT_BRACKET NAMESPACE_NAME COLON NODE_TYPE_NAME RIGHT_BRACKET [superTypes] [options] [COMMENT] [CRLF extensions] [COMMENT] [CRLF itemType] (CRLF property | CRLF subNode)* [CRLF]
{ mixin="fr.tolc.jahia.intellij.plugin.cnd.psi.impl.CndNodeTypeElementImpl"
  implements="fr.tolc.jahia.intellij.plugin.cnd.psi.CndNodeTypeElement" 
  methods=[getNodeTypeName setNodeTypeName getNodeTypeNamespace getNameIdentifier getName setName] }

superTypes ::= RIGHT_ANGLE_BRACKET superType (COMMA superType)* [COMMA]
superType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

options ::= ([CRLF] OPTION)+

extensions ::= EXTENDS EQUAL extension (COMMA extension)*
extension ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

itemType ::= ITEMTYPE EQUAL ITEMTYPE_TYPE



property ::= MINUS PROPERTY_NAME [propertyType] [propertyDefault] [propertyAttributes] [propertyConstraint]
private propertyType ::= LEFT_PARENTHESIS PROPERTY_TYPE [COMMA PROPERTY_MASK [propertyMaskOptions]] RIGHT_PARENTHESIS
private propertyMaskOptions ::= LEFT_BRACKET propertyMaskOption (COMMA propertyMaskOption)* RIGHT_BRACKET 
private propertyMaskOption ::= PROPERTY_MASK_OPTION [EQUAL PROPERTY_MASK_OPTION_VALUE]

propertyDefault ::= EQUAL PROPERTY_DEFAULT_VALUE

propertyAttributes ::= PROPERTY_ATTRIBUTE+

propertyConstraint ::= LEFT_ANGLE_BRACKET PROPERTY_CONSTRAINT_VALUE



subNode ::= PLUS NODE_NAME LEFT_PARENTHESIS subNodeTypes RIGHT_PARENTHESIS [subNodeDefault] [subNodeAttributes]
private subNodeTypes ::= subNodeType (COMMA subNodeType)*
private subNodeType ::= NAMESPACE_NAME COLON NODE_TYPE_NAME

subNodeDefault ::= EQUAL NAMESPACE_NAME COLON NODE_TYPE_NAME

subNodeAttributes ::= NODE_ATTRIBUTE+