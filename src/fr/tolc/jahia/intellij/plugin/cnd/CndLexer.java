/* The following code was generated by JFlex 1.4.3 on 28/09/16 22:14 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/09/16 22:14 from the specification file
 * <tt>E:/Projects/Smile/IntelliJ_Jahia_plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROPERTY_TYPE_DONE_WEAKREFERENCE = 78;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int PROPERTY_ADDENDUM_DOUBLE = 50;
  public static final int EXTEND_COLON_DONE = 110;
  public static final int PROPERTY_ADDENDUM_STRING_TEXT = 68;
  public static final int PROPERTY_ADDENDUM_WEAKREFERENCE = 80;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int EXTEND_BEGIN = 106;
  public static final int NAMESPACES_OVER = 10;
  public static final int PROPERTY_PLUS_NAME_DONE = 92;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 104;
  public static final int PROPERTY_TYPE_DONE_STRING_TEXT = 66;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_DEFAULT_BEGIN_DOUBLE = 52;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 94;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int YYINITIAL = 0;
  public static final int PROPERTY_TYPE_DONE_BOOLEAN = 54;
  public static final int PROPERTY_DEFAULT_BEGIN_DATE = 64;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int EXTEND_ITEM_BEGIN = 114;
  public static final int PROPERTY_ADDENDUM_ATTR = 84;
  public static final int EXTEND_DONE = 112;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int PROPERTY_TYPE_DONE_LONG = 42;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 96;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int PROPERTY_ADDENDUM_LONG = 44;
  public static final int PROPERTY_DEFAULT_BEGIN_BOOLEAN = 58;
  public static final int PROPERTY_PLUS_TYPE_DONE = 100;
  public static final int PROPERTY_TYPE_DONE_BINARY = 38;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int EXTEND_NAMESPACE_DONE = 108;
  public static final int PROPERTY_PLUS_COLON_DONE = 98;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int PROPERTY_ADDENDUM_STRING_CHOICELIST = 74;
  public static final int PROPERTY_DEFAULT_BEGIN = 86;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_ADDENDUM_BINARY = 40;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_ADDENDUM = 82;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int PROPERTY_PLUS_BEGIN = 90;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int PROPERTY_ADDENDUM_BOOLEAN = 56;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_TEXT = 70;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST = 76;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_DONE_DATE = 60;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 88;
  public static final int PROPERTY_PLUS_ADDENDUM = 102;
  public static final int PROPERTY_TYPE_DONE_STRING_CHOICELIST = 72;
  public static final int PROPERTY_TYPE_DONE_DOUBLE = 48;
  public static final int PROPERTY_DEFAULT_BEGIN_LONG = 46;
  public static final int PROPERTY_ADDENDUM_DATE = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  5,  5, 18, 18,  5,  5, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 18, 18, 
     5,  5,  5,  5, 37, 37,  5,  5, 38, 38, 39, 39, 40, 40, 41, 41, 
    42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 
    50, 50, 51, 51
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\1\1\0\1\3\1\2\16\21\4\0\1\3\3\0"+
    "\1\5\2\0\1\10\1\45\1\46\1\44\1\43\1\25\1\42\1\16"+
    "\1\4\1\61\1\50\1\62\1\63\2\64\2\22\1\51\1\22\1\15"+
    "\1\0\1\6\1\7\1\20\2\0\1\36\1\37\1\41\1\34\1\35"+
    "\1\53\1\60\1\11\1\27\1\17\1\54\1\40\1\26\1\31\1\32"+
    "\1\13\1\17\1\33\1\14\1\12\1\52\1\17\1\56\1\30\1\47"+
    "\1\55\1\23\1\0\1\24\1\0\1\17\1\0\1\36\1\37\1\41"+
    "\1\34\1\35\1\53\1\60\1\11\1\27\1\17\1\54\1\40\1\26"+
    "\1\31\1\32\1\13\1\17\1\33\1\65\1\12\1\52\1\17\1\66"+
    "\1\30\1\47\1\55\4\0\41\21\2\0\4\5\4\0\1\5\2\0"+
    "\1\21\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0"+
    "\160\21\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\21"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21"+
    "\10\0\33\5\5\0\3\5\15\0\5\21\6\0\1\5\4\0\13\21"+
    "\5\0\53\5\25\21\12\57\4\0\2\5\1\21\143\5\1\0\1\5"+
    "\10\21\1\0\6\21\2\5\2\21\1\0\4\21\2\5\12\57\3\5"+
    "\2\0\1\5\17\0\1\21\1\5\1\21\36\5\33\21\2\0\131\5"+
    "\13\21\1\5\16\0\12\57\41\5\11\21\2\5\4\0\1\5\5\0"+
    "\26\5\4\21\1\5\11\21\1\5\3\21\1\5\5\21\22\0\31\5"+
    "\3\21\104\0\1\5\1\0\13\5\67\0\33\21\1\0\4\21\66\5"+
    "\3\21\1\5\22\21\1\5\7\21\12\5\2\21\2\0\12\57\1\0"+
    "\7\5\1\0\7\5\1\0\3\21\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\21\1\5"+
    "\7\21\2\0\2\21\2\0\3\21\1\5\10\0\1\21\4\0\2\5"+
    "\1\0\3\5\2\21\2\0\12\57\4\5\7\0\1\5\5\0\3\21"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\21\1\0\5\21\4\0\2\21"+
    "\2\0\3\21\3\0\1\21\7\0\4\5\1\0\1\5\7\0\12\57"+
    "\2\21\3\5\1\21\13\0\3\21\1\0\11\5\1\0\3\5\1\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\21\1\5"+
    "\10\21\1\0\3\21\1\0\3\21\2\0\1\5\17\0\2\5\2\21"+
    "\2\0\12\57\1\0\1\5\17\0\3\21\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\21"+
    "\1\5\7\21\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\5"+
    "\1\0\3\5\2\21\2\0\12\57\1\0\1\5\20\0\1\21\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\21"+
    "\3\0\3\21\1\0\4\21\2\0\1\5\6\0\1\21\16\0\12\57"+
    "\11\0\1\5\7\0\3\21\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\7\21\1\0\3\21\1\0"+
    "\4\21\7\0\2\21\1\0\2\5\6\0\2\5\2\21\2\0\12\57"+
    "\22\0\2\21\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\2\0\1\21\1\5\7\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\7\0\1\5\1\0\2\5\2\21\2\0\12\57\1\0"+
    "\2\5\17\0\2\21\1\0\10\5\1\0\3\5\1\0\51\5\2\0"+
    "\1\5\7\21\1\0\3\21\1\0\4\21\1\5\10\0\1\21\10\0"+
    "\2\5\2\21\2\0\12\57\12\0\6\5\2\0\2\21\1\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\21"+
    "\4\0\6\21\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\5"+
    "\1\21\2\5\7\21\4\0\10\5\10\21\1\0\12\57\47\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\4\5\1\21\2\5\6\21\1\0\2\21\1\5\2\0\5\5"+
    "\1\0\1\5\1\0\6\21\2\0\12\57\2\0\4\5\40\0\1\5"+
    "\27\0\2\21\6\0\12\57\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\2\21\10\5\1\0\44\5\4\0\24\21\1\0\2\21\5\5"+
    "\13\21\1\0\44\21\11\0\1\21\71\0\53\5\24\21\1\5\12\57"+
    "\6\0\6\5\4\21\4\5\3\21\1\5\3\21\2\5\7\21\3\5"+
    "\4\21\15\5\14\21\1\5\1\21\12\57\4\21\2\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0"+
    "\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\21\40\0"+
    "\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0"+
    "\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\21\13\0\22\5"+
    "\3\21\13\0\22\5\2\21\14\0\15\5\1\0\3\5\1\0\2\21"+
    "\14\0\64\5\40\21\3\0\1\5\3\0\2\5\1\21\2\0\12\57"+
    "\41\0\3\21\2\0\12\57\6\0\130\5\10\0\51\5\1\21\1\5"+
    "\5\0\106\5\12\0\35\5\3\0\14\21\4\0\14\21\12\0\12\57"+
    "\36\5\2\0\5\5\13\0\54\5\4\0\21\21\7\5\2\21\6\0"+
    "\12\57\46\0\27\5\5\21\4\0\65\5\12\21\1\0\35\21\2\0"+
    "\1\21\12\57\6\0\12\57\15\0\1\5\130\0\5\21\57\5\21\21"+
    "\7\5\4\0\12\57\21\0\11\21\14\0\3\21\36\5\15\21\2\5"+
    "\12\57\54\5\16\21\14\0\44\5\24\21\10\0\12\57\3\0\3\5"+
    "\12\57\44\5\122\0\3\21\1\0\25\21\4\5\1\21\4\5\3\21"+
    "\2\5\11\0\300\5\47\21\25\0\4\21\u0116\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\16\0\5\21\32\0\5\21\20\0\2\5\23\0"+
    "\1\5\13\0\5\21\5\0\6\21\1\0\1\5\15\0\1\5\20\0"+
    "\15\5\3\0\33\5\25\0\15\21\4\0\1\21\3\0\14\21\21\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0"+
    "\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0"+
    "\57\5\1\0\205\5\6\0\4\5\3\21\2\5\14\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0\1\21\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\21\57\0\1\5"+
    "\u01d5\0\3\5\31\0\11\5\6\21\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\21\2\0\3\5\1\0\132\5\1\0\4\5\5\0"+
    "\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0"+
    "\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\57"+
    "\2\5\24\0\57\5\1\21\4\0\12\21\1\0\31\5\7\0\1\21"+
    "\120\5\2\21\45\0\11\5\2\0\147\5\2\0\4\5\1\0\4\5"+
    "\14\0\13\5\115\0\12\5\1\21\3\5\1\21\4\5\1\21\27\5"+
    "\5\21\20\0\1\5\7\0\64\5\14\0\2\21\62\5\21\21\13\0"+
    "\12\57\6\0\22\21\6\5\3\0\1\5\4\0\12\57\34\5\10\21"+
    "\2\0\27\5\15\21\14\0\35\5\3\0\4\21\57\5\16\21\16\0"+
    "\1\5\12\57\46\0\51\5\16\21\11\0\3\5\1\21\10\5\2\21"+
    "\2\0\12\57\6\0\27\5\3\0\1\5\1\21\4\0\60\5\1\21"+
    "\1\5\3\21\2\5\2\21\5\5\2\21\1\5\1\21\1\5\30\0"+
    "\3\5\2\0\13\5\5\21\2\0\3\5\2\21\12\0\6\5\2\0"+
    "\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0\43\5\10\21"+
    "\1\0\2\21\2\0\12\57\6\0\u2ba4\5\14\0\27\5\4\0\61\5"+
    "\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5"+
    "\1\21\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5"+
    "\50\0\15\5\3\0\20\21\20\0\7\21\14\0\2\5\30\0\3\5"+
    "\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\21\4\0\1\5"+
    "\13\0\12\57\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5"+
    "\3\0\2\5\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\64\0\1\1\2\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\5\1\1\25\1\26\1\27\1\30\1\31\1\32"+
    "\1\27\1\33\1\1\1\34\1\27\1\35\2\1\1\36"+
    "\1\27\1\37\2\1\1\40\1\27\1\41\1\1\1\42"+
    "\1\27\1\43\1\44\1\45\12\1\1\46\1\1\1\46"+
    "\2\47\1\50\1\51\1\52\1\53\1\54\1\55\2\1"+
    "\1\56\1\57\1\60\1\61\5\1\1\62\3\0\1\63"+
    "\2\0\1\64\21\0\1\65\45\0\1\66\22\0\2\46"+
    "\1\0\1\67\15\0\1\70\2\0\1\71\1\0\1\72"+
    "\11\0\1\73\17\0\1\74\10\0\1\75\26\0\1\76"+
    "\1\77\1\100\20\0\1\101\7\0\1\102\16\0\1\103"+
    "\1\104\1\0\1\105\14\0\1\106\1\107\26\0\1\76"+
    "\7\0\1\110\13\0\1\111\15\0\1\76\16\0\1\112"+
    "\11\0\1\111\27\0\1\111\25\0\1\112\3\0\1\111"+
    "\111\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0861"+
    "\0\u0898\0\u08cf\0\u0906\0\u093d\0\u0974\0\u09ab\0\u09e2\0\u0a19"+
    "\0\u0a50\0\u0a87\0\u0abe\0\u0af5\0\u0b2c\0\u0b2c\0\u0b63\0\u0b9a"+
    "\0\u0bd1\0\u0b2c\0\u0b2c\0\u0c08\0\u0c3f\0\u0b2c\0\u0b2c\0\u0c76"+
    "\0\u0cad\0\u0ce4\0\u0d1b\0\u0d52\0\u0b2c\0\u0d89\0\u0b2c\0\u0b2c"+
    "\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65\0\u0b2c\0\u0e9c\0\u0ed3\0\u0b2c"+
    "\0\u0f0a\0\u0b2c\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d\0\u0b2c"+
    "\0\u0b2c\0\u1054\0\u0b2c\0\u108b\0\u0b2c\0\u10c2\0\u0b2c\0\u10f9"+
    "\0\u0b2c\0\u1130\0\u0b2c\0\u1167\0\u119e\0\u0b2c\0\u11d5\0\u0b2c"+
    "\0\u120c\0\u1243\0\u0b2c\0\u127a\0\u0b2c\0\u12b1\0\u0b2c\0\u12e8"+
    "\0\u0b2c\0\u131f\0\u0b2c\0\u1356\0\u138d\0\u13c4\0\u13fb\0\u1432"+
    "\0\u1469\0\u14a0\0\u14d7\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea"+
    "\0\u1621\0\u0b2c\0\u0b2c\0\u1658\0\u0b2c\0\u168f\0\u0b2c\0\u0b2c"+
    "\0\u16c6\0\u16fd\0\u1734\0\u0b2c\0\u176b\0\u0b2c\0\u17a2\0\u17d9"+
    "\0\u1810\0\u1847\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u0cad\0\u0b2c"+
    "\0\u195a\0\u0d1b\0\u0b2c\0\u1991\0\u19c8\0\u19ff\0\u1a36\0\u1a6d"+
    "\0\u1aa4\0\u1adb\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u10f9\0\u1bee"+
    "\0\u1c25\0\u1c5c\0\u1c93\0\u12b1\0\u12b1\0\u1cca\0\u1d01\0\u1d38"+
    "\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b\0\u1e82\0\u1eb9\0\u1ef0"+
    "\0\u1f27\0\u1f5e\0\u1f95\0\u1fcc\0\u2003\0\u203a\0\u16fd\0\u2071"+
    "\0\u20a8\0\u20df\0\u2116\0\u214d\0\u2184\0\u21bb\0\u21f2\0\u2229"+
    "\0\u2260\0\u2297\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1"+
    "\0\u2418\0\u244f\0\u1bb7\0\u2486\0\u24bd\0\u24f4\0\u252b\0\u2562"+
    "\0\u2599\0\u25d0\0\u2607\0\u263e\0\u2675\0\u26ac\0\u26e3\0\u271a"+
    "\0\u2751\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u2003\0\u289b"+
    "\0\u28d2\0\u2909\0\u2940\0\u2977\0\u29ae\0\u29e5\0\u2a1c\0\u2a53"+
    "\0\u2a8a\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u0b2c\0\u2bd4"+
    "\0\u2c0b\0\u0b2c\0\u2c42\0\u0b2c\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e"+
    "\0\u2d55\0\u2d8c\0\u2dc3\0\u2dfa\0\u2e31\0\u0b2c\0\u2e68\0\u2e9f"+
    "\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b\0\u2fb2\0\u2fe9\0\u3020\0\u3057"+
    "\0\u308e\0\u30c5\0\u30fc\0\u3133\0\u316a\0\u0b2c\0\u31a1\0\u31d8"+
    "\0\u320f\0\u3246\0\u327d\0\u32b4\0\u32eb\0\u3322\0\u0b2c\0\u3359"+
    "\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c\0\u34a3\0\u34da\0\u3511"+
    "\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624\0\u365b\0\u3692\0\u36c9"+
    "\0\u3700\0\u3737\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u0b2c\0\u0b2c"+
    "\0\u384a\0\u3881\0\u38b8\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb"+
    "\0\u3a02\0\u3a39\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83"+
    "\0\u0b2c\0\u3bba\0\u3bf1\0\u3c28\0\u3c5f\0\u3c96\0\u3813\0\u3ccd"+
    "\0\u0b2c\0\u3d04\0\u3d3b\0\u3d72\0\u3da9\0\u3de0\0\u3e17\0\u3e4e"+
    "\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61\0\u3f98\0\u3fcf\0\u0b2c"+
    "\0\u3c28\0\u4006\0\u0b2c\0\u403d\0\u4074\0\u40ab\0\u40e2\0\u4119"+
    "\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a\0\u0b2c"+
    "\0\u0b2c\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b"+
    "\0\u4452\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3"+
    "\0\u460a\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b"+
    "\0\u47c2\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u0b2c"+
    "\0\u4943\0\u497a\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4"+
    "\0\u4afb\0\u4b32\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c"+
    "\0\u4cb3\0\u4cea\0\u4d21\0\u4d58\0\u4ba0\0\u4d8f\0\u4dc6\0\u4dfd"+
    "\0\u4e34\0\u0b2c\0\u4e6b\0\u4ea2\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e"+
    "\0\u4fb5\0\u4fec\0\u5023\0\u505a\0\u5091\0\u50c8\0\u50ff\0\u5136"+
    "\0\u516d\0\u51a4\0\u51db\0\u5212\0\u5249\0\u5280\0\u52b7\0\u52ee"+
    "\0\u5325\0\u535c\0\u5393\0\u53ca\0\u5401\0\u5438\0\u546f\0\u54a6"+
    "\0\u54dd\0\u5514\0\u554b\0\u5582\0\u55b9\0\u55f0\0\u5627\0\u565e"+
    "\0\u5695\0\u56cc\0\u5703\0\u573a\0\u5771\0\u57a8\0\u57df\0\u5816"+
    "\0\u584d\0\u5884\0\u58bb\0\u58f2\0\u5929\0\u5960\0\u5997\0\u59ce"+
    "\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa\0\u5ae1\0\u5b18\0\u5b4f\0\u5b86"+
    "\0\u5bbd\0\u5bf4\0\u5c2b\0\u5c62\0\u5c99\0\u5cd0\0\u5d07\0\u5d3e"+
    "\0\u0b2c\0\u5d75\0\u5dac\0\u5de3\0\u0b2c\0\u5e1a\0\u5e51\0\u5e88"+
    "\0\u5ebf\0\u5ef6\0\u5f2d\0\u5f64\0\u5f9b\0\u5fd2\0\u6009\0\u6040"+
    "\0\u6077\0\u60ae\0\u60e5\0\u611c\0\u6153\0\u618a\0\u61c1\0\u61f8"+
    "\0\u622f\0\u6266\0\u629d\0\u62d4\0\u630b\0\u6342\0\u6379\0\u63b0"+
    "\0\u63e7\0\u641e\0\u6455\0\u648c\0\u64c3\0\u64fa\0\u6531\0\u6568"+
    "\0\u659f\0\u65d6\0\u660d\0\u6644\0\u667b\0\u66b2\0\u66e9\0\u6720"+
    "\0\u6757\0\u678e\0\u67c5\0\u67fc\0\u6833\0\u686a\0\u68a1\0\u68d8"+
    "\0\u690f\0\u6946\0\u697d\0\u69b4\0\u69eb\0\u6a22\0\u6a59\0\u6a90"+
    "\0\u6ac7\0\u6afe\0\u6b35\0\u6b6c\0\u6ba3\0\u6bda\0\u6c11\0\u6c48"+
    "\0\u6c7f\0\u6cb6\0\u6ced\0\u6d24\0\u6d5b\0\u6d92";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\65\1\66\1\67\1\70\1\71\1\65\1\72\14\65"+
    "\1\73\3\65\1\74\5\65\1\75\4\65\1\76\1\77"+
    "\24\65\1\66\1\67\1\70\1\65\1\100\3\65\4\100"+
    "\2\65\1\100\6\65\14\100\5\65\1\100\2\65\5\100"+
    "\1\65\1\100\4\65\2\100\1\65\1\66\1\67\1\70"+
    "\3\65\1\101\60\65\1\66\1\67\1\70\5\65\1\102"+
    "\56\65\1\66\1\67\1\70\4\65\1\103\57\65\1\66"+
    "\1\67\1\70\64\65\1\66\1\67\1\70\1\65\1\104"+
    "\3\65\4\104\2\65\1\104\6\65\14\104\5\65\1\104"+
    "\2\65\5\104\1\65\1\104\4\65\2\104\1\65\1\66"+
    "\1\67\1\70\11\65\1\105\52\65\1\66\1\67\1\70"+
    "\1\65\1\106\3\65\4\106\2\65\1\106\6\65\14\106"+
    "\5\65\1\106\2\65\5\106\1\65\1\106\4\65\2\106"+
    "\1\65\1\66\1\67\1\70\20\65\1\107\43\65\1\66"+
    "\1\67\1\70\14\65\1\110\5\65\1\111\3\65\1\112"+
    "\3\65\1\113\31\65\1\66\1\67\1\70\1\65\1\114"+
    "\3\65\4\114\2\65\1\114\6\65\14\114\5\65\1\114"+
    "\2\65\5\114\1\65\1\114\4\65\2\114\1\65\1\66"+
    "\1\67\1\70\11\65\1\115\52\65\1\66\1\67\1\70"+
    "\1\65\1\116\3\65\4\116\2\65\1\116\6\65\14\116"+
    "\5\65\1\116\2\65\5\116\1\65\1\116\4\65\2\116"+
    "\1\65\1\66\1\67\1\117\21\65\1\120\42\65\1\66"+
    "\1\67\1\70\1\65\1\121\3\65\4\121\2\65\1\121"+
    "\6\65\14\121\5\65\1\121\2\65\5\121\1\65\1\121"+
    "\4\65\2\121\1\65\1\66\1\67\1\70\41\65\1\122"+
    "\22\65\1\66\1\67\1\70\10\65\1\123\17\65\1\124"+
    "\2\65\1\125\1\126\15\65\1\127\6\65\1\123\1\127"+
    "\1\65\1\66\1\67\1\70\42\65\1\130\21\65\1\66"+
    "\1\67\1\70\42\65\1\131\21\65\1\66\1\67\1\132"+
    "\3\65\1\133\60\65\1\66\1\67\1\70\16\65\1\134"+
    "\25\65\2\134\5\65\1\134\1\65\4\134\3\65\1\66"+
    "\1\67\1\70\42\65\1\135\21\65\1\66\1\67\1\136"+
    "\3\65\1\137\60\65\1\66\1\67\1\70\16\65\1\140"+
    "\25\65\2\140\5\65\1\140\1\65\4\140\3\65\1\66"+
    "\1\67\1\70\42\65\1\141\21\65\1\66\1\67\1\142"+
    "\3\65\1\143\60\65\1\66\1\67\1\70\6\65\1\144"+
    "\40\65\1\145\14\65\1\66\1\67\1\70\42\65\1\146"+
    "\21\65\1\66\1\67\1\147\3\65\1\150\60\65\1\66"+
    "\1\67\1\70\4\65\1\151\20\65\1\152\36\65\1\66"+
    "\1\67\1\70\42\65\1\153\21\65\1\66\1\67\1\154"+
    "\3\65\1\155\60\65\1\66\1\67\1\70\4\65\1\156"+
    "\57\65\1\66\1\67\1\70\42\65\1\157\21\65\1\66"+
    "\1\67\1\160\3\65\1\161\57\65\1\162\1\66\1\67"+
    "\62\162\1\65\1\162\1\65\1\66\1\67\1\70\2\65"+
    "\1\163\2\65\1\164\1\65\1\165\1\166\11\65\1\167"+
    "\1\170\1\65\1\171\1\172\3\65\1\173\1\174\13\65"+
    "\1\175\11\65\1\166\2\65\1\66\1\67\1\70\1\65"+
    "\1\176\2\65\1\177\4\176\2\65\1\176\1\65\2\200"+
    "\3\65\14\176\5\65\1\176\2\200\5\176\1\200\1\176"+
    "\4\200\2\176\1\65\1\66\1\67\1\70\1\65\1\201"+
    "\3\65\4\201\2\65\1\201\6\65\14\201\2\65\1\202"+
    "\2\65\1\201\2\65\5\201\1\65\1\201\4\65\2\201"+
    "\1\65\1\66\1\67\1\70\41\65\1\203\22\65\1\66"+
    "\1\67\1\70\1\65\1\204\3\65\4\204\2\65\1\204"+
    "\6\65\14\204\5\65\1\204\2\65\5\204\1\65\1\204"+
    "\4\65\2\204\1\65\1\66\1\67\1\70\11\65\1\205"+
    "\52\65\1\66\1\67\1\70\1\65\1\206\3\65\4\206"+
    "\2\65\1\206\6\65\14\206\5\65\1\206\2\65\5\206"+
    "\1\65\1\206\4\65\2\206\1\65\1\66\1\67\1\70"+
    "\42\65\1\207\21\65\1\66\1\67\1\70\3\65\1\210"+
    "\26\65\1\211\31\65\1\66\1\67\1\70\1\65\1\212"+
    "\3\65\4\212\2\65\1\212\6\65\14\212\5\65\1\212"+
    "\2\65\5\212\1\65\1\212\4\65\2\212\1\65\1\66"+
    "\1\67\1\70\1\65\1\213\3\65\4\213\2\65\1\213"+
    "\6\65\14\213\5\65\1\213\2\65\5\213\1\65\1\213"+
    "\4\65\2\213\1\65\1\66\1\67\1\70\11\65\1\214"+
    "\52\65\1\66\1\67\1\70\1\65\1\215\3\65\4\215"+
    "\2\65\1\215\6\65\14\215\5\65\1\215\2\65\5\215"+
    "\1\65\1\215\4\65\2\215\1\65\1\66\1\67\1\70"+
    "\21\65\1\216\42\65\1\66\1\67\1\70\22\65\1\217"+
    "\3\65\1\220\1\65\1\221\3\65\1\222\1\223\25\65"+
    "\70\0\1\66\70\0\1\70\67\0\1\224\74\0\1\225"+
    "\104\0\1\226\43\0\1\100\3\0\4\100\2\0\1\100"+
    "\6\0\14\100\5\0\1\100\2\0\5\100\1\0\1\100"+
    "\4\0\2\100\3\0\1\227\4\0\1\230\70\0\1\231"+
    "\57\0\1\232\14\0\1\233\53\0\1\104\3\0\4\104"+
    "\2\0\1\104\6\0\14\104\5\0\1\104\2\0\5\104"+
    "\1\0\1\104\4\0\2\104\5\0\1\106\3\0\4\106"+
    "\2\0\1\106\1\0\2\106\3\0\14\106\5\0\20\106"+
    "\27\0\1\234\72\0\1\235\72\0\1\236\34\0\1\114"+
    "\3\0\4\114\2\0\1\114\6\0\14\114\5\0\1\114"+
    "\2\0\5\114\1\0\1\114\4\0\2\114\5\0\1\116"+
    "\3\0\4\116\2\0\1\116\1\0\2\116\3\0\14\116"+
    "\5\0\20\116\3\0\1\117\21\0\1\120\46\0\1\121"+
    "\3\0\5\121\1\0\1\121\1\0\2\121\3\0\14\121"+
    "\5\0\20\121\12\0\1\237\106\0\1\240\3\0\1\241"+
    "\57\0\1\242\2\0\1\243\66\0\1\244\71\0\1\245"+
    "\34\0\1\132\3\0\1\133\101\0\1\134\25\0\2\134"+
    "\5\0\1\134\1\0\4\134\5\0\1\136\3\0\1\137"+
    "\75\0\1\246\3\0\1\247\25\0\2\247\5\0\1\247"+
    "\1\0\4\247\5\0\1\142\3\0\1\143\112\0\1\250"+
    "\71\0\1\251\33\0\1\147\3\0\1\150\101\0\1\252"+
    "\25\0\2\252\5\0\1\252\1\0\4\252\34\0\1\253"+
    "\37\0\1\154\3\0\1\155\57\0\1\254\2\0\5\254"+
    "\1\255\56\254\3\0\1\160\3\0\1\161\57\0\1\162"+
    "\2\0\62\162\1\0\1\162\27\0\1\256\72\0\1\257"+
    "\65\0\1\260\72\0\1\261\13\0\1\262\45\0\1\263"+
    "\16\0\1\264\50\0\1\265\65\0\1\266\66\0\1\267"+
    "\20\0\1\270\46\0\1\271\72\0\1\272\35\0\1\176"+
    "\3\0\4\176\1\273\1\0\1\176\1\0\2\200\2\0"+
    "\1\274\14\176\5\0\1\176\2\200\5\176\1\200\1\176"+
    "\4\200\2\176\1\275\2\0\64\275\5\0\1\200\3\0"+
    "\4\200\2\0\1\200\1\0\2\200\2\0\1\274\14\200"+
    "\5\0\20\200\5\0\1\201\3\0\5\201\1\0\1\201"+
    "\1\0\2\201\3\0\14\201\5\0\20\201\5\0\1\204"+
    "\3\0\4\204\2\0\1\204\6\0\14\204\5\0\1\204"+
    "\2\0\5\204\1\0\1\204\4\0\2\204\5\0\1\206"+
    "\3\0\4\206\2\0\1\206\1\0\2\206\3\0\14\206"+
    "\5\0\20\206\52\0\1\276\21\0\1\277\3\0\4\277"+
    "\1\300\1\0\1\277\6\0\14\277\5\0\1\277\2\0"+
    "\5\277\1\0\1\277\4\0\2\277\5\0\1\213\3\0"+
    "\4\213\2\0\1\213\6\0\14\213\5\0\1\213\2\0"+
    "\5\213\1\0\1\213\4\0\2\213\5\0\1\215\3\0"+
    "\4\215\2\0\1\215\1\0\2\215\3\0\14\215\5\0"+
    "\20\215\35\0\1\301\44\0\1\302\110\0\1\303\67\0"+
    "\1\304\62\0\1\305\34\0\1\224\2\0\64\224\35\0"+
    "\1\306\43\0\1\307\66\0\1\310\104\0\1\311\72\0"+
    "\1\312\46\0\1\313\50\0\1\313\34\0\1\314\105\0"+
    "\1\315\26\0\1\316\105\0\1\317\67\0\1\320\65\0"+
    "\1\321\73\0\1\322\52\0\1\323\25\0\2\323\5\0"+
    "\1\323\1\0\4\323\54\0\1\324\54\0\1\325\50\0"+
    "\1\326\25\0\2\326\5\0\1\326\1\0\4\326\60\0"+
    "\1\327\7\0\1\327\34\0\1\330\61\0\1\331\2\0"+
    "\1\332\67\0\1\333\64\0\1\334\75\0\1\335\62\0"+
    "\1\336\103\0\1\337\70\0\1\340\54\0\1\341\63\0"+
    "\1\342\42\0\1\343\106\0\1\344\75\0\1\345\32\0"+
    "\1\346\3\0\4\346\2\0\1\346\6\0\14\346\5\0"+
    "\1\346\2\0\5\346\1\0\1\346\4\0\2\346\3\0"+
    "\1\274\1\0\1\200\3\0\4\200\2\0\1\200\1\0"+
    "\2\200\3\0\14\200\5\0\20\200\1\275\2\0\5\275"+
    "\1\347\56\275\12\0\1\350\61\0\1\351\3\0\4\351"+
    "\2\0\1\351\6\0\14\351\5\0\1\351\2\0\5\351"+
    "\1\0\1\351\4\0\2\351\12\0\1\352\66\0\1\353"+
    "\127\0\1\354\62\0\1\355\50\0\1\356\63\0\1\357"+
    "\75\0\1\360\44\0\1\361\102\0\1\362\74\0\1\363"+
    "\43\0\1\364\103\0\1\365\76\0\1\366\64\0\1\367"+
    "\67\0\1\370\70\0\1\371\106\0\1\372\62\0\1\373"+
    "\47\0\1\374\45\0\1\324\50\0\1\324\23\0\1\375"+
    "\25\0\2\375\5\0\1\375\1\0\4\375\47\0\1\376"+
    "\55\0\1\377\60\0\1\u0100\52\0\1\u0101\66\0\1\u0102"+
    "\110\0\1\u0103\44\0\1\u0104\111\0\1\u0105\62\0\1\u0106"+
    "\107\0\1\u0107\46\0\1\u0108\74\0\1\u0109\60\0\1\u010a"+
    "\50\0\1\u010b\50\0\1\u010b\36\0\1\333\36\0\1\346"+
    "\3\0\4\346\2\0\1\346\1\0\2\346\3\0\14\346"+
    "\5\0\20\346\32\0\1\u010c\41\0\1\351\3\0\4\351"+
    "\2\0\1\351\1\0\2\351\3\0\14\351\5\0\20\351"+
    "\36\0\1\u010d\57\0\1\u010e\75\0\1\u010f\62\0\1\u0110"+
    "\46\0\1\u0111\66\0\1\u0112\105\0\1\u0113\51\0\1\u0114"+
    "\1\u0115\47\0\1\u0114\32\0\1\u0116\70\0\1\u0117\66\0"+
    "\1\u0118\64\0\1\u0119\75\0\1\u011a\61\0\1\u011b\70\0"+
    "\1\u011c\64\0\1\u011d\55\0\1\u011e\25\0\2\u011e\5\0"+
    "\1\u011e\1\0\4\u011e\50\0\1\u011f\55\0\1\337\67\0"+
    "\1\u0120\65\0\1\u0121\67\0\1\u0122\66\0\1\u0123\57\0"+
    "\1\u0124\67\0\1\u0125\76\0\1\u0126\57\0\1\u0127\104\0"+
    "\1\u0128\60\0\1\u0129\37\0\1\u012a\115\0\1\u012b\61\0"+
    "\1\u012c\64\0\1\u012d\106\0\1\u012e\66\0\1\u012f\51\0"+
    "\1\u0130\100\0\1\u0131\53\0\1\u0132\47\0\1\u0115\55\0"+
    "\1\u0133\120\0\1\u0134\66\0\1\u0135\110\0\1\u0136\43\0"+
    "\1\u0137\100\0\1\u0138\55\0\1\u0139\65\0\1\u013a\73\0"+
    "\1\u013b\57\0\1\u013c\74\0\1\u013d\64\0\1\u013e\41\0"+
    "\1\u013f\67\0\1\u013e\110\0\1\u0140\71\0\1\u0141\101\0"+
    "\1\u0142\70\0\1\u0143\44\0\1\u0144\42\0\1\u0145\112\0"+
    "\1\u0146\71\0\1\u0147\61\0\1\u0148\75\0\1\u012f\40\0"+
    "\1\u0149\105\0\1\u012f\50\0\1\u014a\67\0\1\u014b\50\0"+
    "\1\u014b\5\0\1\u014c\121\0\1\u014d\70\0\1\u014e\30\0"+
    "\1\u014f\21\0\1\u0150\72\0\1\u0151\110\0\1\u0152\63\0"+
    "\1\u0153\10\0\1\u0154\54\0\1\u0106\31\0\1\u0155\114\0"+
    "\1\u0156\60\0\1\u0120\70\0\1\u0157\44\0\1\u0158\114\0"+
    "\1\u0159\63\0\1\u015a\66\0\1\u015b\53\0\1\u015c\25\0"+
    "\2\u015c\5\0\1\u015c\1\0\4\u015c\37\0\1\u015d\43\0"+
    "\1\u015e\70\0\1\u0149\50\0\1\u0149\36\0\1\u015f\34\0"+
    "\1\u014b\3\0\1\u0160\63\0\1\u0161\4\0\4\u0161\1\0"+
    "\2\u0161\2\0\1\u0161\3\0\15\u0161\4\0\10\u0161\1\0"+
    "\7\u0161\40\0\1\u0162\40\0\1\u0163\57\0\1\u0150\6\0"+
    "\1\u0164\20\0\1\u0165\5\0\1\u0166\62\0\1\u0167\101\0"+
    "\1\u0168\10\0\2\u0168\26\0\1\u0168\25\0\2\u0168\10\0"+
    "\3\u0168\37\0\1\u0169\66\0\1\u0106\40\0\1\u016a\114\0"+
    "\1\u016b\60\0\1\u016c\72\0\1\u016d\71\0\1\u013d\46\0"+
    "\1\u016e\106\0\1\u016f\66\0\1\u0149\33\0\1\u015f\3\0"+
    "\1\u0170\114\0\1\u0171\66\0\1\u0172\60\0\1\u0173\50\0"+
    "\1\u0174\110\0\1\u0175\75\0\1\u0176\60\0\1\u0106\42\0"+
    "\1\u0177\20\0\1\u0178\65\0\1\u0179\77\0\1\u017a\34\0"+
    "\1\u017b\101\0\1\u0106\25\0\2\u0106\5\0\1\u0106\1\0"+
    "\4\u0106\14\0\1\u017c\104\0\1\u017d\77\0\1\u017e\57\0"+
    "\1\u017f\71\0\1\u0180\101\0\1\u0181\10\0\1\u0182\1\u0181"+
    "\1\u0183\55\0\1\u0184\46\0\1\u0106\46\0\1\u0106\66\0"+
    "\1\u0185\64\0\1\u0186\113\0\1\u0187\43\0\1\u0188\65\0"+
    "\1\u0189\104\0\1\u018a\70\0\1\u018b\57\0\1\u018c\25\0"+
    "\2\u018c\7\0\4\u018c\24\0\1\u018c\25\0\2\u018c\10\0"+
    "\3\u018c\52\0\1\u018c\10\0\1\u018c\36\0\1\u018d\44\0"+
    "\1\u018e\133\0\1\u018f\46\0\1\u0190\70\0\1\u0191\42\0"+
    "\1\u0192\115\0\1\u0193\66\0\1\u0194\37\0\1\u0195\66\0"+
    "\1\u0196\70\0\1\u0197\50\0\1\u0197\36\0\1\u0198\64\0"+
    "\1\u0199\70\0\1\u019a\66\0\1\u019b\66\0\1\u019c\101\0"+
    "\1\u019d\10\0\1\u019d\1\u019e\36\0\1\u019f\106\0\1\u01a0"+
    "\63\0\1\u01a1\54\0\1\u01a2\61\0\1\u01a3\76\0\1\u01a4"+
    "\31\0\1\u01a5\21\0\1\u01a6\63\0\1\u01a7\25\0\2\u01a7"+
    "\7\0\4\u01a7\52\0\1\u01a7\10\0\3\u01a7\57\0\1\u01a8"+
    "\40\0\1\u0106\116\0\1\u01a9\7\0\1\u01a9\36\0\1\u01aa"+
    "\42\0\1\u01aa\103\0\1\u01ab\42\0\1\u01a6\7\0\1\u01ac"+
    "\25\0\1\u01ad\11\0\1\u01ae\30\0\1\u01af\106\0\1\u01b0"+
    "\63\0\1\u01b1\50\0\1\u01b2\50\0\1\u01b2\30\0\1\u01b3"+
    "\75\0\1\u01b4\57\0\1\u01b5\107\0\1\u01b6\10\0\4\u01b6"+
    "\33\0\1\u01b7\70\0\1\u01b8\45\0\1\u01b9\115\0\1\u01ba"+
    "\37\0\1\u01bb\114\0\1\u01bc\50\0\1\u01bd\25\0\2\u01bd"+
    "\7\0\4\u01bd\31\0\1\u01be\73\0\1\u01bf\55\0\1\u01c0"+
    "\117\0\1\u01c1\47\0\1\u01c2\66\0\1\u01c3\46\0\1\u01c4"+
    "\126\0\1\u01c5\21\0\1\u0106\111\0\1\u01c6\5\0\1\u01c7"+
    "\62\0\1\u01c8\111\0\1\u01c9\31\0\1\u01ca\113\0\1\u01cb"+
    "\10\0\4\u01cb\37\0\1\u01b8\66\0\1\u01cc\63\0\1\u01cd"+
    "\67\0\1\u01ce\65\0\1\u01cf\107\0\1\u01d0\35\0\1\u01d1"+
    "\25\0\2\u01d1\7\0\4\u01d1\16\0\1\u01d2\50\0\1\u01d2"+
    "\53\0\1\u01d3\37\0\1\u01d4\76\0\1\u01d5\65\0\1\u01d6"+
    "\52\0\1\u01d7\102\0\1\u01d8\65\0\1\u01d9\47\0\1\u01da"+
    "\123\0\1\u01db\57\0\1\u01dc\50\0\1\u01dd\25\0\2\u01dd"+
    "\7\0\4\u01dd\54\0\1\u01de\26\0\1\u01df\123\0\1\u01e0"+
    "\42\0\1\u01e1\77\0\1\u01e2\54\0\1\u01e3\25\0\2\u01e3"+
    "\7\0\4\u01e3\35\0\1\u01e4\66\0\1\u01e5\46\0\1\u01e6"+
    "\111\0\1\u01e7\65\0\1\u01e8\53\0\1\u01e9\25\0\2\u01e9"+
    "\7\0\4\u01e9\43\0\1\u01ea\74\0\1\u01eb\54\0\1\u01ec"+
    "\103\0\1\u01ed\47\0\1\u01ee\76\0\1\u01ef\60\0\1\u01f0"+
    "\55\0\1\u01f1\1\u01f2\50\0\1\u01f3\71\0\1\u01f4\100\0"+
    "\1\u01f5\112\0\1\u01f6\10\0\1\u01f6\1\u01f7\43\0\1\u01f8"+
    "\102\0\1\u01f9\23\0\1\u01fa\110\0\1\u01fb\56\0\1\u01fc"+
    "\25\0\2\u01fc\7\0\4\u01fc\52\0\1\u01fc\10\0\3\u01fc"+
    "\55\0\1\u01fd\54\0\1\u01fe\41\0\1\u01ff\13\0\1\u0200"+
    "\11\0\1\u0201\11\0\1\u0202\27\0\1\u0203\50\0\1\u0203"+
    "\16\0\1\u0204\102\0\1\u0205\73\0\1\u0206\66\0\1\u0207"+
    "\56\0\1\u01ff\72\0\1\u0208\3\0\1\u0209\57\0\1\u020a"+
    "\2\0\1\u020b\71\0\1\u020c\101\0\1\u020d\10\0\4\u020d"+
    "\36\0\1\u020e\112\0\1\u020f\66\0\1\u0210\37\0\1\u0211"+
    "\47\0\1\u0212\114\0\1\u0210\66\0\1\u0213\66\0\1\u0214"+
    "\50\0\1\u0215\25\0\2\u0215\7\0\4\u0215\42\0\1\u0216"+
    "\52\0\1\u01f1\77\0\1\u0217\43\0\1\u0218\111\0\1\u0219"+
    "\65\0\1\u021a\67\0\1\u021b\41\0\1\u011f\113\0\1\u020f"+
    "\41\0\1\u021c\113\0\1\u021d\111\0\1\u021e\43\0\1\u021f"+
    "\72\0\1\u0220\51\0\1\u01f5\1\u0221\72\0\1\u0222\67\0"+
    "\1\u0223\67\0\1\u0217\45\0\1\u0224\102\0\1\u0225\52\0"+
    "\1\u0226\107\0\1\u0227\46\0\1\u0228\102\0\1\u0229\112\0"+
    "\1\u022a\62\0\1\u0217\55\0\1\u022b\56\0\1\u022c\72\0"+
    "\1\u020b\67\0\1\u022d\70\0\1\u022e\66\0\1\u022f\40\0"+
    "\1\u0230\110\0\1\u0231\45\0\1\u0232\70\0\1\u0233\116\0"+
    "\2\u0234\22\0\1\u0234\7\0\1\u0235\63\0\1\u0236\35\0"+
    "\2\u0234\22\0\1\u0234\12\0\1\u0237\40\0\1\u0238\55\0"+
    "\2\u0239\1\u023a\21\0\1\u0239\33\0\1\u023b\71\0\1\u023c"+
    "\40\0\1\u01ee\31\0\2\u0239\22\0\1\u0239\10\0\1\u01ee"+
    "\130\0\1\u023d\54\0\1\u023e\63\0\1\u01ee\45\0\1\u023d"+
    "\50\0\1\u023d\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[28105];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\64\0\2\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\2\1\1\11\1\1\1\11"+
    "\5\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\16\1\2\11\1\1\1\11\1\1\2\11"+
    "\3\1\1\11\1\1\1\11\6\1\3\0\1\11\2\0"+
    "\1\11\21\0\1\1\45\0\1\1\22\0\2\1\1\0"+
    "\1\1\15\0\1\11\2\0\1\11\1\0\1\11\11\0"+
    "\1\11\17\0\1\11\10\0\1\11\26\0\1\1\2\11"+
    "\20\0\1\11\7\0\1\11\16\0\1\11\1\1\1\0"+
    "\1\11\14\0\2\11\26\0\1\1\7\0\1\11\13\0"+
    "\1\1\15\0\1\11\16\0\1\1\11\0\1\1\27\0"+
    "\1\1\25\0\1\11\3\0\1\11\111\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[574];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2310) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 75: break;
        case 5: 
          { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
          }
        case 76: break;
        case 16: 
          { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
          }
        case 77: break;
        case 12: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
          }
        case 78: break;
        case 31: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_DATE); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 79: break;
        case 73: 
          { yybegin(PROPERTY_TYPE_DONE_WEAKREFERENCE); return CndTypes.PROPERTY_TYPE_WEAKREFERENCE;
          }
        case 80: break;
        case 72: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
          }
        case 81: break;
        case 23: 
          { yybegin(PROPERTY_ADDENDUM_ATTR);
          }
        case 82: break;
        case 19: 
          { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
          }
        case 83: break;
        case 27: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_DOUBLE); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 84: break;
        case 56: 
          { yybegin(PROPERTY_TYPE_DONE_DATE); return CndTypes.PROPERTY_TYPE_DATE;
          }
        case 85: break;
        case 42: 
          { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 86: break;
        case 35: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 87: break;
        case 67: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
          }
        case 88: break;
        case 40: 
          { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 89: break;
        case 22: 
          { yybegin(PROPERTY_ADDENDUM_LONG); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 90: break;
        case 43: 
          { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 91: break;
        case 10: 
          { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 92: break;
        case 52: 
          { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
          }
        case 93: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 94: break;
        case 30: 
          { yybegin(PROPERTY_ADDENDUM_DATE); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 95: break;
        case 69: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
          }
        case 96: break;
        case 24: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_LONG); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 97: break;
        case 18: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
          }
        case 98: break;
        case 53: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_TEXT;
          }
        case 99: break;
        case 14: 
          { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
          }
        case 100: break;
        case 44: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 101: break;
        case 57: 
          { yybegin(PROPERTY_TYPE_DONE_LONG); return CndTypes.PROPERTY_TYPE_LONG;
          }
        case 102: break;
        case 7: 
          { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
          }
        case 103: break;
        case 34: 
          { yybegin(PROPERTY_ADDENDUM_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 104: break;
        case 17: 
          { yybegin(NODE_TYPE_INHERITANCE);
          }
        case 105: break;
        case 2: 
          { yybegin(YYINITIAL); return CndTypes.CRLF;
          }
        case 106: break;
        case 8: 
          { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
          }
        case 107: break;
        case 29: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_BOOLEAN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 108: break;
        case 58: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_BOOLEAN;
          }
        case 109: break;
        case 39: 
          { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
          }
        case 110: break;
        case 6: 
          { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
          }
        case 111: break;
        case 65: 
          { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
          }
        case 112: break;
        case 13: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
          }
        case 113: break;
        case 25: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_LONG;
          }
        case 114: break;
        case 45: 
          { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 115: break;
        case 46: 
          { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 116: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 117: break;
        case 71: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 118: break;
        case 9: 
          { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 119: break;
        case 63: 
          { yybegin(PROPERTY_TYPE_DONE_DOUBLE); return CndTypes.PROPERTY_TYPE_DOUBLE;
          }
        case 120: break;
        case 60: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
          }
        case 121: break;
        case 28: 
          { yybegin(PROPERTY_ADDENDUM_BOOLEAN); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 122: break;
        case 54: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DOUBLE;
          }
        case 123: break;
        case 36: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_CHOICELIST;
          }
        case 124: break;
        case 74: 
          { yybegin(PROPERTY_TYPE_DONE_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_STRING_CHOICELIST;
          }
        case 125: break;
        case 15: 
          { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
          }
        case 126: break;
        case 47: 
          { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 127: break;
        case 50: 
          { yybegin(YYINITIAL); return CndTypes.COMMENT;
          }
        case 128: break;
        case 4: 
          { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
          }
        case 129: break;
        case 66: 
          { yybegin(PROPERTY_TYPE_DONE_BOOLEAN); return CndTypes.PROPERTY_TYPE_BOOLEAN;
          }
        case 130: break;
        case 70: 
          { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
          }
        case 131: break;
        case 64: 
          { yybegin(PROPERTY_TYPE_DONE_BINARY); return CndTypes.PROPERTY_TYPE_BINARY;
          }
        case 132: break;
        case 32: 
          { yybegin(PROPERTY_ADDENDUM_STRING_TEXT); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 133: break;
        case 61: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DATE;
          }
        case 134: break;
        case 51: 
          { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
          }
        case 135: break;
        case 55: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 136: break;
        case 38: 
          { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
          }
        case 137: break;
        case 33: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_TEXT); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 138: break;
        case 11: 
          { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 139: break;
        case 62: 
          { yybegin(PROPERTY_TYPE_DONE_STRING_TEXT); return CndTypes.PROPERTY_TYPE_STRING_TEXT;
          }
        case 140: break;
        case 48: 
          { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 141: break;
        case 21: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 142: break;
        case 26: 
          { yybegin(PROPERTY_ADDENDUM_DOUBLE); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 143: break;
        case 59: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 144: break;
        case 49: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
          }
        case 145: break;
        case 37: 
          { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
          }
        case 146: break;
        case 68: 
          { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
          }
        case 147: break;
        case 41: 
          { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 148: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
