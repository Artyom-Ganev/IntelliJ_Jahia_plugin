/* The following code was generated by JFlex 1.4.3 on 05/10/16 23:31 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 05/10/16 23:31 from the specification file
 * <tt>E:/Projects/Smile/IntelliJ_Jahia_plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROPERTY_ATTRIBUTES = 36;
  public static final int PROPERTY_DEFAULT_VALUE = 34;
  public static final int PROPERTY_MASK_OPTION_NAME = 26;
  public static final int NODE_NAMESPACE = 44;
  public static final int NAMESPACE = 2;
  public static final int PROPERTY_TYPE = 24;
  public static final int NODE_DEFAULT_VALUE = 52;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 50;
  public static final int ITEMTYPE = 20;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int EXTEND_NAMESPACE = 16;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 40;
  public static final int NODETYPE = 6;
  public static final int PROPERTY_MASK_OPTION = 30;
  public static final int NODE_ATTRIBUTES = 54;
  public static final int PROPERTY_CONSTRAINT = 38;
  public static final int SUPER_TYPES = 10;
  public static final int NODE_DEFAULT = 48;
  public static final int OPTIONS = 12;
  public static final int PROPERTY_MASK = 28;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int EXTENDS = 14;
  public static final int EXTEND = 18;
  public static final int YYINITIAL = 0;
  public static final int PROPERTY = 22;
  public static final int PROPERTY_DEFAULT = 32;
  public static final int NODE_NODETYPE = 46;
  public static final int NODE = 42;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\7\1\3\1\1\1\0\1\3\1\2\16\7\4\0\1\44\3\0"+
    "\1\6\2\0\1\37\1\56\1\57\1\5\1\60\1\50\1\52\1\42"+
    "\1\4\1\32\1\32\6\32\1\32\1\32\1\51\1\0\1\46\1\36"+
    "\1\47\2\0\1\14\1\15\1\21\1\23\1\24\1\35\1\43\1\34"+
    "\1\11\1\53\1\40\1\25\1\10\1\13\1\22\1\31\1\26\1\20"+
    "\1\16\1\17\1\27\1\45\1\41\1\12\1\30\1\33\1\54\1\0"+
    "\1\55\1\0\1\53\1\0\1\14\1\15\1\21\1\23\1\24\1\35"+
    "\1\43\1\34\1\11\1\53\1\40\1\25\1\10\1\13\1\22\1\31"+
    "\1\26\1\20\1\16\1\17\1\27\1\45\1\41\1\12\1\30\1\33"+
    "\4\0\41\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\27\6\1\0\37\6\1\0\u01ca\6\4\0\14\6"+
    "\16\0\5\6\7\0\1\6\1\0\1\6\21\0\160\7\5\6\1\0"+
    "\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0"+
    "\24\6\1\0\123\6\1\0\213\6\1\0\5\7\2\0\236\6\11\0"+
    "\46\6\2\0\1\6\7\0\47\6\7\0\1\6\1\0\55\7\1\0"+
    "\1\7\1\0\2\7\1\0\2\7\1\0\1\7\10\0\33\6\5\0"+
    "\3\6\15\0\5\7\6\0\1\6\4\0\13\7\5\0\53\6\25\7"+
    "\12\7\4\0\2\6\1\7\143\6\1\0\1\6\10\7\1\0\6\7"+
    "\2\6\2\7\1\0\4\7\2\6\12\7\3\6\2\0\1\6\17\0"+
    "\1\7\1\6\1\7\36\6\33\7\2\0\131\6\13\7\1\6\16\0"+
    "\12\7\41\6\11\7\2\6\4\0\1\6\5\0\26\6\4\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\22\0\31\6\3\7\104\0\1\6"+
    "\1\0\13\6\67\0\33\7\1\0\4\7\66\6\3\7\1\6\22\7"+
    "\1\6\7\7\12\6\2\7\2\0\12\7\1\0\7\6\1\0\7\6"+
    "\1\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0\7\6"+
    "\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7"+
    "\2\0\3\7\1\6\10\0\1\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\4\6\7\0\1\6\5\0\3\7\1\0\6\6\4\0"+
    "\2\6\2\0\26\6\1\0\7\6\1\0\2\6\1\0\2\6\1\0"+
    "\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0"+
    "\1\7\7\0\4\6\1\0\1\6\7\0\12\7\2\7\3\6\1\7"+
    "\13\0\3\7\1\0\11\6\1\0\3\6\1\0\26\6\1\0\7\6"+
    "\1\0\2\6\1\0\5\6\2\0\1\7\1\6\10\7\1\0\3\7"+
    "\1\0\3\7\2\0\1\6\17\0\2\6\2\7\2\0\12\7\1\0"+
    "\1\6\17\0\3\7\1\0\10\6\2\0\2\6\2\0\26\6\1\0"+
    "\7\6\1\0\2\6\1\0\5\6\2\0\1\7\1\6\7\7\2\0"+
    "\2\7\2\0\3\7\10\0\2\7\4\0\2\6\1\0\3\6\2\7"+
    "\2\0\12\7\1\0\1\6\20\0\1\7\1\6\1\0\6\6\3\0"+
    "\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0"+
    "\2\6\3\0\3\6\3\0\14\6\4\0\5\7\3\0\3\7\1\0"+
    "\4\7\2\0\1\6\6\0\1\7\16\0\12\7\11\0\1\6\7\0"+
    "\3\7\1\0\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0"+
    "\5\6\3\0\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7"+
    "\1\0\2\6\6\0\2\6\2\7\2\0\12\7\22\0\2\7\1\0"+
    "\10\6\1\0\3\6\1\0\27\6\1\0\12\6\1\0\5\6\2\0"+
    "\1\7\1\6\7\7\1\0\3\7\1\0\4\7\7\0\2\7\7\0"+
    "\1\6\1\0\2\6\2\7\2\0\12\7\1\0\2\6\17\0\2\7"+
    "\1\0\10\6\1\0\3\6\1\0\51\6\2\0\1\6\7\7\1\0"+
    "\3\7\1\0\4\7\1\6\10\0\1\7\10\0\2\6\2\7\2\0"+
    "\12\7\12\0\6\6\2\0\2\7\1\0\22\6\3\0\30\6\1\0"+
    "\11\6\1\0\1\6\2\0\7\6\3\0\1\7\4\0\6\7\1\0"+
    "\1\7\1\0\10\7\22\0\2\7\15\0\60\6\1\7\2\6\7\7"+
    "\4\0\10\6\10\7\1\0\12\7\47\0\2\6\1\0\1\6\2\0"+
    "\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\7\6\1\0"+
    "\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\4\6\1\7"+
    "\2\6\6\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0"+
    "\6\7\2\0\12\7\2\0\4\6\40\0\1\6\27\0\2\7\6\0"+
    "\12\7\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\10\6"+
    "\1\0\44\6\4\0\24\7\1\0\2\7\5\6\13\7\1\0\44\7"+
    "\11\0\1\7\71\0\53\6\24\7\1\6\12\7\6\0\6\6\4\7"+
    "\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\15\6\14\7"+
    "\1\6\1\7\12\7\4\7\2\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\53\6\1\0\u014d\6\1\0\4\6\2\0\7\6\1\0\1\6"+
    "\1\0\4\6\2\0\51\6\1\0\4\6\2\0\41\6\1\0\4\6"+
    "\2\0\7\6\1\0\1\6\1\0\4\6\2\0\17\6\1\0\71\6"+
    "\1\0\4\6\2\0\103\6\2\0\3\7\40\0\20\6\20\0\125\6"+
    "\14\0\u026c\6\2\0\21\6\1\0\32\6\5\0\113\6\3\0\3\6"+
    "\17\0\15\6\1\0\4\6\3\7\13\0\22\6\3\7\13\0\22\6"+
    "\2\7\14\0\15\6\1\0\3\6\1\0\2\7\14\0\64\6\40\7"+
    "\3\0\1\6\3\0\2\6\1\7\2\0\12\7\41\0\3\7\2\0"+
    "\12\7\6\0\130\6\10\0\51\6\1\7\1\6\5\0\106\6\12\0"+
    "\35\6\3\0\14\7\4\0\14\7\12\0\12\7\36\6\2\0\5\6"+
    "\13\0\54\6\4\0\21\7\7\6\2\7\6\0\12\7\46\0\27\6"+
    "\5\7\4\0\65\6\12\7\1\0\35\7\2\0\1\7\12\7\6\0"+
    "\12\7\15\0\1\6\130\0\5\7\57\6\21\7\7\6\4\0\12\7"+
    "\21\0\11\7\14\0\3\7\36\6\15\7\2\6\12\7\54\6\16\7"+
    "\14\0\44\6\24\7\10\0\12\7\3\0\3\6\12\7\44\6\122\0"+
    "\3\7\1\0\25\7\4\6\1\7\4\6\3\7\2\6\11\0\300\6"+
    "\47\7\25\0\4\7\u0116\6\2\0\6\6\2\0\46\6\2\0\6\6"+
    "\2\0\10\6\1\0\1\6\1\0\1\6\1\0\1\6\1\0\37\6"+
    "\2\0\65\6\1\0\7\6\1\0\1\6\3\0\3\6\1\0\7\6"+
    "\3\0\4\6\2\0\6\6\4\0\15\6\5\0\3\6\1\0\7\6"+
    "\16\0\5\7\32\0\5\7\20\0\2\6\23\0\1\6\13\0\5\7"+
    "\5\0\6\7\1\0\1\6\15\0\1\6\20\0\15\6\3\0\33\6"+
    "\25\0\15\7\4\0\1\7\3\0\14\7\21\0\1\6\4\0\1\6"+
    "\2\0\12\6\1\0\1\6\3\0\5\6\6\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\21\0\51\6\u0a77\0\57\6\1\0\57\6\1\0\205\6"+
    "\6\0\4\6\3\7\2\6\14\0\46\6\1\0\1\6\5\0\1\6"+
    "\2\0\70\6\7\0\1\6\17\0\1\7\27\6\11\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0\7\6\1\0"+
    "\7\6\1\0\7\6\1\0\40\7\57\0\1\6\u01d5\0\3\6\31\0"+
    "\11\6\6\7\1\0\5\6\2\0\5\6\4\0\126\6\2\0\2\7"+
    "\2\0\3\6\1\0\132\6\1\0\4\6\5\0\51\6\3\0\136\6"+
    "\21\0\33\6\65\0\20\6\u0200\0\u19b6\6\112\0\u51cd\6\63\0\u048d\6"+
    "\103\0\56\6\2\0\u010d\6\3\0\20\6\12\7\2\6\24\0\57\6"+
    "\1\7\4\0\12\7\1\0\31\6\7\0\1\7\120\6\2\7\45\0"+
    "\11\6\2\0\147\6\2\0\4\6\1\0\4\6\14\0\13\6\115\0"+
    "\12\6\1\7\3\6\1\7\4\6\1\7\27\6\5\7\20\0\1\6"+
    "\7\0\64\6\14\0\2\7\62\6\21\7\13\0\12\7\6\0\22\7"+
    "\6\6\3\0\1\6\4\0\12\7\34\6\10\7\2\0\27\6\15\7"+
    "\14\0\35\6\3\0\4\7\57\6\16\7\16\0\1\6\12\7\46\0"+
    "\51\6\16\7\11\0\3\6\1\7\10\6\2\7\2\0\12\7\6\0"+
    "\27\6\3\0\1\6\1\7\4\0\60\6\1\7\1\6\3\7\2\6"+
    "\2\7\5\6\2\7\1\6\1\7\1\6\30\0\3\6\2\0\13\6"+
    "\5\7\2\0\3\6\2\7\12\0\6\6\2\0\6\6\2\0\6\6"+
    "\11\0\7\6\1\0\7\6\221\0\43\6\10\7\1\0\2\7\2\0"+
    "\12\7\6\0\u2ba4\6\14\0\27\6\4\0\61\6\u2104\0\u016e\6\2\0"+
    "\152\6\46\0\7\6\14\0\5\6\5\0\1\6\1\7\12\6\1\0"+
    "\15\6\1\0\5\6\1\0\1\6\1\0\2\6\1\0\2\6\1\0"+
    "\154\6\41\0\u016b\6\22\0\100\6\2\0\66\6\50\0\15\6\3\0"+
    "\20\7\20\0\7\7\14\0\2\6\30\0\3\6\31\0\1\6\6\0"+
    "\5\6\1\0\207\6\2\0\1\7\4\0\1\6\13\0\12\7\7\0"+
    "\32\6\4\0\1\6\1\0\32\6\13\0\131\6\3\0\6\6\2\0"+
    "\6\6\2\0\6\6\2\0\3\6\3\0\2\6\3\0\2\6\22\0"+
    "\3\7\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\2\10\1\11\1\12\1\13\1\14\5\15"+
    "\1\16\1\17\1\20\5\21\1\22\4\1\1\23\1\24"+
    "\1\25\6\1\2\26\1\27\1\30\1\31\1\32\16\1"+
    "\1\33\1\34\3\35\1\1\1\36\1\37\2\2\2\37"+
    "\1\40\1\41\4\42\3\43\1\41\1\44\1\1\2\45"+
    "\1\46\1\47\1\50\1\51\6\1\1\52\1\1\1\53"+
    "\1\54\7\1\1\55\7\0\1\10\4\15\4\21\42\0"+
    "\1\35\3\0\1\56\1\37\1\42\1\0\1\43\34\0"+
    "\1\10\4\15\4\21\43\0\1\35\1\42\1\44\6\0"+
    "\1\57\12\0\1\60\4\0\1\55\6\0\1\10\4\15"+
    "\4\21\15\0\1\61\5\0\1\61\40\0\1\62\5\0"+
    "\1\10\1\0\1\62\3\15\1\62\3\21\1\63\66\0"+
    "\3\15\3\21\10\0\1\64\43\0\1\65\1\0\2\15"+
    "\2\21\37\0\1\66\1\0\1\67\1\15\1\21\17\0"+
    "\1\61\1\44\13\0\1\61\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u055c\0\u058d\0\u05be"+
    "\0\u05ef\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u055c"+
    "\0\u055c\0\u055c\0\u055c\0\u0746\0\u0777\0\u07a8\0\u055c\0\u055c"+
    "\0\u055c\0\u07d9\0\u080a\0\u083b\0\u086c\0\u089d\0\u08ce\0\u055c"+
    "\0\u055c\0\u055c\0\u08ff\0\u0930\0\u0961\0\u0992\0\u09c3\0\u055c"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u055c\0\u0ab8\0\u055c\0\u0ae9"+
    "\0\u0b1a\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u055c\0\u0c0f\0\u055c"+
    "\0\u0c40\0\u055c\0\u055c\0\u0c71\0\u0ca2\0\u0cd3\0\u0d04\0\u0d35"+
    "\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0e2a\0\u0e5b\0\u0e8c\0\u0ebd"+
    "\0\u0eee\0\u0f1f\0\u055c\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u055c"+
    "\0\u1014\0\u1045\0\u1076\0\u10a7\0\u10d8\0\u1014\0\u1014\0\u1109"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u11cd\0\u1260"+
    "\0\u1291\0\u055c\0\u12c2\0\u055c\0\u12f3\0\u055c\0\u055c\0\u1324"+
    "\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u1419\0\u055c\0\u144a\0\u147b"+
    "\0\u14ac\0\u14dd\0\u150e\0\u153f\0\u1570\0\u15a1\0\u15d2\0\u1603"+
    "\0\u1634\0\u1665\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b"+
    "\0\u17bc\0\u17ed\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u1a39\0\u1a6a\0\u1a9b"+
    "\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1\0\u1bf2\0\u1c23"+
    "\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18\0\u1d49\0\u1d7a\0\u1dab"+
    "\0\u1ddc\0\u1e0d\0\u1e3e\0\u1e6f\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33"+
    "\0\u1f64\0\u1f95\0\u1fc6\0\u1ff7\0\u2028\0\u1045\0\u2059\0\u055c"+
    "\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e\0\u217f\0\u21b0\0\u21e1"+
    "\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6\0\u2307\0\u2338\0\u2369"+
    "\0\u239a\0\u23cb\0\u23fc\0\u242d\0\u245e\0\u248f\0\u24c0\0\u24f1"+
    "\0\u2522\0\u2553\0\u2584\0\u25b5\0\u25e6\0\u2617\0\u2648\0\u2679"+
    "\0\u26aa\0\u26db\0\u270c\0\u273d\0\u276e\0\u279f\0\u27d0\0\u2801"+
    "\0\u2832\0\u2863\0\u2894\0\u28c5\0\u28f6\0\u2927\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37\0\u2c68\0\u2c99"+
    "\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf\0\u2df0\0\u2e21"+
    "\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u055c\0\u20ec\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u055c\0\u306d\0\u309e"+
    "\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\u055c\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u055c\0\u331b\0\u334c"+
    "\0\u337d\0\u33ae\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4"+
    "\0\u3505\0\u3536\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c"+
    "\0\u368d\0\u36be\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4"+
    "\0\u3815\0\u3846\0\u055c\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b"+
    "\0\u396c\0\u399d\0\u39ce\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3"+
    "\0\u3af4\0\u3b25\0\u3b56\0\u3b87\0\u3bb8\0\u2f16\0\u3be9\0\u3c1a"+
    "\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde\0\u3d0f\0\u3d40\0\u3d71\0\u3da2"+
    "\0\u3dd3\0\u3e04\0\u3e35\0\u3e66\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a"+
    "\0\u3f5b\0\u055c\0\u3f8c\0\u3fbd\0\u3fee\0\u401f\0\u4050\0\u4081"+
    "\0\u40b2\0\u080a\0\u40e3\0\u4114\0\u4145\0\u08ff\0\u4176\0\u41a7"+
    "\0\u41d8\0\u055c\0\u4209\0\u423a\0\u426b\0\u429c\0\u42cd\0\u42fe"+
    "\0\u432f\0\u4360\0\u4391\0\u43c2\0\u43f3\0\u4424\0\u4455\0\u4486"+
    "\0\u44b7\0\u44e8\0\u4519\0\u454a\0\u457b\0\u45ac\0\u45dd\0\u460e"+
    "\0\u463f\0\u4670\0\u46a1\0\u46d2\0\u4703\0\u4734\0\u4765\0\u4796"+
    "\0\u47c7\0\u47f8\0\u4829\0\u485a\0\u488b\0\u48bc\0\u48ed\0\u491e"+
    "\0\u494f\0\u4980\0\u49b1\0\u49e2\0\u4a13\0\u4a44\0\u4a75\0\u4aa6"+
    "\0\u4ad7\0\u4b08\0\u4b39\0\u4b6a\0\u4b9b\0\u4bcc\0\u4bfd\0\u4c2e"+
    "\0\u4c5f\0\u4c90\0\u4cc1\0\u4cf2\0\u4d23\0\u4d54\0\u4d85\0\u4db6"+
    "\0\u4de7\0\u4e18\0\u4e49\0\u4e7a\0\u4eab\0\u4edc\0\u055c\0\u4f0d"+
    "\0\u4f3e\0\u4f6f\0\u4fa0\0\u4fd1\0\u5002\0\u5033\0\u5064\0\u5095"+
    "\0\u50c6\0\u50f7\0\u5128\0\u5159\0\u518a\0\u51bb\0\u51ec\0\u521d"+
    "\0\u524e\0\u527f\0\u52b0\0\u52e1\0\u5312\0\u5343\0\u5374\0\u53a5"+
    "\0\u53d6\0\u5407\0\u5438\0\u5469\0\u549a\0\u54cb\0\u54fc\0\u552d"+
    "\0\u555e\0\u558f\0\u055c\0\u55c0\0\u55f1\0\u5622\0\u5653\0\u5684"+
    "\0\u56b5\0\u56e6\0\u5717\0\u5748\0\u5779\0\u57aa\0\u57db\0\u0ca2"+
    "\0\u580c\0\u583d\0\u586e\0\u589f\0\u58d0\0\u5901\0\u5932\0\u5963"+
    "\0\u5994\0\u59c5\0\u59f6\0\u5a27\0\u5a58\0\u5a89\0\u5aba\0\u5aeb"+
    "\0\u5b1c\0\u5b4d\0\u5b7e\0\u5baf\0\u5be0\0\u5c11\0\u5c42\0\u055c"+
    "\0\u5c73\0\u55c0\0\u5ca4\0\u5cd5\0\u5d06\0\u5d37\0\u5d68\0\u5d99"+
    "\0\u5dca\0\u5dfb\0\u5e2c\0\u5e5d\0\u5e8e\0\u5ebf\0\u5ef0\0\u5f21"+
    "\0\u5f52\0\u5f83\0\u5fb4\0\u5901\0\u5fe5\0\u6016\0\u6047\0\u6078"+
    "\0\u60a9\0\u60da\0\u610b\0\u613c\0\u616d\0\u619e\0\u61cf\0\u6200"+
    "\0\u6231\0\u6262\0\u6293\0\u62c4\0\u62f5\0\u5fe5\0\u6326\0\u6357"+
    "\0\u6388\0\u63b9\0\u63ea\0\u641b\0\u644c\0\u647d\0\u64ae\0\u64df"+
    "\0\u6510\0\u6541\0\u6572\0\u65a3\0\u65d4\0\u6605\0\u6636\0\u6667"+
    "\0\u6698\0\u66c9\0\u66fa\0\u672b\0\u675c\0\u678d\0\u67be\0\u67ef"+
    "\0\u6820\0\u6851\0\u6882\0\u68b3\0\u68e4\0\u6915\0\u6946\0\u6977"+
    "\0\u69a8\0\u69d9\0\u6a0a\0\u6a3b\0\u6a6c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\40\1\41\3\35\1\42\1\43"+
    "\1\35\1\44\1\45\5\35\1\46\1\35\1\47\17\35"+
    "\1\40\1\35\1\50\3\35\1\51\1\35\1\52\3\35"+
    "\1\53\1\35\1\36\1\37\1\40\1\54\1\35\1\55"+
    "\1\35\22\55\1\35\1\55\1\56\1\55\1\57\1\60"+
    "\2\55\1\35\1\55\1\40\1\55\1\35\1\61\3\35"+
    "\1\55\6\35\1\36\1\37\1\40\1\54\1\35\1\62"+
    "\1\35\22\62\1\35\3\62\2\35\2\62\1\35\1\62"+
    "\1\40\1\62\5\35\1\62\6\35\1\36\1\37\1\40"+
    "\1\54\1\35\1\63\1\35\1\64\2\63\1\65\1\66"+
    "\5\63\1\67\7\63\1\35\3\63\2\35\2\63\1\35"+
    "\1\63\1\40\1\63\1\35\1\70\1\35\1\71\1\35"+
    "\1\63\1\35\1\72\4\35\1\36\1\37\1\40\1\54"+
    "\1\35\1\73\1\35\1\74\2\73\1\75\1\76\5\73"+
    "\1\77\7\73\1\35\3\73\2\35\2\73\1\35\1\73"+
    "\1\40\1\73\5\35\1\73\6\35\1\36\1\37\1\40"+
    "\1\54\1\35\1\63\1\35\1\64\2\63\1\65\1\66"+
    "\5\63\1\67\7\63\1\35\3\63\2\35\2\63\1\35"+
    "\1\63\1\40\1\63\2\35\1\100\1\71\1\35\1\63"+
    "\6\35\1\36\1\37\1\40\1\54\3\35\1\101\2\35"+
    "\1\102\1\103\5\35\1\104\21\35\1\40\15\35\1\36"+
    "\1\37\1\40\1\54\31\35\1\105\5\35\1\40\15\35"+
    "\1\36\1\37\1\40\1\54\1\35\1\106\1\35\22\106"+
    "\1\35\3\106\2\35\2\106\1\35\1\106\1\40\1\106"+
    "\5\35\1\106\6\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\63\1\35\22\63\1\35\3\63\2\35\2\63\1\35"+
    "\1\63\1\40\1\63\2\35\1\107\1\71\1\35\1\63"+
    "\6\35\1\36\1\37\1\40\1\54\3\35\1\110\10\35"+
    "\1\111\1\112\1\113\1\35\1\114\3\35\1\115\4\35"+
    "\1\57\5\35\1\40\15\35\1\36\1\37\1\40\1\54"+
    "\1\116\1\117\1\35\22\117\1\35\3\117\2\35\2\117"+
    "\1\35\1\117\1\40\1\117\5\35\1\117\2\35\1\120"+
    "\3\35\1\36\1\37\1\40\1\54\1\35\1\121\1\35"+
    "\22\121\1\35\3\121\2\35\2\121\1\35\1\121\1\40"+
    "\1\121\2\35\1\122\2\35\1\121\3\35\1\123\2\35"+
    "\1\36\1\37\1\40\1\54\3\35\1\124\1\125\1\35"+
    "\1\126\1\127\1\35\1\130\1\131\1\132\1\133\1\35"+
    "\1\134\1\35\1\135\1\35\1\136\1\35\1\137\3\35"+
    "\1\140\3\35\1\141\2\35\1\40\15\35\1\36\1\37"+
    "\1\40\1\54\1\35\1\142\1\35\22\142\1\35\3\142"+
    "\2\35\2\142\1\35\1\142\1\40\1\142\5\35\1\142"+
    "\1\143\2\35\1\123\1\35\1\144\1\36\1\37\1\145"+
    "\1\146\31\144\1\57\1\147\4\144\1\40\3\144\1\150"+
    "\4\144\1\72\1\144\1\123\1\144\1\151\1\152\1\153"+
    "\1\154\1\155\31\151\1\156\5\151\1\40\1\151\1\157"+
    "\12\151\1\160\1\36\1\37\1\161\1\162\32\160\1\163"+
    "\4\160\1\40\14\160\1\164\1\152\1\153\1\165\1\166"+
    "\37\164\1\40\1\164\1\167\12\164\1\170\1\36\1\37"+
    "\56\170\1\35\1\36\1\37\1\40\1\54\32\35\1\171"+
    "\4\35\1\40\15\35\1\36\1\37\1\40\1\54\1\172"+
    "\1\173\1\35\22\173\1\35\3\173\2\35\2\173\1\35"+
    "\1\173\1\40\1\173\5\35\1\173\2\35\1\174\3\35"+
    "\1\36\1\37\1\40\1\54\1\35\1\175\1\35\22\175"+
    "\1\35\3\175\2\35\2\175\1\35\1\175\1\40\1\175"+
    "\5\35\1\175\6\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\63\1\35\22\63\1\35\3\63\2\35\2\63\1\35"+
    "\1\63\1\40\1\63\2\35\1\176\1\71\1\35\1\63"+
    "\3\35\1\177\2\35\1\36\1\37\1\40\1\54\3\35"+
    "\1\200\1\201\2\35\1\202\1\35\1\203\2\35\1\204"+
    "\7\35\1\205\4\35\1\206\5\35\1\40\1\207\14\35"+
    "\1\36\1\37\1\40\1\54\1\35\1\210\1\35\22\210"+
    "\1\35\3\210\2\35\2\210\1\35\1\210\1\40\1\210"+
    "\5\35\1\210\6\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\211\1\35\22\211\1\35\3\211\2\35\2\211\1\35"+
    "\1\211\1\40\1\211\3\35\1\71\1\35\1\211\6\35"+
    "\1\36\1\37\1\40\1\54\3\35\1\212\1\213\2\35"+
    "\1\214\1\35\1\215\2\35\1\216\7\35\1\217\12\35"+
    "\1\40\1\220\13\35\62\0\1\36\62\0\1\40\40\0"+
    "\1\40\20\0\1\221\1\222\64\0\1\223\66\0\1\224"+
    "\63\0\1\225\53\0\1\226\63\0\1\227\52\0\1\230"+
    "\52\0\1\221\62\0\30\55\2\0\2\55\1\0\1\55"+
    "\1\0\1\55\5\0\1\55\13\0\11\55\1\231\16\55"+
    "\2\0\2\55\1\0\1\55\1\0\1\55\5\0\1\55"+
    "\13\0\30\62\2\0\2\62\1\0\1\62\1\0\1\62"+
    "\5\0\1\62\13\0\30\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\3\63\1\232\24\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\14\63\1\233\13\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\7\63\1\234\20\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\12\63\1\235\15\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\30\73\2\0\2\73"+
    "\1\0\1\73\1\0\1\73\5\0\1\73\13\0\3\73"+
    "\1\236\24\73\2\0\2\73\1\0\1\73\1\0\1\73"+
    "\5\0\1\73\13\0\14\73\1\237\13\73\2\0\2\73"+
    "\1\0\1\73\1\0\1\73\5\0\1\73\13\0\7\73"+
    "\1\240\20\73\2\0\2\73\1\0\1\73\1\0\1\73"+
    "\5\0\1\73\13\0\12\73\1\241\15\73\2\0\2\73"+
    "\1\0\1\73\1\0\1\73\5\0\1\73\16\0\1\242"+
    "\71\0\1\243\53\0\1\244\63\0\1\245\46\0\30\106"+
    "\2\0\2\106\1\0\1\106\1\0\1\106\5\0\1\106"+
    "\31\0\1\246\56\0\1\247\2\0\1\250\64\0\1\251"+
    "\53\0\1\252\45\0\1\253\2\0\1\254\64\0\1\255"+
    "\3\0\1\256\42\0\30\117\2\0\4\117\1\0\1\117"+
    "\3\0\1\117\1\0\1\117\13\0\1\121\1\0\22\121"+
    "\1\0\3\121\2\0\2\121\1\0\1\121\1\0\1\121"+
    "\5\0\1\121\16\0\1\257\10\0\1\260\1\0\1\261"+
    "\44\0\1\262\72\0\1\263\65\0\1\264\52\0\1\265"+
    "\1\266\1\0\1\267\2\0\1\270\55\0\1\271\3\0"+
    "\1\272\54\0\1\273\56\0\1\274\62\0\1\275\45\0"+
    "\1\276\65\0\1\277\66\0\1\300\56\0\1\301\2\0"+
    "\1\302\55\0\1\303\44\0\1\142\1\0\22\142\1\0"+
    "\3\142\2\0\2\142\1\0\1\142\1\0\1\142\5\0"+
    "\1\142\5\0\1\144\2\0\33\144\2\0\4\144\1\0"+
    "\3\144\1\0\4\144\1\0\1\144\1\0\2\144\2\0"+
    "\1\145\32\144\2\0\4\144\1\40\3\144\1\0\4\144"+
    "\1\0\1\144\1\0\2\144\2\0\1\144\1\304\31\144"+
    "\2\0\4\144\1\0\3\144\1\0\4\144\1\0\1\144"+
    "\1\0\1\144\1\305\2\0\34\305\1\0\15\305\1\0"+
    "\3\305\1\151\2\0\41\151\1\0\14\151\1\0\2\306"+
    "\1\307\40\0\1\307\1\0\1\310\13\0\1\152\1\306"+
    "\1\307\40\0\1\307\1\0\1\310\12\0\1\151\2\0"+
    "\1\154\40\151\1\40\15\151\2\0\1\151\1\311\37\151"+
    "\1\0\14\151\1\160\2\0\41\160\1\0\15\160\2\0"+
    "\1\161\40\160\1\40\15\160\2\0\1\160\1\312\37\160"+
    "\1\0\14\160\1\163\2\0\41\163\1\313\14\163\1\164"+
    "\2\0\41\164\1\0\15\164\2\0\1\165\40\164\1\40"+
    "\15\164\2\0\1\164\1\314\37\164\1\0\14\164\1\170"+
    "\2\0\56\170\1\315\2\0\56\315\6\0\30\173\2\0"+
    "\2\173\1\0\1\173\1\0\1\173\3\0\1\173\1\0"+
    "\1\173\13\0\30\175\2\0\2\175\1\0\1\175\1\0"+
    "\1\175\5\0\1\175\21\0\1\316\12\0\1\317\44\0"+
    "\1\320\27\0\1\321\32\0\1\322\11\0\1\323\44\0"+
    "\1\324\67\0\1\325\56\0\1\326\64\0\1\327\42\0"+
    "\30\210\2\0\2\210\1\0\1\210\1\0\1\210\5\0"+
    "\1\210\13\0\30\211\2\0\2\211\1\0\1\211\1\0"+
    "\1\211\5\0\1\211\21\0\1\330\12\0\1\331\44\0"+
    "\1\332\27\0\1\333\32\0\1\334\11\0\1\335\44\0"+
    "\1\336\67\0\1\337\56\0\1\340\64\0\1\341\34\0"+
    "\1\221\2\0\56\221\5\222\1\342\53\222\12\0\1\343"+
    "\72\0\1\344\62\0\1\345\50\0\1\346\65\0\1\347"+
    "\54\0\1\350\47\0\11\55\1\351\16\55\2\0\2\55"+
    "\1\0\1\55\1\0\1\55\5\0\1\55\13\0\4\63"+
    "\1\352\23\63\2\0\2\63\1\0\1\63\1\0\1\63"+
    "\5\0\1\63\13\0\20\63\1\353\7\63\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\5\0\1\63\13\0\10\63"+
    "\1\354\17\63\2\0\2\63\1\0\1\63\1\0\1\63"+
    "\5\0\1\63\13\0\15\63\1\355\12\63\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\5\0\1\63\13\0\4\73"+
    "\1\356\23\73\2\0\2\73\1\0\1\73\1\0\1\73"+
    "\5\0\1\73\13\0\20\73\1\357\7\73\2\0\2\73"+
    "\1\0\1\73\1\0\1\73\5\0\1\73\13\0\10\73"+
    "\1\360\17\73\2\0\2\73\1\0\1\73\1\0\1\73"+
    "\5\0\1\73\13\0\15\73\1\361\12\73\2\0\2\73"+
    "\1\0\1\73\1\0\1\73\5\0\1\73\17\0\1\362"+
    "\74\0\1\363\50\0\1\364\65\0\1\365\54\0\1\366"+
    "\54\0\1\367\61\0\1\370\63\0\1\371\76\0\1\372"+
    "\41\0\1\373\72\0\1\374\52\0\1\375\56\0\1\376"+
    "\50\0\1\377\73\0\1\u0100\50\0\1\u0101\61\0\1\u0102"+
    "\67\0\1\u0103\54\0\1\u0104\61\0\1\u0105\60\0\1\u0106"+
    "\71\0\1\u0107\44\0\1\u0108\53\0\1\u0109\101\0\1\377"+
    "\42\0\1\u010a\2\0\1\u010b\52\0\1\u010c\16\0\1\u010d"+
    "\62\0\1\u010e\42\0\1\u010f\71\0\1\u0110\54\0\1\u0111"+
    "\65\0\1\u0112\47\0\1\u0113\64\0\1\u0114\40\0\1\304"+
    "\2\0\33\304\2\221\4\304\1\221\3\304\1\221\4\304"+
    "\1\221\1\304\1\221\1\304\1\305\2\0\34\305\1\u0115"+
    "\15\305\1\0\3\305\3\0\1\307\40\0\1\307\1\0"+
    "\1\310\12\0\1\311\2\0\41\311\1\221\14\311\1\312"+
    "\2\0\41\312\1\221\14\312\1\313\2\0\34\313\1\u0116"+
    "\21\313\1\314\2\0\41\314\1\221\14\314\1\315\2\0"+
    "\34\315\1\u0117\21\315\13\0\1\u0118\72\0\1\u0119\44\0"+
    "\1\u011a\62\0\1\u011b\67\0\1\u011c\55\0\1\u011d\57\0"+
    "\1\u011e\52\0\1\u011f\20\0\1\u0120\51\0\1\u0121\56\0"+
    "\1\u0122\53\0\1\u0123\72\0\1\u0124\44\0\1\u0125\62\0"+
    "\1\u0126\67\0\1\u0127\55\0\1\u0128\57\0\1\u0129\52\0"+
    "\1\u012a\20\0\1\u012b\51\0\1\u012c\56\0\1\u012d\40\0"+
    "\4\222\1\u012e\1\342\53\222\11\0\1\u012f\57\0\1\u0130"+
    "\77\0\1\u0131\50\0\1\u0132\65\0\1\u0133\60\0\1\u0134"+
    "\42\0\23\55\1\u0135\4\55\2\0\2\55\1\0\1\55"+
    "\1\0\1\55\5\0\1\55\13\0\3\63\1\u0136\24\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\21\63\1\u0137\6\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\11\63\1\u0138\16\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\16\63\1\u0139\11\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\3\73\1\u013a\24\73"+
    "\2\0\2\73\1\0\1\73\1\0\1\73\5\0\1\73"+
    "\13\0\21\73\1\u013b\6\73\2\0\2\73\1\0\1\73"+
    "\1\0\1\73\5\0\1\73\13\0\11\73\1\u013c\16\73"+
    "\2\0\2\73\1\0\1\73\1\0\1\73\5\0\1\73"+
    "\13\0\16\73\1\u013d\11\73\2\0\2\73\1\0\1\73"+
    "\1\0\1\73\5\0\1\73\16\0\1\u013e\76\0\1\u013f"+
    "\50\0\1\u0140\65\0\1\u0141\50\0\1\u0142\63\0\1\u0143"+
    "\57\0\1\u0144\53\0\1\u0145\63\0\1\u0146\63\0\1\u0147"+
    "\63\0\1\u0148\67\0\1\u0149\37\0\1\u014a\74\0\1\u014b"+
    "\63\0\1\u014c\60\0\1\u014d\74\0\1\377\41\0\1\u014e"+
    "\56\0\1\u014f\47\0\1\u0150\66\0\1\u0151\55\0\1\u0152"+
    "\57\0\1\u0153\76\0\1\u0154\52\0\1\u0155\57\0\1\u0156"+
    "\67\0\1\u0157\42\0\1\u0158\71\0\1\u0159\74\0\1\u015a"+
    "\40\0\1\u014d\50\0\1\u015b\73\0\1\u015c\100\0\1\u014b"+
    "\55\0\1\u015d\20\0\1\315\2\0\1\u015e\33\315\1\u0117"+
    "\4\315\1\u015e\3\315\1\u015f\10\315\23\0\1\u0160\54\0"+
    "\1\u0161\60\0\1\u0162\63\0\1\u0163\56\0\1\u0164\62\0"+
    "\1\u0165\67\0\1\u0166\57\0\1\u011e\47\0\1\u0167\57\0"+
    "\1\u0168\65\0\1\u0169\54\0\1\u016a\60\0\1\u016b\63\0"+
    "\1\u016c\56\0\1\u016d\62\0\1\u016e\67\0\1\u016f\57\0"+
    "\1\u0129\47\0\1\u0170\57\0\1\u0171\55\0\1\u0172\64\0"+
    "\1\u0173\65\0\1\u0174\54\0\1\u0175\60\0\1\u0176\53\0"+
    "\1\u0177\53\0\10\55\1\u0178\17\55\2\0\2\55\1\0"+
    "\1\55\1\0\1\55\3\0\1\u0179\1\0\1\55\13\0"+
    "\5\63\1\u017a\22\63\2\0\2\63\1\0\1\63\1\0"+
    "\1\63\5\0\1\63\13\0\16\63\1\u017b\11\63\2\0"+
    "\2\63\1\0\1\63\1\0\1\63\5\0\1\63\13\0"+
    "\12\63\1\u017c\15\63\2\0\2\63\1\0\1\63\1\0"+
    "\1\63\5\0\1\63\13\0\12\63\1\u017d\15\63\2\0"+
    "\2\63\1\0\1\63\1\0\1\63\5\0\1\63\13\0"+
    "\5\73\1\u017e\22\73\2\0\2\73\1\0\1\73\1\0"+
    "\1\73\5\0\1\73\13\0\16\73\1\u017f\11\73\2\0"+
    "\2\73\1\0\1\73\1\0\1\73\5\0\1\73\13\0"+
    "\12\73\1\u0180\15\73\2\0\2\73\1\0\1\73\1\0"+
    "\1\73\5\0\1\73\13\0\12\73\1\u0181\15\73\2\0"+
    "\2\73\1\0\1\73\1\0\1\73\5\0\1\73\20\0"+
    "\1\u0182\71\0\1\u0183\54\0\1\u0184\60\0\1\u0185\63\0"+
    "\1\u0186\55\0\1\u0187\3\0\1\u0188\52\0\1\u0189\64\0"+
    "\1\u018a\65\0\1\u018b\53\0\1\u018c\65\0\1\u018d\55\0"+
    "\1\u018e\45\0\1\u018f\74\0\1\u0190\51\0\1\u014b\60\0"+
    "\1\u014b\1\u0191\57\0\1\u0192\2\0\1\u0193\70\0\1\u0194"+
    "\43\0\1\u0195\64\0\1\u0196\62\0\1\u0197\63\0\1\u0198"+
    "\57\0\1\u0199\63\0\1\u019a\53\0\1\u019b\55\0\1\u019c"+
    "\54\0\1\u019d\71\0\1\u019e\45\0\1\u019f\73\0\1\u01a0"+
    "\71\0\1\u01a1\23\0\1\315\2\u01a2\1\u015f\33\315\1\u0117"+
    "\4\315\1\u015f\14\315\14\0\1\u01a3\55\0\1\u01a4\60\0"+
    "\1\u01a5\67\0\1\u01a6\57\0\1\u011e\62\0\1\u01a7\66\0"+
    "\1\u01a8\55\0\1\u01a9\45\0\1\u01aa\63\0\1\u01ab\55\0"+
    "\1\u01ac\60\0\1\u01ad\67\0\1\u01ae\57\0\1\u0129\62\0"+
    "\1\u01af\66\0\1\u01b0\55\0\1\u01b1\45\0\1\u01b2\77\0"+
    "\1\u01b3\50\0\1\u01b4\54\0\1\u01b5\60\0\1\u01b6\67\0"+
    "\1\u01b7\43\0\30\55\2\0\2\55\1\0\1\55\1\0"+
    "\1\55\3\0\1\u0179\1\0\1\55\11\0\1\u01b8\62\0"+
    "\12\63\1\u01b9\15\63\2\0\2\63\1\0\1\63\1\0"+
    "\1\63\5\0\1\63\13\0\6\63\1\u01ba\21\63\2\0"+
    "\2\63\1\0\1\63\1\0\1\63\5\0\1\63\13\0"+
    "\6\63\1\u01bb\21\63\2\0\2\63\1\0\1\63\1\0"+
    "\1\63\5\0\1\63\13\0\12\73\1\u01bc\15\73\2\0"+
    "\2\73\1\0\1\73\1\0\1\73\5\0\1\73\13\0"+
    "\6\73\1\u01bd\21\73\2\0\2\73\1\0\1\73\1\0"+
    "\1\73\5\0\1\73\13\0\6\73\1\u01be\21\73\2\0"+
    "\2\73\1\0\1\73\1\0\1\73\5\0\1\73\25\0"+
    "\1\u01bf\54\0\1\u01c0\60\0\1\u01c1\60\0\1\u01c2\55\0"+
    "\1\u01c3\62\0\1\u018d\56\0\1\u01c4\62\0\1\u01c5\72\0"+
    "\1\u018d\53\0\1\u01c6\57\0\1\u01c7\61\0\1\u01c8\56\0"+
    "\1\u01c9\66\0\1\u01ca\64\0\1\u01cb\54\0\1\u01cc\56\0"+
    "\1\u01cd\55\0\1\u014b\56\0\1\u01ce\57\0\1\u01cf\67\0"+
    "\1\u01d0\51\0\1\u01d1\64\0\1\u01d2\60\0\1\u01d3\53\0"+
    "\1\u01d4\65\0\1\u01d5\63\0\1\u01d6\55\0\1\u01d7\56\0"+
    "\1\u01d8\62\0\1\u014b\65\0\1\u01d9\34\0\2\u01a2\1\u01da"+
    "\33\0\1\u01db\4\0\1\u01da\33\0\1\u01dc\72\0\1\u01dd"+
    "\43\0\1\u01de\70\0\1\u011e\54\0\1\u01df\57\0\1\u01a6"+
    "\62\0\1\u01e0\61\0\1\u01e1\55\0\1\u01e2\72\0\1\u01e3"+
    "\43\0\1\u01e4\70\0\1\u0129\54\0\1\u01e5\57\0\1\u01ae"+
    "\62\0\1\u01e6\61\0\1\u01e7\67\0\1\u01e8\57\0\1\u0172"+
    "\51\0\1\u01e9\54\0\1\u01ea\61\0\1\u01eb\46\0\1\u01ec"+
    "\62\0\22\63\1\u017a\5\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\13\63\1\u01ed\14\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\7\63\1\u01ee\20\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\22\73\1\u017e\5\73"+
    "\2\0\2\73\1\0\1\73\1\0\1\73\5\0\1\73"+
    "\13\0\13\73\1\u01ef\14\73\2\0\2\73\1\0\1\73"+
    "\1\0\1\73\5\0\1\73\13\0\7\73\1\u01f0\20\73"+
    "\2\0\2\73\1\0\1\73\1\0\1\73\5\0\1\73"+
    "\35\0\1\u0182\51\0\1\u01f1\54\0\1\u01f2\62\0\1\u01f3"+
    "\56\0\1\u01f4\100\0\1\u01f5\41\0\1\u01c7\65\0\1\u01f6"+
    "\54\0\1\u01f7\57\0\1\371\53\0\1\u01f8\100\0\1\u01f9"+
    "\54\0\1\u01fa\43\0\1\u01fb\75\0\1\u01fc\52\0\1\u01fd"+
    "\65\0\1\u01fe\53\0\1\u01ff\51\0\1\u0200\71\0\1\u0201"+
    "\63\0\1\u0202\64\0\1\u014b\54\0\1\u0203\65\0\1\u0204"+
    "\45\0\1\u0205\64\0\1\u0206\41\0\1\u01da\33\0\1\u01db"+
    "\4\0\1\u01da\14\0\1\u0207\2\0\34\u0207\1\0\21\u0207"+
    "\22\0\1\u0208\63\0\1\u01a6\60\0\1\u0209\57\0\1\u020a"+
    "\53\0\1\u020b\54\0\1\u011e\67\0\1\u020c\63\0\1\u01ae"+
    "\60\0\1\u020d\57\0\1\u020e\53\0\1\u020f\54\0\1\u0129"+
    "\71\0\1\u0210\53\0\1\u0172\66\0\1\u0211\37\0\1\u0212"+
    "\3\0\26\u0212\2\0\4\u0212\1\0\1\u0212\4\0\2\u0212"+
    "\13\0\11\63\1\u017a\16\63\2\0\2\63\1\0\1\63"+
    "\1\0\1\63\5\0\1\63\13\0\17\63\1\u0213\10\63"+
    "\2\0\2\63\1\0\1\63\1\0\1\63\5\0\1\63"+
    "\13\0\11\73\1\u017e\16\73\2\0\2\73\1\0\1\73"+
    "\1\0\1\73\5\0\1\73\13\0\17\73\1\u0214\10\73"+
    "\2\0\2\73\1\0\1\73\1\0\1\73\5\0\1\73"+
    "\24\0\1\u0182\66\0\1\u0215\47\0\1\u01c7\73\0\1\u0216"+
    "\42\0\1\u0217\73\0\1\u0218\45\0\1\u0219\73\0\1\u014d"+
    "\60\0\1\u021a\65\0\1\u021b\53\0\1\u021c\56\0\1\u01a0"+
    "\55\0\1\u0191\65\0\1\u021d\56\0\1\u021e\62\0\1\u021f"+
    "\47\0\1\u0220\60\0\1\u0221\65\0\1\u0222\51\0\1\u0223"+
    "\110\0\1\u0224\17\0\1\u0207\2\0\34\u0207\1\u0225\21\u0207"+
    "\20\0\1\u0120\51\0\1\u0226\63\0\1\u01e0\70\0\1\u0227"+
    "\54\0\1\u012b\51\0\1\u0228\63\0\1\u01e6\70\0\1\u0229"+
    "\60\0\1\u0172\42\0\16\63\1\u017a\11\63\2\0\2\63"+
    "\1\0\1\63\1\0\1\63\5\0\1\63\13\0\16\73"+
    "\1\u017e\11\73\2\0\2\73\1\0\1\73\1\0\1\73"+
    "\5\0\1\73\31\0\1\u0182\53\0\1\u022a\62\0\1\u022b"+
    "\57\0\1\u022c\64\0\1\u022d\55\0\1\u022e\64\0\1\u022f"+
    "\70\0\1\u0230\41\0\1\u0231\65\0\1\u01f9\52\0\1\u0232"+
    "\62\0\1\u01fe\60\0\1\u0233\63\0\1\u0234\60\0\1\u0235"+
    "\41\0\1\u0236\40\0\1\u0236\3\0\1\u0237\43\0\1\u01a6"+
    "\50\0\1\u011e\70\0\1\u01ae\50\0\1\u0129\61\0\1\u0238"+
    "\50\0\1\u0239\55\0\1\u023a\65\0\1\u023b\61\0\1\u023c"+
    "\65\0\1\u023d\45\0\1\u023e\62\0\1\u023f\74\0\1\u0240"+
    "\62\0\1\u0241\60\0\1\u014d\42\0\1\u014d\46\0\2\u01a2"+
    "\1\u0237\33\0\1\u01db\4\0\1\u0237\24\0\1\u0242\67\0"+
    "\1\u0243\54\0\1\u0244\112\0\1\u0245\44\0\1\u0246\46\0"+
    "\1\377\65\0\1\u0247\56\0\1\u0248\51\0\1\u0249\65\0"+
    "\1\u024a\62\0\1\u024b\47\0\1\u024c\112\0\1\u01c7\26\0"+
    "\1\u024d\63\0\1\u024e\71\0\1\u024f\56\0\1\377\60\0"+
    "\1\u0250\57\0\1\u0251\61\0\1\u0252\57\0\1\u0253\62\0"+
    "\1\u0254\54\0\1\u0255\63\0\1\u0256\62\0\1\377\64\0"+
    "\1\u0257\53\0\1\u01c7\47\0\1\u01c7\106\0\1\u01c7\43\0"+
    "\1\u0258\47\0\1\u0259\71\0\1\u025a\47\0\1\u0194\61\0"+
    "\1\u025b\64\0\1\u025c\50\0\1\u01f9\67\0\1\u025d\52\0"+
    "\1\u01f9\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27293];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\2\11\11\1\4\11\3\1\3\11\6\1\3\11"+
    "\5\1\1\11\4\1\1\11\1\1\1\11\6\1\1\11"+
    "\1\1\1\11\1\1\2\11\17\1\1\11\4\1\1\11"+
    "\21\1\1\11\1\1\1\11\1\1\2\11\6\1\1\11"+
    "\13\1\7\0\11\1\42\0\1\1\3\0\1\11\2\1"+
    "\1\0\1\1\34\0\11\1\43\0\1\11\2\1\6\0"+
    "\1\11\12\0\1\11\4\0\1\11\6\0\11\1\15\0"+
    "\1\11\5\0\1\1\40\0\1\11\5\0\1\1\1\0"+
    "\10\1\1\11\66\0\6\1\10\0\1\11\43\0\1\11"+
    "\1\0\4\1\37\0\1\11\1\0\3\1\17\0\2\1"+
    "\13\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[605];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2304) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 32: 
          { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
          }
        case 56: break;
        case 4: 
          { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
          }
        case 57: break;
        case 45: 
          { return CndTypes.COMMENT;
          }
        case 58: break;
        case 27: 
          { return CndTypes.PROPERTY_MASK;
          }
        case 59: break;
        case 46: 
          { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ANGLE_BRACKET;
          }
        case 60: break;
        case 2: 
          { yybegin(YYINITIAL); return CndTypes.CRLF;
          }
        case 61: break;
        case 39: 
          { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
          }
        case 62: break;
        case 31: 
          { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 63: break;
        case 9: 
          { return CndTypes.EQUAL;
          }
        case 64: break;
        case 23: 
          { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
          }
        case 65: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 66: break;
        case 36: 
          { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
          }
        case 67: break;
        case 47: 
          { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
          }
        case 68: break;
        case 21: 
          { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
          }
        case 69: break;
        case 24: 
          { return CndTypes.PROPERTY_TYPE;
          }
        case 70: break;
        case 20: 
          { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
          }
        case 71: break;
        case 18: 
          { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
          }
        case 72: break;
        case 28: 
          { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
          }
        case 73: break;
        case 41: 
          { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
          }
        case 74: break;
        case 37: 
          { return CndTypes.NODE_NAME;
          }
        case 75: break;
        case 22: 
          { return CndTypes.PROPERTY_NAME;
          }
        case 76: break;
        case 5: 
          { yybegin(PROPERTY); return CndTypes.MINUS;
          }
        case 77: break;
        case 11: 
          { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
          }
        case 78: break;
        case 42: 
          { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
          }
        case 79: break;
        case 10: 
          { return CndTypes.SINGLE_QUOTE;
          }
        case 80: break;
        case 53: 
          { yybegin(EXTENDS); return CndTypes.EXTENDS;
          }
        case 81: break;
        case 43: 
          { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
          }
        case 82: break;
        case 54: 
          { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
          }
        case 83: break;
        case 29: 
          { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
          }
        case 84: break;
        case 48: 
          { return CndTypes.NODE_ATTRIBUTE;
          }
        case 85: break;
        case 52: 
          { return CndTypes.ITEMTYPE_TYPE;
          }
        case 86: break;
        case 30: 
          { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
          }
        case 87: break;
        case 16: 
          { return CndTypes.RIGHT_BRACKET;
          }
        case 88: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 89: break;
        case 35: 
          { return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 90: break;
        case 33: 
          { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ANGLE_BRACKET;
          }
        case 91: break;
        case 44: 
          { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
          }
        case 92: break;
        case 14: 
          { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ANGLE_BRACKET;
          }
        case 93: break;
        case 15: 
          { return CndTypes.COLON;
          }
        case 94: break;
        case 26: 
          { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
          }
        case 95: break;
        case 25: 
          { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
          }
        case 96: break;
        case 7: 
          { yybegin(NODE); return CndTypes.PLUS;
          }
        case 97: break;
        case 8: 
          { return CndTypes.NAMESPACE_NAME;
          }
        case 98: break;
        case 50: 
          { yybegin(OPTIONS); return CndTypes.OPTION;
          }
        case 99: break;
        case 6: 
          { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
          }
        case 100: break;
        case 51: 
          { return CndTypes.OPTION;
          }
        case 101: break;
        case 12: 
          { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
          }
        case 102: break;
        case 49: 
          { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
          }
        case 103: break;
        case 19: 
          { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
          }
        case 104: break;
        case 38: 
          { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
          }
        case 105: break;
        case 40: 
          { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
          }
        case 106: break;
        case 55: 
          { return CndTypes.NAMESPACE_URI;
          }
        case 107: break;
        case 34: 
          { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 108: break;
        case 17: 
          { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
          }
        case 109: break;
        case 13: 
          { return CndTypes.NODE_TYPE_NAME;
          }
        case 110: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
