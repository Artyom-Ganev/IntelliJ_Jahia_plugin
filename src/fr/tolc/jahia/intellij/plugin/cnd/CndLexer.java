/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int SUPER_TYPES = 10;
  public static final int OPTIONS = 12;
  public static final int EXTENDS = 14;
  public static final int EXTEND_NAMESPACE = 16;
  public static final int EXTEND = 18;
  public static final int ITEMTYPE = 20;
  public static final int PROPERTY = 22;
  public static final int PROPERTY_TYPE = 24;
  public static final int PROPERTY_MASK_OPTION_NAME = 26;
  public static final int PROPERTY_MASK = 28;
  public static final int PROPERTY_MASK_OPTION = 30;
  public static final int PROPERTY_DEFAULT = 32;
  public static final int PROPERTY_DEFAULT_VALUE = 34;
  public static final int PROPERTY_ATTRIBUTES = 36;
  public static final int PROPERTY_CONSTRAINT = 38;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 40;
  public static final int NODE = 42;
  public static final int NODE_NAMESPACE = 44;
  public static final int NODE_NODETYPE = 46;
  public static final int NODE_DEFAULT = 48;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 50;
  public static final int NODE_DEFAULT_VALUE = 52;
  public static final int NODE_ATTRIBUTES = 54;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\15\1\33\1\34\2\21\1\35\11\21"+
    "\1\36\21\21\1\37\1\40\23\21\1\27\1\41\3\21\1\22\1\42\1\41\4\21\1\43\1\44\4"+
    "\0\1\45\1\46\1\27\3\21\2\47\1\27\1\50\1\51\1\0\1\52\5\21\1\53\3\0\1\54\1\55"+
    "\13\21\1\56\1\45\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\21\3\0\1\64\12\21\1\65"+
    "\1\0\1\66\1\27\1\0\1\67\3\21\1\53\1\70\1\20\2\21\1\65\1\71\1\72\1\73\2\27"+
    "\3\21\1\74\10\27\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\21\1\101\2\0\1\102\1"+
    "\21\1\103\1\0\2\41\1\104\1\105\1\106\2\21\1\75\1\107\1\110\1\111\1\112\1\62"+
    "\1\113\1\103\1\0\1\114\1\51\1\104\1\115\1\106\2\21\1\75\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\21\1\75\1\126\1"+
    "\110\1\45\1\127\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\21\1\75"+
    "\1\126\1\110\1\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133"+
    "\1\134\1\135\1\132\1\21\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1"+
    "\104\1\32\1\75\2\21\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27"+
    "\1\146\1\32\1\75\2\21\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1"+
    "\147\1\27\1\146\1\32\1\75\4\21\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27"+
    "\1\40\1\146\1\21\1\22\1\40\2\21\1\35\1\152\1\22\1\153\1\154\1\0\2\27\1\155"+
    "\1\27\1\41\5\21\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1"+
    "\41\1\165\1\166\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1"+
    "\0\1\161\1\173\1\174\1\21\1\41\3\21\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0"+
    "\1\50\1\176\7\27\5\21\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203"+
    "\1\21\1\204\1\205\1\0\1\171\4\21\1\36\1\17\5\21\1\206\51\21\1\133\1\22\1\133"+
    "\5\21\1\133\4\21\1\133\1\22\1\133\1\21\1\22\7\21\1\133\10\21\1\207\4\27\2"+
    "\21\2\27\12\21\1\30\1\27\1\41\114\21\1\105\2\21\1\41\2\21\1\47\11\21\1\132"+
    "\1\130\1\27\1\21\1\32\1\210\1\27\2\21\1\210\1\27\2\21\1\211\1\27\1\21\1\32"+
    "\1\212\1\27\6\21\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\21"+
    "\1\27\5\21\1\217\10\21\1\220\1\27\3\21\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\21"+
    "\1\220\1\30\1\27\5\21\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\21\1\160\1\2\6"+
    "\21\1\175\1\77\3\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\21\1\213\1"+
    "\0\1\221\1\114\1\0\1\161\1\27\1\222\1\2\1\27\1\223\3\21\1\102\1\202\1\0\1"+
    "\67\4\21\1\65\1\0\1\2\1\27\4\21\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\21\1\220"+
    "\12\27\1\225\2\0\1\226\1\227\1\27\30\21\4\0\1\77\2\27\1\76\42\21\2\220\4\21"+
    "\2\220\1\21\1\230\3\21\1\220\6\21\1\32\1\170\1\231\1\30\1\232\1\114\1\21\1"+
    "\30\1\231\1\30\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50"+
    "\1\235\1\42\1\43\2\27\1\21\1\30\3\21\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1"+
    "\27\1\240\1\40\1\152\1\241\1\31\1\242\1\21\1\243\1\244\1\245\2\27\5\21\1\130"+
    "\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\246\1\247\1\27\4\21\1\36\1\17\7\21"+
    "\1\43\1\27\1\62\2\21\1\22\1\27\10\22\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1"+
    "\204\1\241\1\30\1\41\11\21\1\22\1\250\1\41\12\21\1\206\1\244\4\21\1\220\1"+
    "\41\12\21\1\22\2\27\3\21\1\47\6\27\170\21\1\220\11\27\71\21\1\30\6\27\21\21"+
    "\1\30\10\27\5\21\1\220\41\21\1\30\2\21\1\0\1\247\2\27\5\21\1\160\1\76\1\251"+
    "\3\21\1\62\12\21\1\161\3\27\1\43\1\21\1\40\14\21\1\252\1\114\1\27\1\21\1\47"+
    "\11\27\1\21\1\253\1\254\2\21\1\53\2\27\1\130\6\21\1\114\1\27\1\67\5\21\1\213"+
    "\1\0\1\50\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\21\1\65\1\171\2\21\1\160"+
    "\1\0\1\2\1\27\3\21\1\30\1\100\5\21\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\21"+
    "\1\102\1\77\1\27\1\254\1\255\1\0\1\161\2\21\1\22\1\256\6\21\1\201\1\257\1"+
    "\217\2\27\1\260\1\21\1\53\1\261\1\27\3\262\1\27\2\22\22\27\4\21\1\53\1\263"+
    "\1\0\1\161\64\21\1\114\1\27\2\21\1\22\1\264\5\21\1\114\40\27\55\21\1\220\15"+
    "\21\1\26\4\27\1\22\1\27\1\264\1\265\1\21\1\75\1\22\1\170\1\266\15\21\1\26"+
    "\3\27\1\264\54\21\1\220\2\27\10\21\1\40\6\21\5\27\1\21\1\30\2\0\2\27\1\77"+
    "\1\27\1\135\2\27\1\244\3\27\1\42\1\32\20\21\1\267\1\234\1\27\1\0\1\161\1\41"+
    "\2\21\1\115\1\41\2\21\1\47\1\270\12\21\1\22\3\40\1\271\1\272\2\27\1\273\1"+
    "\21\1\142\2\21\1\22\2\21\1\274\1\21\1\220\1\21\1\220\4\27\17\21\1\47\10\27"+
    "\6\21\1\30\20\27\1\275\20\27\3\21\1\30\6\21\1\130\5\27\3\21\1\22\2\27\3\21"+
    "\1\47\6\27\3\21\1\220\4\21\1\114\1\21\1\241\5\27\23\21\1\220\1\0\1\161\52"+
    "\27\1\220\1\75\4\21\1\36\1\276\2\21\1\220\25\27\2\21\1\220\1\27\3\21\1\26"+
    "\10\27\7\21\1\270\10\27\1\277\1\76\1\142\1\41\2\21\1\114\1\120\4\27\3\21\1"+
    "\30\20\27\6\21\1\220\1\27\2\21\1\220\1\27\2\21\1\47\21\27\11\21\1\130\66\27"+
    "\1\223\6\21\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\21\1\0\1\300\2\27\3\21\1"+
    "\130\1\0\1\161\1\223\3\21\1\160\1\0\1\144\1\0\10\27\1\223\5\21\1\53\1\0\1"+
    "\301\1\27\1\0\1\161\24\27\5\21\1\53\1\0\1\27\1\0\1\161\46\27\55\21\1\22\22"+
    "\27\14\21\1\47\63\27\5\21\1\22\72\27\7\21\1\130\130\27\10\21\1\30\1\27\1\102"+
    "\4\0\1\77\1\27\1\62\1\223\1\21\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2"+
    "\3\27\1\305\22\27\1\306\67\27\12\21\1\32\10\21\1\32\1\307\1\310\1\21\1\311"+
    "\1\142\7\21\1\36\1\312\2\32\3\21\1\313\1\170\1\40\1\75\51\21\1\220\3\21\1"+
    "\75\2\21\1\206\3\21\1\206\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\75"+
    "\3\21\1\75\2\21\1\206\1\314\6\0\1\142\3\21\1\162\1\41\1\206\1\315\1\240\1"+
    "\316\1\162\1\230\1\162\2\206\1\123\1\21\1\35\1\21\1\114\1\317\1\35\1\21\1"+
    "\114\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\220\74\27\1\122\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\64\1\3\1\2\6\7\4\0\1\62\3\0\1\6\2\0\1\37\1\56\1\57\1\5\1\63"+
    "\1\52\1\55\1\42\1\4\12\44\1\41\1\0\1\35\1\36\1\47\2\0\1\14\1\15\1\21\1\23"+
    "\1\24\1\53\1\34\1\40\1\45\1\43\1\61\1\25\1\10\1\13\1\22\1\31\1\26\1\20\1\46"+
    "\1\17\1\27\1\32\1\54\1\12\1\30\1\33\1\50\1\0\1\51\1\0\1\43\1\12\1\30\1\33"+
    "\4\0\6\7\1\65\2\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\2\11"+
    "\15\6\1\16\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1"+
    "\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15"+
    "\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3"+
    "\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2"+
    "\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2"+
    "\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6"+
    "\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1"+
    "\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6"+
    "\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7"+
    "\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6"+
    "\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0"+
    "\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2"+
    "\7\5\0\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6"+
    "\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7"+
    "\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2"+
    "\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0"+
    "\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3"+
    "\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2"+
    "\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1"+
    "\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3"+
    "\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\64\5\7\5"+
    "\0\1\6\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\1\60\3"+
    "\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0"+
    "\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6"+
    "\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1"+
    "\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0"+
    "\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2"+
    "\0\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4"+
    "\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\34\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\5\15\1\16\1\17\1\20\5\21\1\22\4\1\1\23"+
    "\1\24\1\25\6\1\2\26\1\27\1\30\1\31\1\32"+
    "\16\1\1\33\1\34\3\35\1\1\1\36\1\1\2\2"+
    "\1\3\1\1\1\37\1\40\1\0\4\41\1\1\1\3"+
    "\1\1\1\37\1\0\1\42\1\1\2\43\1\44\1\45"+
    "\1\46\1\47\7\1\1\50\1\51\1\52\7\1\1\53"+
    "\7\0\1\10\4\15\4\21\43\0\1\35\4\0\1\54"+
    "\1\3\1\53\1\41\2\0\1\3\1\53\34\0\1\10"+
    "\4\15\4\21\44\0\1\35\2\55\1\0\1\55\1\3"+
    "\2\55\1\53\1\41\2\56\1\0\1\56\1\3\2\56"+
    "\1\53\1\42\6\0\1\57\12\0\1\60\4\0\1\53"+
    "\6\0\1\10\4\15\4\21\15\0\1\61\5\0\1\61"+
    "\16\0\2\53\2\0\2\53\24\0\1\62\5\0\1\10"+
    "\1\0\1\62\3\15\1\62\3\21\1\63\36\0\6\55"+
    "\6\56\27\0\3\15\3\21\10\0\1\64\43\0\1\65"+
    "\1\0\2\15\2\21\37\0\1\66\1\0\1\67\1\15"+
    "\1\21\17\0\1\61\1\42\13\0\1\61\54\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u05e8\0\u061e\0\u0654"+
    "\0\u068a\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u05e8"+
    "\0\u05e8\0\u05e8\0\u05e8\0\u0804\0\u083a\0\u05e8\0\u05e8\0\u0870"+
    "\0\u05e8\0\u08a6\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u05e8"+
    "\0\u05e8\0\u05e8\0\u09ea\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u05e8"+
    "\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a\0\u05e8\0\u0bd0\0\u05e8\0\u0c06"+
    "\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u05e8\0\u0d4a\0\u05e8"+
    "\0\u0d80\0\u05e8\0\u05e8\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e"+
    "\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u0fd2\0\u1008\0\u103e"+
    "\0\u1074\0\u10aa\0\u05e8\0\u10e0\0\u1116\0\u114c\0\u1182\0\u05e8"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u11b8\0\u05e8\0\u11b8"+
    "\0\u12c6\0\u12fc\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u139e"+
    "\0\u139e\0\u1440\0\u1476\0\u05e8\0\u14ac\0\u05e8\0\u14e2\0\u05e8"+
    "\0\u05e8\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u05e8\0\u1692\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0\0\u17d6"+
    "\0\u180c\0\u1842\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\u1986"+
    "\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\u1aca\0\u1b00\0\u1b36"+
    "\0\u1b6c\0\u1ba2\0\u1bd8\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6"+
    "\0\u1d1c\0\u1d52\0\u1d88\0\u1dbe\0\u1df4\0\u1e2a\0\u1e60\0\u1e96"+
    "\0\u1ecc\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u222c\0\u2262\0\u2298\0\u22ce\0\u2304\0\u233a\0\u2370\0\u23a6"+
    "\0\u23dc\0\u11ee\0\u2412\0\u05e8\0\u2448\0\u247e\0\u24b4\0\u24ea"+
    "\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664\0\u269a"+
    "\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814\0\u284a"+
    "\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4\0\u29fa"+
    "\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74\0\u2baa"+
    "\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24\0\u2d5a"+
    "\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4\0\u2f0a"+
    "\0\u2f40\0\u2f76\0\u2fac\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba"+
    "\0\u30f0\0\u3126\0\u315c\0\u3192\0\u31c8\0\u31fe\0\u3234\0\u326a"+
    "\0\u32a0\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a"+
    "\0\u3450\0\u3486\0\u34bc\0\u34f2\0\u05e8\0\u23dc\0\u3528\0\u355e"+
    "\0\u2448\0\u3594\0\u247e\0\u35ca\0\u3600\0\u24ea\0\u2520\0\u3636"+
    "\0\u366c\0\u2556\0\u36a2\0\u258c\0\u36d8\0\u370e\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u05e8\0\u38be\0\u38f4"+
    "\0\u392a\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4"+
    "\0\u05e8\0\u3ada\0\u3b10\0\u3b46\0\u3b7c\0\u05e8\0\u3bb2\0\u3be8"+
    "\0\u3c1e\0\u3c54\0\u3c8a\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98"+
    "\0\u3dce\0\u3e04\0\u3e3a\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48"+
    "\0\u3f7e\0\u3fb4\0\u3fea\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8"+
    "\0\u412e\0\u4164\0\u05e8\0\u419a\0\u41d0\0\u4206\0\u423c\0\u4272"+
    "\0\u42a8\0\u42de\0\u4314\0\u434a\0\u4380\0\u43b6\0\u43ec\0\u4422"+
    "\0\u4458\0\u448e\0\u44c4\0\u44fa\0\u4530\0\u4566\0\u459c\0\u45d2"+
    "\0\u4608\0\u463e\0\u4674\0\u46aa\0\u46e0\0\u3744\0\u4716\0\u474c"+
    "\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a\0\u4890\0\u48c6\0\u48fc"+
    "\0\u4932\0\u4968\0\u499e\0\u49d4\0\u4a0a\0\u4a40\0\u4a76\0\u4aac"+
    "\0\u4ae2\0\u05e8\0\u4b18\0\u4b4e\0\u4b84\0\u4bba\0\u4bf0\0\u4c26"+
    "\0\u4c5c\0\u08dc\0\u4c92\0\u4cc8\0\u4cfe\0\u09ea\0\u4d34\0\u4d6a"+
    "\0\u4da0\0\u05e8\0\u4dd6\0\u4e0c\0\u4e42\0\u4e78\0\u4eae\0\u4ee4"+
    "\0\u4f1a\0\u4f50\0\u4f86\0\u4fbc\0\u4ff2\0\u5028\0\u505e\0\u5094"+
    "\0\u50ca\0\u5100\0\u5136\0\u516c\0\u51a2\0\u51d8\0\u520e\0\u5244"+
    "\0\u527a\0\u52b0\0\u52e6\0\u531c\0\u5352\0\u5388\0\u53be\0\u53f4"+
    "\0\u542a\0\u4566\0\u459c\0\u5460\0\u45d2\0\u4608\0\u5496\0\u463e"+
    "\0\u4674\0\u54cc\0\u46aa\0\u46e0\0\u5502\0\u5538\0\u556e\0\u55a4"+
    "\0\u55da\0\u5610\0\u5646\0\u567c\0\u56b2\0\u56e8\0\u571e\0\u5754"+
    "\0\u578a\0\u57c0\0\u57f6\0\u582c\0\u5862\0\u5898\0\u58ce\0\u5904"+
    "\0\u593a\0\u5970\0\u59a6\0\u59dc\0\u5a12\0\u5a48\0\u5a7e\0\u5ab4"+
    "\0\u5aea\0\u5b20\0\u5b56\0\u5b8c\0\u5bc2\0\u5bf8\0\u5c2e\0\u5c64"+
    "\0\u5c9a\0\u05e8\0\u5cd0\0\u5d06\0\u5d3c\0\u5d72\0\u5da8\0\u5dde"+
    "\0\u5e14\0\u5e4a\0\u5e80\0\u5eb6\0\u5eec\0\u5f22\0\u5f58\0\u5f8e"+
    "\0\u5fc4\0\u5ffa\0\u6030\0\u6066\0\u609c\0\u60d2\0\u6108\0\u613e"+
    "\0\u6174\0\u61aa\0\u61e0\0\u6216\0\u624c\0\u6282\0\u62b8\0\u62ee"+
    "\0\u6324\0\u635a\0\u6390\0\u63c6\0\u63fc\0\u05e8\0\u6432\0\u6468"+
    "\0\u649e\0\u64d4\0\u650a\0\u6540\0\u6576\0\u65ac\0\u65e2\0\u6618"+
    "\0\u664e\0\u6684\0\u0dec\0\u66ba\0\u66f0\0\u6726\0\u675c\0\u6792"+
    "\0\u67c8\0\u67fe\0\u6834\0\u686a\0\u68a0\0\u68d6\0\u690c\0\u6942"+
    "\0\u6978\0\u69ae\0\u69e4\0\u6a1a\0\u6a50\0\u6a86\0\u6abc\0\u6af2"+
    "\0\u6b28\0\u6b5e\0\u05e8\0\u6b94\0\u6432\0\u6bca\0\u6c00\0\u6c36"+
    "\0\u6c6c\0\u6ca2\0\u6cd8\0\u6d0e\0\u6d44\0\u6d7a\0\u6db0\0\u6de6"+
    "\0\u6e1c\0\u6e52\0\u6e88\0\u6ebe\0\u6ef4\0\u6f2a\0\u67c8\0\u6f60"+
    "\0\u6f96\0\u6fcc\0\u7002\0\u7038\0\u706e\0\u70a4\0\u70da\0\u7110"+
    "\0\u7146\0\u717c\0\u71b2\0\u71e8\0\u721e\0\u7254\0\u728a\0\u72c0"+
    "\0\u6f60\0\u72f6\0\u732c\0\u7362\0\u7398\0\u73ce\0\u7404\0\u743a"+
    "\0\u7470\0\u74a6\0\u74dc\0\u7512\0\u7548\0\u757e\0\u75b4\0\u75ea"+
    "\0\u7620\0\u7656\0\u768c\0\u76c2\0\u76f8\0\u772e\0\u7764\0\u779a"+
    "\0\u77d0\0\u7806\0\u783c\0\u7872\0\u78a8\0\u78de\0\u7914\0\u794a"+
    "\0\u7980\0\u79b6\0\u79ec\0\u7a22\0\u7a58\0\u7a8e\0\u7ac4\0\u7afa";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\35\1\36\1\37\1\40\1\41\3\35\1\42\1\43"+
    "\1\35\1\44\1\45\5\35\1\46\1\35\1\47\10\35"+
    "\1\50\7\35\1\43\2\35\1\51\4\35\1\52\4\35"+
    "\1\40\1\53\2\0\1\35\1\36\1\37\1\40\1\54"+
    "\1\35\1\55\1\35\25\55\1\35\1\56\1\57\1\60"+
    "\2\35\1\55\1\35\2\55\1\61\3\35\2\55\3\35"+
    "\2\55\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\1\35\1\62\1\35\25\62\3\35\1\62\2\35"+
    "\1\62\1\35\2\62\4\35\2\62\3\35\2\62\1\40"+
    "\1\35\2\0\1\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\63\1\35\1\64\2\63\1\65\1\66\5\63\1\67"+
    "\12\63\3\35\1\63\1\70\1\35\1\63\1\35\2\63"+
    "\1\71\1\35\1\72\1\35\2\63\3\35\2\63\1\40"+
    "\1\35\2\0\1\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\73\1\35\1\74\2\73\1\75\1\76\5\73\1\77"+
    "\12\73\3\35\1\73\2\35\1\73\1\35\2\73\4\35"+
    "\2\73\3\35\2\73\1\40\1\35\2\0\1\35\1\36"+
    "\1\37\1\40\1\54\1\35\1\63\1\35\1\64\2\63"+
    "\1\65\1\66\5\63\1\67\12\63\3\35\1\63\1\70"+
    "\1\35\1\63\1\35\2\63\3\35\1\100\2\63\3\35"+
    "\2\63\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\3\35\1\101\2\35\1\102\1\103\5\35\1\104"+
    "\37\35\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\31\35\1\105\23\35\1\40\1\35\2\0\1\35"+
    "\1\36\1\37\1\40\1\54\1\35\1\106\1\35\25\106"+
    "\3\35\1\106\2\35\1\106\1\35\2\106\4\35\2\106"+
    "\3\35\2\106\1\40\1\35\2\0\1\35\1\36\1\37"+
    "\1\40\1\54\1\35\1\63\1\35\25\63\3\35\1\63"+
    "\1\70\1\35\1\63\1\35\2\63\3\35\1\107\2\63"+
    "\3\35\2\63\1\40\1\35\2\0\1\35\1\36\1\37"+
    "\1\40\1\54\3\35\1\110\10\35\1\111\1\112\1\113"+
    "\1\35\1\114\3\35\1\115\4\35\1\56\23\35\1\40"+
    "\1\35\2\0\1\35\1\36\1\37\1\40\1\54\1\116"+
    "\1\117\1\35\25\117\3\35\1\117\2\35\1\117\1\35"+
    "\2\117\4\35\2\117\1\35\1\120\1\35\2\117\1\40"+
    "\1\35\2\0\1\35\1\36\1\37\1\40\1\54\1\35"+
    "\1\121\1\35\25\121\3\35\1\121\2\35\1\121\1\35"+
    "\2\121\3\35\1\122\2\121\2\35\1\123\2\121\1\40"+
    "\1\35\2\0\1\35\1\36\1\37\1\40\1\54\3\35"+
    "\1\124\1\125\1\35\1\126\1\127\1\35\1\130\1\131"+
    "\1\132\1\133\1\35\1\134\1\35\1\135\1\35\1\136"+
    "\1\35\1\137\13\35\1\125\1\130\4\35\1\140\1\141"+
    "\5\35\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\1\35\1\142\1\35\25\142\3\35\1\142\2\35"+
    "\1\142\1\35\2\142\1\35\1\143\2\35\2\142\2\35"+
    "\1\123\2\142\1\40\1\35\2\0\1\144\1\36\1\37"+
    "\1\145\1\146\31\144\1\56\1\147\11\144\1\72\1\150"+
    "\4\144\1\123\2\144\1\40\3\144\1\151\1\152\1\153"+
    "\1\154\1\155\30\151\1\156\1\157\23\151\1\40\1\151"+
    "\2\160\1\161\1\36\1\37\1\162\1\163\32\161\1\164"+
    "\22\161\1\40\3\161\1\165\1\152\1\153\1\166\1\167"+
    "\30\165\1\170\1\35\23\165\1\40\1\165\2\171\1\172"+
    "\1\36\1\37\63\172\1\35\1\36\1\37\1\40\1\54"+
    "\32\35\1\173\22\35\1\40\1\35\2\0\1\35\1\36"+
    "\1\37\1\40\1\54\1\174\1\175\1\35\25\175\3\35"+
    "\1\175\2\35\1\175\1\35\2\175\4\35\2\175\1\35"+
    "\1\176\1\35\2\175\1\40\1\35\2\0\1\35\1\36"+
    "\1\37\1\40\1\54\1\35\1\177\1\35\25\177\3\35"+
    "\1\177\2\35\1\177\1\35\2\177\4\35\2\177\3\35"+
    "\2\177\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\1\35\1\63\1\35\25\63\3\35\1\63\1\70"+
    "\1\35\1\63\1\35\2\63\3\35\1\200\2\63\2\35"+
    "\1\201\2\63\1\40\1\35\2\0\1\35\1\36\1\37"+
    "\1\40\1\54\3\35\1\202\1\203\2\35\1\204\1\35"+
    "\1\205\2\35\1\206\7\35\1\207\1\210\3\35\1\211"+
    "\6\35\1\203\1\205\13\35\1\40\1\35\2\0\1\35"+
    "\1\36\1\37\1\40\1\54\1\35\1\212\1\35\25\212"+
    "\3\35\1\212\2\35\1\212\1\35\2\212\4\35\2\212"+
    "\3\35\2\212\1\40\1\35\2\0\1\35\1\36\1\37"+
    "\1\40\1\54\1\35\1\213\1\35\25\213\3\35\1\213"+
    "\1\70\1\35\1\213\1\35\2\213\4\35\2\213\3\35"+
    "\2\213\1\40\1\35\2\0\1\35\1\36\1\37\1\40"+
    "\1\54\3\35\1\214\1\215\2\35\1\216\1\35\1\217"+
    "\2\35\1\220\7\35\1\221\1\222\12\35\1\215\1\217"+
    "\13\35\1\40\1\35\71\0\1\36\67\0\1\40\56\0"+
    "\1\40\7\0\1\223\1\224\71\0\1\225\33\0\1\225"+
    "\37\0\1\226\70\0\1\227\60\0\1\230\70\0\1\231"+
    "\57\0\1\232\57\0\1\223\67\0\27\55\3\0\1\55"+
    "\2\0\4\55\4\0\2\55\3\0\2\55\3\0\1\55"+
    "\6\0\11\55\1\233\15\55\3\0\1\55\2\0\4\55"+
    "\4\0\2\55\3\0\2\55\3\0\1\55\6\0\27\62"+
    "\3\0\1\62\2\0\4\62\4\0\2\62\3\0\2\62"+
    "\3\0\1\62\6\0\27\63\3\0\1\63\2\0\4\63"+
    "\4\0\2\63\3\0\2\63\3\0\1\63\6\0\3\63"+
    "\1\234\23\63\3\0\1\63\2\0\2\63\1\234\1\63"+
    "\4\0\2\63\3\0\2\63\3\0\1\63\6\0\14\63"+
    "\1\235\12\63\3\0\1\63\2\0\4\63\4\0\2\63"+
    "\3\0\2\63\3\0\1\63\6\0\7\63\1\236\17\63"+
    "\3\0\1\63\2\0\4\63\4\0\2\63\3\0\2\63"+
    "\3\0\1\63\6\0\12\63\1\237\14\63\3\0\1\63"+
    "\2\0\4\63\4\0\2\63\3\0\2\63\3\0\1\63"+
    "\6\0\27\73\3\0\1\73\2\0\4\73\4\0\2\73"+
    "\3\0\2\73\3\0\1\73\6\0\3\73\1\240\23\73"+
    "\3\0\1\73\2\0\2\73\1\240\1\73\4\0\2\73"+
    "\3\0\2\73\3\0\1\73\6\0\14\73\1\241\12\73"+
    "\3\0\1\73\2\0\4\73\4\0\2\73\3\0\2\73"+
    "\3\0\1\73\6\0\7\73\1\242\17\73\3\0\1\73"+
    "\2\0\4\73\4\0\2\73\3\0\2\73\3\0\1\73"+
    "\6\0\12\73\1\243\14\73\3\0\1\73\2\0\4\73"+
    "\4\0\2\73\3\0\2\73\3\0\1\73\11\0\1\244"+
    "\33\0\1\244\42\0\1\245\60\0\1\246\70\0\1\247"+
    "\53\0\27\106\3\0\1\106\2\0\4\106\4\0\2\106"+
    "\3\0\2\106\3\0\1\106\24\0\1\250\63\0\1\251"+
    "\2\0\1\252\71\0\1\253\60\0\1\254\52\0\1\255"+
    "\2\0\1\256\30\0\1\255\40\0\1\257\3\0\1\260"+
    "\47\0\27\117\3\0\7\117\4\0\2\117\3\0\2\117"+
    "\3\0\1\117\6\0\1\121\1\0\25\121\3\0\1\121"+
    "\2\0\1\121\1\0\2\121\4\0\2\121\3\0\2\121"+
    "\15\0\1\261\10\0\1\262\1\0\1\263\20\0\1\261"+
    "\30\0\1\264\77\0\1\265\72\0\1\266\57\0\1\267"+
    "\1\270\1\0\1\271\2\0\1\272\62\0\1\273\3\0"+
    "\1\274\57\0\1\275\1\0\1\276\63\0\1\277\67\0"+
    "\1\300\52\0\1\301\33\0\1\301\36\0\1\302\27\0"+
    "\1\302\43\0\1\303\63\0\1\304\2\0\1\305\62\0"+
    "\1\306\51\0\1\142\1\0\25\142\3\0\1\142\2\0"+
    "\1\142\1\0\2\142\4\0\2\142\3\0\2\142\4\0"+
    "\1\144\2\0\33\144\2\0\11\144\2\0\4\144\1\0"+
    "\2\144\1\0\4\144\2\0\1\145\32\144\2\0\11\144"+
    "\2\0\4\144\1\0\2\144\1\40\4\144\2\0\1\144"+
    "\1\307\31\144\2\0\11\144\2\0\4\144\1\0\2\144"+
    "\1\0\3\144\1\310\2\0\34\310\1\0\11\310\1\0"+
    "\14\310\1\311\2\0\57\311\1\0\3\311\1\0\2\312"+
    "\1\313\31\0\1\314\24\0\1\313\4\0\1\152\1\312"+
    "\1\313\31\0\1\314\24\0\1\313\3\0\1\311\2\0"+
    "\1\315\56\311\1\40\4\311\2\0\1\311\1\316\55\311"+
    "\1\0\3\311\1\161\2\0\57\161\1\0\4\161\2\0"+
    "\1\162\56\161\1\40\4\161\2\0\1\161\1\317\55\161"+
    "\1\0\3\161\1\164\2\0\57\164\1\320\3\164\1\321"+
    "\2\0\57\321\1\0\4\321\2\0\1\322\56\321\1\40"+
    "\4\321\2\0\1\321\1\323\55\321\1\0\3\321\1\172"+
    "\2\0\63\172\1\324\2\0\63\324\6\0\27\175\3\0"+
    "\2\175\1\0\4\175\4\0\2\175\3\0\2\175\3\0"+
    "\1\175\6\0\27\177\3\0\1\177\2\0\4\177\4\0"+
    "\2\177\3\0\2\177\3\0\1\177\14\0\1\325\12\0"+
    "\1\326\51\0\1\327\20\0\1\330\46\0\1\331\11\0"+
    "\1\332\51\0\1\333\74\0\1\334\63\0\1\335\71\0"+
    "\1\336\47\0\27\212\3\0\1\212\2\0\4\212\4\0"+
    "\2\212\3\0\2\212\3\0\1\212\6\0\27\213\3\0"+
    "\1\213\2\0\4\213\4\0\2\213\3\0\2\213\3\0"+
    "\1\213\14\0\1\337\12\0\1\340\51\0\1\341\20\0"+
    "\1\342\46\0\1\343\11\0\1\344\51\0\1\345\74\0"+
    "\1\346\63\0\1\347\71\0\1\350\41\0\1\223\2\0"+
    "\63\223\5\224\1\351\60\224\12\0\1\352\77\0\1\353"+
    "\67\0\1\354\55\0\1\355\27\0\1\355\42\0\1\356"+
    "\61\0\1\357\54\0\11\55\1\360\15\55\3\0\1\55"+
    "\2\0\4\55\4\0\2\55\3\0\2\55\3\0\1\55"+
    "\6\0\4\63\1\361\22\63\3\0\1\63\2\0\4\63"+
    "\4\0\2\63\3\0\2\63\3\0\1\63\6\0\20\63"+
    "\1\362\6\63\3\0\1\63\2\0\4\63\4\0\2\63"+
    "\3\0\2\63\3\0\1\63\6\0\10\63\1\363\16\63"+
    "\3\0\1\63\2\0\3\63\1\363\4\0\2\63\3\0"+
    "\2\63\3\0\1\63\6\0\15\63\1\364\11\63\3\0"+
    "\1\63\2\0\4\63\4\0\2\63\3\0\2\63\3\0"+
    "\1\63\6\0\4\73\1\365\22\73\3\0\1\73\2\0"+
    "\4\73\4\0\2\73\3\0\2\73\3\0\1\73\6\0"+
    "\20\73\1\366\6\73\3\0\1\73\2\0\4\73\4\0"+
    "\2\73\3\0\2\73\3\0\1\73\6\0\10\73\1\367"+
    "\16\73\3\0\1\73\2\0\3\73\1\367\4\0\2\73"+
    "\3\0\2\73\3\0\1\73\6\0\15\73\1\370\11\73"+
    "\3\0\1\73\2\0\4\73\4\0\2\73\3\0\2\73"+
    "\3\0\1\73\12\0\1\371\101\0\1\372\55\0\1\373"+
    "\27\0\1\373\42\0\1\374\61\0\1\375\61\0\1\376"+
    "\66\0\1\377\70\0\1\u0100\121\0\1\u0101\30\0\1\u0102"+
    "\27\0\1\u0102\47\0\1\u0103\57\0\1\u0104\63\0\1\u0105"+
    "\55\0\1\u0106\100\0\1\u0107\55\0\1\u0108\66\0\1\u0109"+
    "\74\0\1\u010a\61\0\1\u010b\66\0\1\u010c\65\0\1\u010d"+
    "\76\0\1\u010e\51\0\1\u010f\60\0\1\u0110\106\0\1\u0106"+
    "\56\0\1\u0111\56\0\1\u0112\2\0\1\u0113\27\0\1\u0113"+
    "\27\0\1\u0114\16\0\1\u0115\67\0\1\u0116\47\0\1\u0117"+
    "\76\0\1\u0118\61\0\1\u0119\72\0\1\u011a\54\0\1\u011b"+
    "\71\0\1\u011c\45\0\1\307\2\0\33\307\2\223\11\307"+
    "\2\223\4\307\1\223\2\307\1\223\3\307\1\310\2\0"+
    "\34\310\1\u011d\11\310\1\0\14\310\1\u011e\2\0\33\u011e"+
    "\1\u011f\23\u011e\1\u0120\3\u011e\3\0\1\313\31\0\1\314"+
    "\24\0\1\313\3\0\1\u011e\2\0\1\u0121\32\u011e\1\u011f"+
    "\23\u011e\1\u0122\3\u011e\1\u0123\2\0\33\u0123\1\u0124\23\u0123"+
    "\1\u0125\3\u0123\1\317\2\0\57\317\1\223\3\317\1\320"+
    "\2\0\34\320\1\u0126\26\320\1\u0127\2\0\33\u0127\1\u0128"+
    "\23\u0127\1\u0129\4\u0127\2\0\1\u012a\32\u0127\1\u0128\23\u0127"+
    "\1\u012b\3\u0127\1\u012c\2\0\33\u012c\1\u012d\23\u012c\1\u012e"+
    "\3\u012c\1\324\2\0\34\324\1\u012f\26\324\13\0\1\u0130"+
    "\77\0\1\u0131\51\0\1\u0132\33\0\1\u0132\33\0\1\u0133"+
    "\74\0\1\u0134\62\0\1\u0135\64\0\1\u0136\27\0\1\u0136"+
    "\27\0\1\u0137\20\0\1\u0138\56\0\1\u0139\63\0\1\u013a"+
    "\60\0\1\u013b\77\0\1\u013c\51\0\1\u013d\33\0\1\u013d"+
    "\33\0\1\u013e\74\0\1\u013f\62\0\1\u0140\64\0\1\u0141"+
    "\27\0\1\u0141\27\0\1\u0142\20\0\1\u0143\56\0\1\u0144"+
    "\63\0\1\u0145\45\0\4\224\1\u0146\1\351\60\224\11\0"+
    "\1\u0147\33\0\1\u0147\30\0\1\u0148\104\0\1\u0149\55\0"+
    "\1\u014a\72\0\1\u014b\65\0\1\u014c\47\0\23\55\1\u014d"+
    "\3\55\3\0\1\55\2\0\4\55\4\0\2\55\3\0"+
    "\2\55\3\0\1\55\6\0\3\63\1\u014e\23\63\3\0"+
    "\1\63\2\0\2\63\1\u014e\1\63\4\0\2\63\3\0"+
    "\2\63\3\0\1\63\6\0\21\63\1\u014f\5\63\3\0"+
    "\1\63\2\0\4\63\4\0\2\63\3\0\2\63\3\0"+
    "\1\63\6\0\11\63\1\u0150\15\63\3\0\1\63\2\0"+
    "\4\63\4\0\2\63\3\0\2\63\3\0\1\63\6\0"+
    "\16\63\1\u0151\10\63\3\0\1\63\2\0\4\63\4\0"+
    "\2\63\3\0\2\63\3\0\1\63\6\0\3\73\1\u0152"+
    "\23\73\3\0\1\73\2\0\2\73\1\u0152\1\73\4\0"+
    "\2\73\3\0\2\73\3\0\1\73\6\0\21\73\1\u0153"+
    "\5\73\3\0\1\73\2\0\4\73\4\0\2\73\3\0"+
    "\2\73\3\0\1\73\6\0\11\73\1\u0154\15\73\3\0"+
    "\1\73\2\0\4\73\4\0\2\73\3\0\2\73\3\0"+
    "\1\73\6\0\16\73\1\u0155\10\73\3\0\1\73\2\0"+
    "\4\73\4\0\2\73\3\0\2\73\3\0\1\73\11\0"+
    "\1\u0156\33\0\1\u0156\47\0\1\u0157\55\0\1\u0158\72\0"+
    "\1\u0159\55\0\1\u015a\70\0\1\u015b\64\0\1\u015c\27\0"+
    "\1\u015c\30\0\1\u015d\33\0\1\u015d\34\0\1\u015e\70\0"+
    "\1\u015f\70\0\1\u0160\74\0\1\u0161\44\0\1\u0162\101\0"+
    "\1\u0163\70\0\1\u0164\65\0\1\u0165\72\0\1\u0106\55\0"+
    "\1\u0166\63\0\1\u0167\54\0\1\u0168\33\0\1\u0168\37\0"+
    "\1\u0169\62\0\1\u016a\64\0\1\u016b\103\0\1\u016c\53\0"+
    "\1\u0163\71\0\1\u016d\64\0\1\u016e\74\0\1\u016f\47\0"+
    "\1\u0170\76\0\1\u0171\121\0\2\u0172\24\0\1\u0165\55\0"+
    "\1\u0173\100\0\1\u0174\76\0\1\u0163\111\0\2\u0175\4\0"+
    "\1\u011e\2\0\1\u011f\32\u011e\1\u011f\23\u011e\1\u0176\3\u011e"+
    "\3\0\1\u0120\32\0\1\u0177\23\0\1\u0120\6\0\1\u0122"+
    "\32\0\1\u0177\23\0\1\u0122\3\0\1\u0123\2\0\1\u0124"+
    "\32\u0123\1\u0124\23\u0123\1\u0178\3\u0123\1\223\2\0\1\u0125"+
    "\32\223\1\u0179\23\223\1\u0125\3\223\1\u0127\2\0\1\u0128"+
    "\32\u0127\1\u0128\23\u0127\1\u017a\3\u0127\3\0\1\u0129\32\0"+
    "\1\u017b\23\0\1\u0129\6\0\1\u012b\32\0\1\u017b\23\0"+
    "\1\u012b\3\0\1\u012c\2\0\1\u012d\32\u012c\1\u012d\23\u012c"+
    "\1\u017c\3\u012c\1\223\2\0\1\u012e\32\223\1\u017d\23\223"+
    "\1\u012e\3\223\1\324\2\0\1\u017e\33\324\1\u012f\12\324"+
    "\1\u017f\7\324\1\u017e\3\324\23\0\1\u0180\61\0\1\u0181"+
    "\65\0\1\u0182\70\0\1\u0183\63\0\1\u0184\67\0\1\u0185"+
    "\74\0\1\u0186\64\0\1\u0136\54\0\1\u0187\64\0\1\u0188"+
    "\27\0\1\u0188\42\0\1\u0189\61\0\1\u018a\65\0\1\u018b"+
    "\70\0\1\u018c\63\0\1\u018d\67\0\1\u018e\74\0\1\u018f"+
    "\64\0\1\u0141\54\0\1\u0190\64\0\1\u0191\27\0\1\u0191"+
    "\32\0\1\u0192\71\0\1\u0193\72\0\1\u0194\61\0\1\u0195"+
    "\65\0\1\u0196\60\0\1\u0197\60\0\10\55\1\u0198\16\55"+
    "\3\0\1\55\1\u0199\1\0\3\55\1\u0198\4\0\2\55"+
    "\3\0\2\55\3\0\1\55\6\0\5\63\1\u019a\21\63"+
    "\3\0\1\63\2\0\4\63\4\0\2\63\3\0\2\63"+
    "\3\0\1\63\6\0\16\63\1\u019b\10\63\3\0\1\63"+
    "\2\0\4\63\4\0\2\63\3\0\2\63\3\0\1\63"+
    "\6\0\12\63\1\u019c\14\63\3\0\1\63\2\0\4\63"+
    "\4\0\2\63\3\0\2\63\3\0\1\63\6\0\12\63"+
    "\1\u019d\14\63\3\0\1\63\2\0\4\63\4\0\2\63"+
    "\3\0\2\63\3\0\1\63\6\0\5\73\1\u019e\21\73"+
    "\3\0\1\73\2\0\4\73\4\0\2\73\3\0\2\73"+
    "\3\0\1\73\6\0\16\73\1\u019f\10\73\3\0\1\73"+
    "\2\0\4\73\4\0\2\73\3\0\2\73\3\0\1\73"+
    "\6\0\12\73\1\u01a0\14\73\3\0\1\73\2\0\4\73"+
    "\4\0\2\73\3\0\2\73\3\0\1\73\6\0\12\73"+
    "\1\u01a1\14\73\3\0\1\73\2\0\4\73\4\0\2\73"+
    "\3\0\2\73\3\0\1\73\13\0\1\u01a2\76\0\1\u01a3"+
    "\61\0\1\u01a4\65\0\1\u01a5\70\0\1\u01a6\62\0\1\u01a7"+
    "\3\0\1\u01a8\57\0\1\u01a9\27\0\1\u01a9\41\0\1\u01aa"+
    "\72\0\1\u01ab\60\0\1\u01ac\72\0\1\u01ad\62\0\1\u01ae"+
    "\52\0\1\u01af\33\0\1\u01af\45\0\1\u01b0\56\0\1\u0163"+
    "\27\0\1\u0163\35\0\1\u0163\1\u01b1\26\0\1\u0163\35\0"+
    "\1\u01b2\2\0\1\u01b3\24\0\1\u01b2\50\0\1\u0111\50\0"+
    "\1\u01b4\71\0\1\u01b5\67\0\1\u01b6\70\0\1\u01b7\64\0"+
    "\1\u01b8\70\0\1\u01b9\60\0\1\u01ba\62\0\1\u01bb\61\0"+
    "\1\u01bc\76\0\1\u01bd\52\0\1\u01be\33\0\1\u01be\44\0"+
    "\1\u01bf\114\0\1\u01c0\12\0\1\u01c1\2\0\1\u01c2\32\u01c1"+
    "\1\u01c3\23\u01c1\1\u0176\4\u01c1\2\0\1\u01c3\56\u01c1\1\u0177"+
    "\3\u01c1\1\u01c4\2\0\1\u01c5\32\u01c4\1\u01c6\23\u01c4\1\u0178"+
    "\4\u01c4\2\0\1\u01c6\56\u01c4\1\u0179\3\u01c4\1\u01c7\2\0"+
    "\1\u01c8\32\u01c7\1\u01c9\23\u01c7\1\u017a\4\u01c7\2\0\1\u01c9"+
    "\56\u01c7\1\u017b\3\u01c7\1\u01ca\2\0\1\u01cb\32\u01ca\1\u01cc"+
    "\23\u01ca\1\u017c\4\u01ca\2\0\1\u01cc\56\u01ca\1\u017d\3\u01ca"+
    "\1\324\2\u01cd\1\u017f\33\324\1\u012f\22\324\1\u017f\3\324"+
    "\14\0\1\u01ce\62\0\1\u01cf\33\0\1\u01cf\31\0\1\u01d0"+
    "\33\0\1\u01d0\40\0\1\u01d1\64\0\1\u0136\67\0\1\u01d2"+
    "\73\0\1\u01d3\62\0\1\u01d4\52\0\1\u01d5\33\0\1\u01d5"+
    "\34\0\1\u01d6\62\0\1\u01d7\33\0\1\u01d7\31\0\1\u01d8"+
    "\33\0\1\u01d8\40\0\1\u01d9\64\0\1\u0141\67\0\1\u01da"+
    "\73\0\1\u01db\62\0\1\u01dc\52\0\1\u01dd\33\0\1\u01dd"+
    "\50\0\1\u01de\55\0\1\u01df\61\0\1\u01e0\65\0\1\u01e1"+
    "\74\0\1\u01e2\50\0\27\55\3\0\1\55\1\u0199\1\0"+
    "\4\55\4\0\2\55\3\0\2\55\3\0\1\55\4\0"+
    "\1\u01e3\67\0\12\63\1\u01e4\14\63\3\0\1\63\2\0"+
    "\4\63\4\0\2\63\3\0\2\63\3\0\1\63\6\0"+
    "\6\63\1\u01e5\20\63\3\0\1\63\2\0\4\63\4\0"+
    "\2\63\3\0\2\63\3\0\1\63\6\0\6\63\1\u01e6"+
    "\20\63\3\0\1\63\2\0\4\63\4\0\2\63\3\0"+
    "\2\63\3\0\1\63\6\0\12\73\1\u01e7\14\73\3\0"+
    "\1\73\2\0\4\73\4\0\2\73\3\0\2\73\3\0"+
    "\1\73\6\0\6\73\1\u01e8\20\73\3\0\1\73\2\0"+
    "\4\73\4\0\2\73\3\0\2\73\3\0\1\73\6\0"+
    "\6\73\1\u01e9\20\73\3\0\1\73\2\0\4\73\4\0"+
    "\2\73\3\0\2\73\3\0\1\73\20\0\1\u01ea\61\0"+
    "\1\u01eb\65\0\1\u01ec\65\0\1\u01ed\62\0\1\u01ee\33\0"+
    "\1\u01ee\33\0\1\u01ad\63\0\1\u01ef\33\0\1\u01ef\33\0"+
    "\1\u01f0\77\0\1\u01ad\60\0\1\u01f1\64\0\1\u01f2\66\0"+
    "\1\u01f3\63\0\1\u01f4\27\0\1\u01f4\43\0\1\u01f5\71\0"+
    "\1\u01f6\61\0\1\u01f7\63\0\1\u01f8\60\0\1\u01f9\64\0"+
    "\1\u01fa\74\0\1\u01fb\56\0\1\u01fc\71\0\1\u01fd\65\0"+
    "\1\u01fe\60\0\1\u01ff\72\0\1\u0200\70\0\1\u0201\62\0"+
    "\1\u0202\63\0\1\u0203\27\0\1\u0203\37\0\1\u0163\72\0"+
    "\1\u0204\40\0\1\u01c1\2\0\57\u01c1\1\0\3\u01c1\1\u01c4"+
    "\2\0\57\u01c4\1\223\3\u01c4\1\u01c7\2\0\57\u01c7\1\0"+
    "\3\u01c7\1\u01ca\2\0\57\u01ca\1\223\3\u01ca\1\0\2\u01cd"+
    "\1\u0205\33\0\1\u0206\22\0\1\u0205\22\0\1\u0207\77\0"+
    "\1\u0208\50\0\1\u0209\75\0\1\u0136\61\0\1\u020a\64\0"+
    "\1\u01d1\67\0\1\u020b\66\0\1\u020c\62\0\1\u020d\77\0"+
    "\1\u020e\50\0\1\u020f\75\0\1\u0141\61\0\1\u0210\64\0"+
    "\1\u01d9\67\0\1\u0211\66\0\1\u0212\74\0\1\u0213\64\0"+
    "\1\u0192\56\0\1\u0214\61\0\1\u0215\66\0\1\u0216\27\0"+
    "\1\u0216\23\0\1\u0217\67\0\22\63\1\u019a\4\63\3\0"+
    "\1\63\2\0\4\63\4\0\2\63\3\0\2\63\3\0"+
    "\1\63\6\0\13\63\1\u0218\13\63\3\0\1\63\2\0"+
    "\4\63\4\0\2\63\3\0\2\63\3\0\1\63\6\0"+
    "\7\63\1\u0219\17\63\3\0\1\63\2\0\4\63\4\0"+
    "\2\63\3\0\2\63\3\0\1\63\6\0\22\73\1\u019e"+
    "\4\73\3\0\1\73\2\0\4\73\4\0\2\73\3\0"+
    "\2\73\3\0\1\73\6\0\13\73\1\u021a\13\73\3\0"+
    "\1\73\2\0\4\73\4\0\2\73\3\0\2\73\3\0"+
    "\1\73\6\0\7\73\1\u021b\17\73\3\0\1\73\2\0"+
    "\4\73\4\0\2\73\3\0\2\73\3\0\1\73\30\0"+
    "\1\u01a2\56\0\1\u021c\61\0\1\u021d\67\0\1\u021e\63\0"+
    "\1\u021f\123\0\1\u0220\30\0\1\u01f2\27\0\1\u01f2\42\0"+
    "\1\u0221\61\0\1\u0222\64\0\1\u0100\27\0\1\u0100\30\0"+
    "\1\u0223\33\0\1\u0223\51\0\1\u0224\61\0\1\u0225\50\0"+
    "\1\u0226\102\0\1\u0227\57\0\1\u0228\72\0\1\u0229\60\0"+
    "\1\u022a\56\0\1\u022b\76\0\1\u022c\70\0\1\u022d\71\0"+
    "\1\u0163\61\0\1\u022e\72\0\1\u022f\52\0\1\u0230\27\0"+
    "\1\u0230\41\0\1\u0231\46\0\1\u0205\33\0\1\u0206\22\0"+
    "\1\u0205\3\0\1\u0232\2\0\34\u0232\1\0\26\u0232\22\0"+
    "\1\u0233\70\0\1\u01d1\65\0\1\u0234\64\0\1\u0235\60\0"+
    "\1\u0236\61\0\1\u0136\74\0\1\u0237\70\0\1\u01d9\65\0"+
    "\1\u0238\64\0\1\u0239\60\0\1\u023a\61\0\1\u0141\76\0"+
    "\1\u023b\60\0\1\u0192\73\0\1\u023c\44\0\1\u023d\3\0"+
    "\1\u023d\1\0\4\u023d\1\0\16\u023d\3\0\1\u023d\1\0"+
    "\5\u023d\4\0\3\u023d\3\0\1\u023d\12\0\11\63\1\u019a"+
    "\15\63\3\0\1\63\2\0\4\63\4\0\2\63\3\0"+
    "\2\63\3\0\1\63\6\0\17\63\1\u023e\7\63\3\0"+
    "\1\63\2\0\4\63\4\0\2\63\3\0\2\63\3\0"+
    "\1\63\6\0\11\73\1\u019e\15\73\3\0\1\73\2\0"+
    "\4\73\4\0\2\73\3\0\2\73\3\0\1\73\6\0"+
    "\17\73\1\u023f\7\73\3\0\1\73\2\0\4\73\4\0"+
    "\2\73\3\0\2\73\3\0\1\73\17\0\1\u01a2\73\0"+
    "\1\u0240\54\0\1\u01f2\100\0\1\u0241\47\0\1\u0242\33\0"+
    "\1\u0242\44\0\1\u0243\52\0\1\u0244\33\0\1\u0244\44\0"+
    "\1\u0165\65\0\1\u0245\72\0\1\u0246\60\0\1\u0247\63\0"+
    "\1\u01bf\62\0\1\u01b1\72\0\1\u0248\63\0\1\u0249\67\0"+
    "\1\u024a\54\0\1\u024b\65\0\1\u024c\72\0\1\u024d\56\0"+
    "\1\u024e\33\0\1\u024e\74\0\1\u024f\11\0\1\u0232\2\0"+
    "\34\u0232\1\u0250\26\u0232\20\0\1\u0138\56\0\1\u0251\33\0"+
    "\1\u0251\34\0\1\u020b\75\0\1\u0252\61\0\1\u0143\56\0"+
    "\1\u0253\33\0\1\u0253\34\0\1\u0211\75\0\1\u0254\65\0"+
    "\1\u0192\47\0\16\63\1\u019a\10\63\3\0\1\63\2\0"+
    "\4\63\4\0\2\63\3\0\2\63\3\0\1\63\6\0"+
    "\16\73\1\u019e\10\73\3\0\1\73\2\0\4\73\4\0"+
    "\2\73\3\0\2\73\3\0\1\73\24\0\1\u01a2\60\0"+
    "\1\u0255\67\0\1\u0256\64\0\1\u0257\71\0\1\u0258\62\0"+
    "\1\u0259\71\0\1\u025a\113\0\1\u025b\30\0\1\u025c\27\0"+
    "\1\u025c\42\0\1\u0224\57\0\1\u025d\67\0\1\u0229\65\0"+
    "\1\u025e\70\0\1\u025f\65\0\1\u0260\46\0\1\u0261\46\0"+
    "\1\u0262\7\0\1\u0261\36\0\1\u01d1\55\0\1\u0136\75\0"+
    "\1\u01d9\55\0\1\u0141\66\0\1\u0263\55\0\1\u0264\62\0"+
    "\1\u0265\33\0\1\u0265\36\0\1\u0266\27\0\1\u0266\36\0"+
    "\1\u0267\72\0\1\u0268\52\0\1\u0269\33\0\1\u0269\33\0"+
    "\1\u026a\101\0\1\u026b\67\0\1\u026c\65\0\1\u0165\47\0"+
    "\1\u0165\53\0\2\u01cd\1\u0262\33\0\1\u0206\22\0\1\u0262"+
    "\13\0\1\u026d\74\0\1\u026e\61\0\1\u026f\104\0\1\u0270"+
    "\64\0\1\u0271\53\0\1\u0106\72\0\1\u0272\63\0\1\u0273"+
    "\56\0\1\u0274\72\0\1\u0275\67\0\1\u0276\54\0\1\u0277"+
    "\33\0\1\u0277\54\0\1\u01f2\42\0\1\u0278\33\0\1\u0278"+
    "\34\0\1\u0279\76\0\1\u027a\63\0\1\u0106\65\0\1\u027b"+
    "\64\0\1\u027c\66\0\1\u027d\64\0\1\u027e\67\0\1\u027f"+
    "\61\0\1\u0280\70\0\1\u0281\67\0\1\u0106\71\0\1\u0282"+
    "\60\0\1\u01f2\54\0\1\u01f2\126\0\1\u01f2\35\0\1\u0283"+
    "\54\0\1\u0284\76\0\1\u0285\54\0\1\u0111\66\0\1\u0286"+
    "\71\0\1\u0287\55\0\1\u0224\74\0\1\u0288\57\0\1\u0224"+
    "\33\0\1\u0224\20\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[31536];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\34\0\2\11\11\1\4\11\2\1\2\11\1\1\1\11"+
    "\6\1\3\11\5\1\1\11\4\1\1\11\1\1\1\11"+
    "\6\1\1\11\1\1\1\11\1\1\2\11\17\1\1\11"+
    "\4\1\1\11\6\1\1\11\1\0\10\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\2\11\7\1\1\11\12\1"+
    "\7\0\11\1\43\0\1\1\4\0\1\11\3\1\2\0"+
    "\2\1\34\0\11\1\44\0\1\11\2\1\1\0\10\1"+
    "\1\0\6\1\6\0\1\11\12\0\1\11\4\0\1\11"+
    "\6\0\11\1\15\0\1\11\5\0\1\1\16\0\2\1"+
    "\2\0\2\1\24\0\1\11\5\0\1\1\1\0\10\1"+
    "\1\11\36\0\14\1\27\0\6\1\10\0\1\11\43\0"+
    "\1\11\1\0\4\1\37\0\1\11\1\0\3\1\17\0"+
    "\2\1\13\0\1\1\54\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[648];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 56: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 57: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 58: break;
          case 4: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 59: break;
          case 5: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 60: break;
          case 6: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 61: break;
          case 7: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 62: break;
          case 8: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 63: break;
          case 9: 
            { return CndTypes.EQUAL;
            }
          case 64: break;
          case 10: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 65: break;
          case 11: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 66: break;
          case 12: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 67: break;
          case 13: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 68: break;
          case 14: 
            { return CndTypes.COLON;
            }
          case 69: break;
          case 15: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 70: break;
          case 16: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 71: break;
          case 17: 
            { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
            }
          case 72: break;
          case 18: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
            }
          case 73: break;
          case 19: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 74: break;
          case 20: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 75: break;
          case 21: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 76: break;
          case 22: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 77: break;
          case 23: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 78: break;
          case 24: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 79: break;
          case 25: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 80: break;
          case 26: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 81: break;
          case 27: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 82: break;
          case 28: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 83: break;
          case 29: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 84: break;
          case 30: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 85: break;
          case 31: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 86: break;
          case 32: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 87: break;
          case 33: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 88: break;
          case 34: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 89: break;
          case 35: 
            { return CndTypes.NODE_NAME;
            }
          case 90: break;
          case 36: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 91: break;
          case 37: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 92: break;
          case 38: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 93: break;
          case 39: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 94: break;
          case 40: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 95: break;
          case 41: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 96: break;
          case 42: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 97: break;
          case 43: 
            { return CndTypes.COMMENT;
            }
          case 98: break;
          case 44: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 99: break;
          case 45: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 100: break;
          case 46: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 101: break;
          case 47: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 102: break;
          case 48: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 103: break;
          case 49: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 104: break;
          case 50: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 105: break;
          case 51: 
            { return CndTypes.OPTION;
            }
          case 106: break;
          case 52: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 107: break;
          case 53: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            }
          case 108: break;
          case 54: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            }
          case 109: break;
          case 55: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
