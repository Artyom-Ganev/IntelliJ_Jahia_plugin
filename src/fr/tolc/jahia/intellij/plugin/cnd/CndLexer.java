/* The following code was generated by JFlex 1.4.3 on 24/09/16 23:03 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 24/09/16 23:03 from the specification file
 * <tt>E:/Projects/Smile/IntelliJ_Jahia_plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int EXTEND_COLON_DONE = 66;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int EXTEND_BEGIN = 62;
  public static final int NAMESPACES_OVER = 10;
  public static final int PROPERTY_PLUS_NAME_DONE = 48;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 60;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 50;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int EXTEND_ITEM_BEGIN = 70;
  public static final int PROPERTY_ADDENDUM_ATTR = 40;
  public static final int EXTEND_DONE = 68;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 52;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int PROPERTY_PLUS_TYPE_DONE = 56;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int EXTEND_NAMESPACE_DONE = 64;
  public static final int PROPERTY_PLUS_COLON_DONE = 54;
  public static final int PROPERTY_DEFAULT_BEGIN = 42;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_ADDENDUM = 38;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int PROPERTY_PLUS_BEGIN = 46;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 44;
  public static final int PROPERTY_PLUS_ADDENDUM = 58;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19,  5,  5, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\1\1\0\1\3\1\2\16\21\4\0\1\3\3\0"+
    "\1\5\2\0\1\10\1\45\1\46\1\44\1\43\1\25\1\42\1\16"+
    "\1\4\1\22\1\61\6\22\1\62\1\22\1\15\1\0\1\6\1\7"+
    "\1\20\2\0\1\17\1\51\15\17\1\57\2\17\1\56\7\17\1\23"+
    "\1\0\1\24\1\0\1\17\1\0\1\36\1\37\1\41\1\34\1\35"+
    "\1\53\1\47\1\11\1\27\1\17\1\55\1\40\1\26\1\31\1\32"+
    "\1\13\1\17\1\33\1\14\1\12\1\50\1\17\1\54\1\30\1\52"+
    "\1\63\4\0\41\21\2\0\4\5\4\0\1\5\2\0\1\21\7\0"+
    "\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0\u01ca\5\4\0"+
    "\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0\160\21\5\5"+
    "\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5\1\0\1\5"+
    "\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\21\2\0\236\5"+
    "\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5\1\0\55\21"+
    "\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21\10\0\33\5"+
    "\5\0\3\5\15\0\5\21\6\0\1\5\4\0\13\21\5\0\53\5"+
    "\25\21\12\60\4\0\2\5\1\21\143\5\1\0\1\5\10\21\1\0"+
    "\6\21\2\5\2\21\1\0\4\21\2\5\12\60\3\5\2\0\1\5"+
    "\17\0\1\21\1\5\1\21\36\5\33\21\2\0\131\5\13\21\1\5"+
    "\16\0\12\60\41\5\11\21\2\5\4\0\1\5\5\0\26\5\4\21"+
    "\1\5\11\21\1\5\3\21\1\5\5\21\22\0\31\5\3\21\104\0"+
    "\1\5\1\0\13\5\67\0\33\21\1\0\4\21\66\5\3\21\1\5"+
    "\22\21\1\5\7\21\12\5\2\21\2\0\12\60\1\0\7\5\1\0"+
    "\7\5\1\0\3\21\1\0\10\5\2\0\2\5\2\0\26\5\1\0"+
    "\7\5\1\0\1\5\3\0\4\5\2\0\1\21\1\5\7\21\2\0"+
    "\2\21\2\0\3\21\1\5\10\0\1\21\4\0\2\5\1\0\3\5"+
    "\2\21\2\0\12\60\4\5\7\0\1\5\5\0\3\21\1\0\6\5"+
    "\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5"+
    "\1\0\2\5\2\0\1\21\1\0\5\21\4\0\2\21\2\0\3\21"+
    "\3\0\1\21\7\0\4\5\1\0\1\5\7\0\12\60\2\21\3\5"+
    "\1\21\13\0\3\21\1\0\11\5\1\0\3\5\1\0\26\5\1\0"+
    "\7\5\1\0\2\5\1\0\5\5\2\0\1\21\1\5\10\21\1\0"+
    "\3\21\1\0\3\21\2\0\1\5\17\0\2\5\2\21\2\0\12\60"+
    "\1\0\1\5\17\0\3\21\1\0\10\5\2\0\2\5\2\0\26\5"+
    "\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\21\1\5\7\21"+
    "\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\5\1\0\3\5"+
    "\2\21\2\0\12\60\1\0\1\5\20\0\1\21\1\5\1\0\6\5"+
    "\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5"+
    "\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\21\3\0\3\21"+
    "\1\0\4\21\2\0\1\5\6\0\1\21\16\0\12\60\11\0\1\5"+
    "\7\0\3\21\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\3\0\1\5\7\21\1\0\3\21\1\0\4\21\7\0"+
    "\2\21\1\0\2\5\6\0\2\5\2\21\2\0\12\60\22\0\2\21"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\2\0\1\21\1\5\7\21\1\0\3\21\1\0\4\21\7\0\2\21"+
    "\7\0\1\5\1\0\2\5\2\21\2\0\12\60\1\0\2\5\17\0"+
    "\2\21\1\0\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\21"+
    "\1\0\3\21\1\0\4\21\1\5\10\0\1\21\10\0\2\5\2\21"+
    "\2\0\12\60\12\0\6\5\2\0\2\21\1\0\22\5\3\0\30\5"+
    "\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\21\4\0\6\21"+
    "\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\5\1\21\2\5"+
    "\7\21\4\0\10\5\10\21\1\0\12\60\47\0\2\5\1\0\1\5"+
    "\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5"+
    "\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5"+
    "\1\21\2\5\6\21\1\0\2\21\1\5\2\0\5\5\1\0\1\5"+
    "\1\0\6\21\2\0\12\60\2\0\4\5\40\0\1\5\27\0\2\21"+
    "\6\0\12\60\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21"+
    "\10\5\1\0\44\5\4\0\24\21\1\0\2\21\5\5\13\21\1\0"+
    "\44\21\11\0\1\21\71\0\53\5\24\21\1\5\12\60\6\0\6\5"+
    "\4\21\4\5\3\21\1\5\3\21\2\5\7\21\3\5\4\21\15\5"+
    "\14\21\1\5\1\21\12\60\4\21\2\0\46\5\1\0\1\5\5\0"+
    "\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0\41\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\17\5\1\0"+
    "\71\5\1\0\4\5\2\0\103\5\2\0\3\21\40\0\20\5\20\0"+
    "\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0\113\5\3\0"+
    "\3\5\17\0\15\5\1\0\4\5\3\21\13\0\22\5\3\21\13\0"+
    "\22\5\2\21\14\0\15\5\1\0\3\5\1\0\2\21\14\0\64\5"+
    "\40\21\3\0\1\5\3\0\2\5\1\21\2\0\12\60\41\0\3\21"+
    "\2\0\12\60\6\0\130\5\10\0\51\5\1\21\1\5\5\0\106\5"+
    "\12\0\35\5\3\0\14\21\4\0\14\21\12\0\12\60\36\5\2\0"+
    "\5\5\13\0\54\5\4\0\21\21\7\5\2\21\6\0\12\60\46\0"+
    "\27\5\5\21\4\0\65\5\12\21\1\0\35\21\2\0\1\21\12\60"+
    "\6\0\12\60\15\0\1\5\130\0\5\21\57\5\21\21\7\5\4\0"+
    "\12\60\21\0\11\21\14\0\3\21\36\5\15\21\2\5\12\60\54\5"+
    "\16\21\14\0\44\5\24\21\10\0\12\60\3\0\3\5\12\60\44\5"+
    "\122\0\3\21\1\0\25\21\4\5\1\21\4\5\3\21\2\5\11\0"+
    "\300\5\47\21\25\0\4\21\u0116\5\2\0\6\5\2\0\46\5\2\0"+
    "\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0\1\5\1\0"+
    "\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0\3\5\1\0"+
    "\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0\3\5\1\0"+
    "\7\5\16\0\5\21\32\0\5\21\20\0\2\5\23\0\1\5\13\0"+
    "\5\21\5\0\6\21\1\0\1\5\15\0\1\5\20\0\15\5\3\0"+
    "\33\5\25\0\15\21\4\0\1\21\3\0\14\21\21\0\1\5\4\0"+
    "\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0\4\5\5\0"+
    "\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0"+
    "\205\5\6\0\4\5\3\21\2\5\14\0\46\5\1\0\1\5\5\0"+
    "\1\5\2\0\70\5\7\0\1\5\17\0\1\21\27\5\11\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\40\21\57\0\1\5\u01d5\0\3\5"+
    "\31\0\11\5\6\21\1\0\5\5\2\0\5\5\4\0\126\5\2\0"+
    "\2\21\2\0\3\5\1\0\132\5\1\0\4\5\5\0\51\5\3\0"+
    "\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0\u51cd\5\63\0"+
    "\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\60\2\5\24\0"+
    "\57\5\1\21\4\0\12\21\1\0\31\5\7\0\1\21\120\5\2\21"+
    "\45\0\11\5\2\0\147\5\2\0\4\5\1\0\4\5\14\0\13\5"+
    "\115\0\12\5\1\21\3\5\1\21\4\5\1\21\27\5\5\21\20\0"+
    "\1\5\7\0\64\5\14\0\2\21\62\5\21\21\13\0\12\60\6\0"+
    "\22\21\6\5\3\0\1\5\4\0\12\60\34\5\10\21\2\0\27\5"+
    "\15\21\14\0\35\5\3\0\4\21\57\5\16\21\16\0\1\5\12\60"+
    "\46\0\51\5\16\21\11\0\3\5\1\21\10\5\2\21\2\0\12\60"+
    "\6\0\27\5\3\0\1\5\1\21\4\0\60\5\1\21\1\5\3\21"+
    "\2\5\2\21\5\5\2\21\1\5\1\21\1\5\30\0\3\5\2\0"+
    "\13\5\5\21\2\0\3\5\2\21\12\0\6\5\2\0\6\5\2\0"+
    "\6\5\11\0\7\5\1\0\7\5\221\0\43\5\10\21\1\0\2\21"+
    "\2\0\12\60\6\0\u2ba4\5\14\0\27\5\4\0\61\5\u2104\0\u016e\5"+
    "\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5\1\21\12\5"+
    "\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5\1\0\2\5"+
    "\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5"+
    "\3\0\20\21\20\0\7\21\14\0\2\5\30\0\3\5\31\0\1\5"+
    "\6\0\5\5\1\0\207\5\2\0\1\21\4\0\1\5\13\0\12\60"+
    "\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5\3\0\6\5"+
    "\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5\3\0\2\5"+
    "\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\43\0\1\1\2\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\3\21\1\22\1\23"+
    "\1\3\5\1\1\24\1\3\12\1\1\25\1\1\2\25"+
    "\1\26\1\1\1\26\2\27\1\3\1\30\1\31\1\32"+
    "\1\33\1\3\1\1\1\34\1\35\1\36\1\3\1\37"+
    "\3\1\1\40\3\0\1\41\2\0\1\42\3\0\1\3"+
    "\1\43\27\0\2\25\3\0\1\44\24\0\1\45\1\46"+
    "\16\0\1\25\2\26\1\47\1\0\1\50\13\0\1\51"+
    "\12\0\1\52\16\0\1\53\21\0\1\25\11\0\1\51"+
    "\16\0\1\54\21\0\1\55\1\56\1\0\1\57\13\0"+
    "\1\60\1\61\22\0\1\51\16\0\1\62\3\0\1\51"+
    "\25\0\1\51\10\0\1\51\23\0\1\51\120\0\1\51"+
    "\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\64\0\150\0\234\0\320\0\u0104\0\u0138\0\u016c"+
    "\0\u01a0\0\u01d4\0\u0208\0\u023c\0\u0270\0\u02a4\0\u02d8\0\u030c"+
    "\0\u0340\0\u0374\0\u03a8\0\u03dc\0\u0410\0\u0444\0\u0478\0\u04ac"+
    "\0\u04e0\0\u0514\0\u0548\0\u057c\0\u05b0\0\u05e4\0\u0618\0\u064c"+
    "\0\u0680\0\u06b4\0\u06e8\0\u071c\0\u071c\0\u0750\0\u0784\0\u07b8"+
    "\0\u071c\0\u071c\0\u07ec\0\u0820\0\u071c\0\u071c\0\u0854\0\u0888"+
    "\0\u08bc\0\u08f0\0\u0924\0\u071c\0\u0958\0\u071c\0\u071c\0\u098c"+
    "\0\u09c0\0\u09f4\0\u0a28\0\u071c\0\u0a5c\0\u071c\0\u0750\0\u0a90"+
    "\0\u071c\0\u0ac4\0\u0af8\0\u0b2c\0\u0b60\0\u0b94\0\u0bc8\0\u0bfc"+
    "\0\u071c\0\u0c30\0\u0c64\0\u0c98\0\u0ccc\0\u0d00\0\u0d34\0\u0d68"+
    "\0\u0d9c\0\u0dd0\0\u0e04\0\u0e38\0\u0e6c\0\u0ea0\0\u0ed4\0\u0f08"+
    "\0\u0f3c\0\u0f70\0\u0fa4\0\u0fd8\0\u071c\0\u100c\0\u1040\0\u071c"+
    "\0\u1074\0\u071c\0\u10a8\0\u10dc\0\u1110\0\u071c\0\u1144\0\u1178"+
    "\0\u071c\0\u11ac\0\u11e0\0\u1214\0\u1248\0\u127c\0\u12b0\0\u0888"+
    "\0\u071c\0\u12e4\0\u08f0\0\u071c\0\u1318\0\u134c\0\u1380\0\u0a90"+
    "\0\u071c\0\u13b4\0\u13e8\0\u141c\0\u1450\0\u1484\0\u14b8\0\u14ec"+
    "\0\u1520\0\u1554\0\u1588\0\u15bc\0\u15f0\0\u1624\0\u1658\0\u168c"+
    "\0\u16c0\0\u16f4\0\u1728\0\u175c\0\u1790\0\u17c4\0\u17f8\0\u0ea0"+
    "\0\u0ea0\0\u182c\0\u1860\0\u1894\0\u18c8\0\u071c\0\u18fc\0\u1930"+
    "\0\u10dc\0\u1964\0\u1998\0\u19cc\0\u1a00\0\u1a34\0\u1a68\0\u1a9c"+
    "\0\u1ad0\0\u1b04\0\u1b38\0\u1b6c\0\u1ba0\0\u1bd4\0\u1c08\0\u1c3c"+
    "\0\u1c70\0\u1ca4\0\u1520\0\u1554\0\u1cd8\0\u1d0c\0\u1d40\0\u1d74"+
    "\0\u1da8\0\u1ddc\0\u1e10\0\u1e44\0\u1e78\0\u1eac\0\u1ee0\0\u1f14"+
    "\0\u1f48\0\u1f7c\0\u1fb0\0\u1fe4\0\u18c8\0\u18fc\0\u2018\0\u204c"+
    "\0\u2080\0\u20b4\0\u20e8\0\u211c\0\u2150\0\u2184\0\u21b8\0\u21ec"+
    "\0\u2220\0\u2254\0\u2288\0\u071c\0\u22bc\0\u22f0\0\u2324\0\u2358"+
    "\0\u238c\0\u23c0\0\u23f4\0\u2428\0\u245c\0\u2490\0\u071c\0\u24c4"+
    "\0\u24f8\0\u252c\0\u2560\0\u2594\0\u25c8\0\u25fc\0\u2630\0\u2664"+
    "\0\u2698\0\u26cc\0\u2700\0\u2734\0\u2768\0\u071c\0\u279c\0\u27d0"+
    "\0\u2804\0\u2838\0\u286c\0\u28a0\0\u28d4\0\u2908\0\u293c\0\u2970"+
    "\0\u29a4\0\u29d8\0\u2a0c\0\u2a40\0\u2a74\0\u2aa8\0\u2adc\0\u071c"+
    "\0\u2b10\0\u2b44\0\u2b78\0\u2bac\0\u2be0\0\u2c14\0\u2c48\0\u2c7c"+
    "\0\u2cb0\0\u2ce4\0\u2d18\0\u2d4c\0\u2d80\0\u2db4\0\u2de8\0\u2e1c"+
    "\0\u2e50\0\u2e84\0\u2eb8\0\u2eec\0\u2f20\0\u2f54\0\u2f88\0\u2fbc"+
    "\0\u071c\0\u2ff0\0\u3024\0\u3058\0\u308c\0\u30c0\0\u30f4\0\u3128"+
    "\0\u315c\0\u3190\0\u31c4\0\u31f8\0\u322c\0\u3260\0\u3294\0\u32c8"+
    "\0\u32fc\0\u3330\0\u071c\0\u3058\0\u3364\0\u071c\0\u3398\0\u33cc"+
    "\0\u3400\0\u3434\0\u3468\0\u349c\0\u34d0\0\u3504\0\u3538\0\u356c"+
    "\0\u35a0\0\u071c\0\u071c\0\u35d4\0\u3608\0\u363c\0\u3670\0\u36a4"+
    "\0\u36d8\0\u370c\0\u3740\0\u3774\0\u37a8\0\u37dc\0\u3810\0\u3844"+
    "\0\u3878\0\u38ac\0\u38e0\0\u3914\0\u3948\0\u397c\0\u39b0\0\u39e4"+
    "\0\u3a18\0\u3a4c\0\u3a80\0\u3ab4\0\u3ae8\0\u3b1c\0\u3b50\0\u3b84"+
    "\0\u3bb8\0\u3bec\0\u3c20\0\u3c54\0\u071c\0\u3c88\0\u3cbc\0\u3cf0"+
    "\0\u3d24\0\u3d58\0\u3d8c\0\u3dc0\0\u3df4\0\u3e28\0\u3e5c\0\u3e90"+
    "\0\u3ec4\0\u3ef8\0\u3f2c\0\u3f60\0\u3f94\0\u3fc8\0\u3ffc\0\u4030"+
    "\0\u4064\0\u4098\0\u40cc\0\u4100\0\u4134\0\u4168\0\u419c\0\u41d0"+
    "\0\u4204\0\u4238\0\u426c\0\u42a0\0\u42d4\0\u4308\0\u433c\0\u4370"+
    "\0\u43a4\0\u43d8\0\u440c\0\u4440\0\u4474\0\u44a8\0\u44dc\0\u4510"+
    "\0\u4544\0\u4578\0\u45ac\0\u45e0\0\u4614\0\u4648\0\u467c\0\u46b0"+
    "\0\u46e4\0\u4718\0\u474c\0\u4780\0\u47b4\0\u47e8\0\u481c\0\u4850"+
    "\0\u4884\0\u48b8\0\u48ec\0\u4920\0\u4954\0\u4988\0\u49bc\0\u49f0"+
    "\0\u4a24\0\u4a58\0\u4a8c\0\u4ac0\0\u4af4\0\u4b28\0\u4b5c\0\u4b90"+
    "\0\u4bc4\0\u4bf8\0\u4c2c\0\u4c60\0\u4c94\0\u4cc8\0\u4cfc\0\u4d30"+
    "\0\u4d64\0\u4d98\0\u4dcc\0\u4e00\0\u4e34\0\u4e68\0\u4e9c\0\u4ed0"+
    "\0\u4f04\0\u4f38\0\u4f6c\0\u4fa0\0\u4fd4\0\u5008\0\u503c\0\u5070"+
    "\0\u50a4\0\u50d8\0\u510c\0\u5140\0\u5174\0\u51a8\0\u51dc\0\u5210"+
    "\0\u5244\0\u5278\0\u52ac\0\u52e0\0\u5314\0\u5348\0\u537c\0\u53b0"+
    "\0\u53e4\0\u5418\0\u544c\0\u5480\0\u54b4\0\u54e8\0\u551c\0\u5550"+
    "\0\u5584\0\u55b8\0\u55ec\0\u5620\0\u5654\0\u5688\0\u56bc\0\u56f0"+
    "\0\u5724\0\u5758\0\u578c\0\u57c0\0\u56f0\0\u57f4\0\u5828\0\u585c";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\44\1\45\1\46\1\47\1\50\1\44\1\51\14\44"+
    "\1\52\3\44\1\53\5\44\1\54\4\44\1\55\1\56"+
    "\21\44\1\45\1\46\1\47\1\44\1\57\3\44\4\57"+
    "\2\44\1\57\6\44\14\57\5\44\11\57\3\44\1\57"+
    "\1\44\1\45\1\46\1\47\3\44\1\60\55\44\1\45"+
    "\1\46\1\47\5\44\1\61\53\44\1\45\1\46\1\47"+
    "\4\44\1\62\54\44\1\45\1\46\1\47\61\44\1\45"+
    "\1\46\1\47\1\44\1\63\3\44\4\63\2\44\1\63"+
    "\6\44\14\63\5\44\11\63\3\44\1\63\1\44\1\45"+
    "\1\46\1\47\11\44\1\64\47\44\1\45\1\46\1\47"+
    "\1\44\1\65\3\44\4\65\2\44\1\65\6\44\14\65"+
    "\5\44\11\65\3\44\1\65\1\44\1\45\1\46\1\47"+
    "\20\44\1\66\40\44\1\45\1\46\1\47\14\44\1\67"+
    "\5\44\1\70\3\44\1\71\3\44\1\72\26\44\1\45"+
    "\1\46\1\47\1\44\1\73\3\44\4\73\2\44\1\73"+
    "\6\44\14\73\5\44\11\73\3\44\1\73\1\44\1\45"+
    "\1\46\1\47\11\44\1\74\47\44\1\45\1\46\1\47"+
    "\1\44\1\75\3\44\4\75\2\44\1\75\6\44\14\75"+
    "\5\44\11\75\3\44\1\75\1\76\1\45\1\77\1\100"+
    "\21\76\1\101\36\76\1\44\1\45\1\46\1\47\1\44"+
    "\1\102\3\44\4\102\2\44\1\102\6\44\14\102\5\44"+
    "\11\102\3\44\1\102\1\44\1\45\1\46\1\103\61\44"+
    "\1\45\1\46\1\47\10\44\1\104\17\44\1\105\2\44"+
    "\1\106\1\107\13\44\1\110\10\44\1\45\1\46\1\47"+
    "\42\44\1\111\16\44\1\45\1\46\1\112\5\44\1\113"+
    "\1\44\1\114\1\115\11\44\1\116\1\117\1\44\1\120"+
    "\1\121\3\44\1\122\1\123\13\44\1\124\11\44\1\45"+
    "\1\46\1\47\1\44\1\125\2\44\1\126\4\125\2\44"+
    "\1\125\2\44\1\127\3\44\3\125\1\130\10\125\5\44"+
    "\11\125\3\127\1\125\1\44\1\45\1\46\1\47\1\44"+
    "\1\131\2\44\1\132\4\131\2\44\1\131\1\44\2\133"+
    "\3\44\14\131\5\44\11\131\3\133\1\131\1\44\1\45"+
    "\1\46\1\47\1\44\1\134\3\44\4\134\2\44\1\134"+
    "\6\44\14\134\2\44\1\135\2\44\11\134\3\44\1\134"+
    "\1\44\1\45\1\46\1\136\61\44\1\45\1\46\1\47"+
    "\1\44\1\137\3\44\4\137\2\44\1\137\6\44\14\137"+
    "\5\44\11\137\3\44\1\137\1\44\1\45\1\46\1\47"+
    "\11\44\1\140\47\44\1\45\1\46\1\47\1\44\1\141"+
    "\3\44\4\141\2\44\1\141\6\44\14\141\5\44\11\141"+
    "\3\44\1\141\1\44\1\45\1\46\1\47\42\44\1\142"+
    "\16\44\1\45\1\46\1\143\61\44\1\45\1\46\1\47"+
    "\1\44\1\144\3\44\4\144\2\44\1\144\6\44\14\144"+
    "\5\44\11\144\3\44\1\144\1\44\1\45\1\46\1\47"+
    "\1\44\1\145\3\44\4\145\2\44\1\145\6\44\14\145"+
    "\5\44\11\145\3\44\1\145\1\44\1\45\1\46\1\47"+
    "\11\44\1\146\47\44\1\45\1\46\1\47\1\44\1\147"+
    "\3\44\4\147\2\44\1\147\6\44\14\147\5\44\11\147"+
    "\3\44\1\147\1\44\1\45\1\46\1\150\21\44\1\151"+
    "\37\44\1\45\1\46\1\47\26\44\1\152\1\44\1\153"+
    "\3\44\1\154\23\44\65\0\1\45\65\0\1\47\64\0"+
    "\1\155\71\0\1\156\101\0\1\157\40\0\1\57\3\0"+
    "\4\57\2\0\1\57\6\0\14\57\5\0\11\57\3\0"+
    "\1\57\3\0\1\160\4\0\1\161\65\0\1\162\54\0"+
    "\1\163\14\0\1\164\50\0\1\63\3\0\4\63\2\0"+
    "\1\63\6\0\14\63\5\0\11\63\3\0\1\63\5\0"+
    "\1\65\3\0\4\65\2\0\1\65\1\0\2\65\3\0"+
    "\14\65\5\0\15\65\27\0\1\165\67\0\1\166\67\0"+
    "\1\167\31\0\1\73\3\0\4\73\2\0\1\73\6\0"+
    "\14\73\5\0\11\73\3\0\1\73\5\0\1\75\3\0"+
    "\4\75\2\0\1\75\1\0\2\75\3\0\14\75\5\0"+
    "\15\75\3\0\1\170\21\0\1\101\43\0\1\102\3\0"+
    "\5\102\1\0\1\102\1\0\2\102\3\0\14\102\5\0"+
    "\15\102\3\0\1\103\41\0\1\171\30\0\1\172\103\0"+
    "\1\173\3\0\1\174\54\0\1\175\2\0\1\176\63\0"+
    "\1\177\66\0\1\200\31\0\1\112\2\0\1\201\1\202"+
    "\103\0\1\203\67\0\1\204\62\0\1\205\67\0\1\206"+
    "\11\0\1\207\44\0\1\210\27\0\1\211\34\0\1\212"+
    "\62\0\1\213\63\0\1\214\16\0\1\215\45\0\1\216"+
    "\67\0\1\217\32\0\1\125\3\0\4\125\2\0\1\125"+
    "\1\0\2\125\3\0\14\125\5\0\15\125\1\220\2\0"+
    "\5\220\1\221\53\220\22\0\1\127\35\0\3\127\6\0"+
    "\1\125\3\0\4\125\2\0\1\125\1\0\2\125\3\0"+
    "\4\125\1\222\7\125\5\0\15\125\5\0\1\131\3\0"+
    "\4\131\1\223\1\0\1\131\1\0\2\133\2\0\1\224"+
    "\14\131\5\0\11\131\3\133\1\131\1\225\2\0\61\225"+
    "\5\0\1\133\3\0\4\133\2\0\1\133\1\0\2\133"+
    "\2\0\1\224\14\133\5\0\15\133\5\0\1\134\3\0"+
    "\5\134\1\0\1\134\1\0\2\134\3\0\14\134\5\0"+
    "\15\134\3\0\1\136\41\0\1\226\23\0\1\137\3\0"+
    "\4\137\2\0\1\137\6\0\14\137\5\0\11\137\3\0"+
    "\1\137\5\0\1\141\3\0\4\141\2\0\1\141\1\0"+
    "\2\141\3\0\14\141\5\0\15\141\3\0\1\143\3\0"+
    "\1\227\26\0\1\230\32\0\1\231\3\0\4\231\1\232"+
    "\1\0\1\231\6\0\14\231\5\0\11\231\3\0\1\231"+
    "\5\0\1\145\3\0\4\145\2\0\1\145\6\0\14\145"+
    "\5\0\11\145\3\0\1\145\5\0\1\147\3\0\4\147"+
    "\2\0\1\147\1\0\2\147\3\0\14\147\5\0\15\147"+
    "\3\0\1\150\21\0\1\151\51\0\1\233\105\0\1\234"+
    "\64\0\1\235\25\0\1\155\2\0\61\155\35\0\1\236"+
    "\40\0\1\237\63\0\1\240\101\0\1\241\67\0\1\242"+
    "\43\0\1\243\102\0\1\244\100\0\1\245\25\0\1\246"+
    "\102\0\1\247\64\0\1\250\62\0\1\251\70\0\1\252"+
    "\30\0\1\253\63\0\1\254\114\0\1\255\56\0\1\256"+
    "\2\0\1\257\64\0\1\260\61\0\1\261\72\0\1\262"+
    "\57\0\1\263\111\0\1\264\54\0\1\265\51\0\1\266"+
    "\60\0\1\267\37\0\1\270\103\0\1\271\72\0\1\272"+
    "\27\0\1\125\3\0\4\125\2\0\1\125\1\0\2\125"+
    "\3\0\14\125\5\0\5\125\1\273\7\125\5\0\1\274"+
    "\3\0\4\274\2\0\1\274\6\0\14\274\5\0\11\274"+
    "\3\0\1\274\3\0\1\224\1\0\1\133\3\0\4\133"+
    "\2\0\1\133\1\0\2\133\3\0\14\133\5\0\15\133"+
    "\1\225\2\0\5\225\1\275\53\225\3\0\1\276\130\0"+
    "\1\277\20\0\1\300\3\0\4\300\2\0\1\300\6\0"+
    "\14\300\5\0\11\300\3\0\1\300\12\0\1\301\124\0"+
    "\1\302\62\0\1\303\37\0\1\304\72\0\1\305\41\0"+
    "\1\306\77\0\1\307\71\0\1\310\40\0\1\311\100\0"+
    "\1\312\73\0\1\313\61\0\1\314\64\0\1\315\65\0"+
    "\1\316\72\0\1\314\71\0\1\317\42\0\1\320\55\0"+
    "\1\321\47\0\1\322\63\0\1\323\105\0\1\324\41\0"+
    "\1\325\106\0\1\326\57\0\1\327\102\0\1\330\45\0"+
    "\1\331\71\0\1\332\55\0\1\333\45\0\1\334\104\0"+
    "\1\260\33\0\1\125\3\0\4\125\2\0\1\125\1\0"+
    "\2\125\3\0\14\125\3\0\1\335\1\0\15\125\5\0"+
    "\1\274\3\0\4\274\2\0\1\274\1\0\2\274\3\0"+
    "\14\274\5\0\15\274\12\0\1\336\56\0\1\300\3\0"+
    "\4\300\2\0\1\300\1\0\2\300\3\0\14\300\5\0"+
    "\15\300\27\0\1\337\72\0\1\340\57\0\1\341\43\0"+
    "\1\342\102\0\1\343\46\0\1\344\1\345\77\0\1\346"+
    "\65\0\1\347\63\0\1\350\61\0\1\351\72\0\1\246"+
    "\56\0\1\352\65\0\1\353\61\0\1\354\65\0\1\264"+
    "\64\0\1\355\62\0\1\356\64\0\1\357\63\0\1\360"+
    "\54\0\1\361\64\0\1\362\73\0\1\363\54\0\1\364"+
    "\104\0\1\365\52\0\1\366\34\0\1\367\117\0\1\370"+
    "\47\0\1\371\63\0\1\372\101\0\1\373\63\0\1\374"+
    "\65\0\1\375\45\0\1\376\44\0\1\345\52\0\1\377"+
    "\115\0\1\u0100\63\0\1\u0101\74\0\1\u0102\66\0\1\314"+
    "\47\0\1\u0103\62\0\1\u0104\61\0\1\u0105\71\0\1\u0106"+
    "\61\0\1\u0107\36\0\1\u0108\64\0\1\u0107\105\0\1\u0109"+
    "\66\0\1\u010a\76\0\1\u010b\73\0\1\u010c\33\0\1\u010d"+
    "\37\0\1\u010e\115\0\1\u010f\53\0\1\u0110\72\0\1\374"+
    "\35\0\1\u0111\64\0\1\u0112\64\0\1\u0113\53\0\1\u0114"+
    "\116\0\1\u0115\65\0\1\u0116\47\0\1\u0117\67\0\1\314"+
    "\105\0\1\u0118\62\0\1\327\23\0\1\u0119\111\0\1\u011a"+
    "\55\0\1\355\65\0\1\u011b\41\0\1\u011c\111\0\1\u011d"+
    "\60\0\1\u011e\63\0\1\u011f\50\0\1\u0120\35\0\3\u0120"+
    "\34\0\1\u0121\44\0\1\u0111\104\0\1\u0122\31\0\1\u0113"+
    "\3\0\1\u0123\60\0\1\u0124\4\0\4\u0124\1\0\2\u0124"+
    "\2\0\1\u0124\3\0\15\u0124\4\0\11\u0124\1\0\3\u0124"+
    "\40\0\1\u0125\35\0\1\u0126\54\0\1\u0117\6\0\1\u0127"+
    "\20\0\1\u0128\5\0\1\u0129\57\0\1\u012a\63\0\1\u012b"+
    "\63\0\1\327\35\0\1\u012c\111\0\1\u012d\55\0\1\u012e"+
    "\67\0\1\u012f\66\0\1\u0106\43\0\1\u0130\102\0\1\u0131"+
    "\31\0\1\u0122\3\0\1\u0132\111\0\1\u0133\63\0\1\u0134"+
    "\55\0\1\u0135\45\0\1\u0136\105\0\1\u0137\64\0\1\327"+
    "\37\0\1\u0138\20\0\1\u0139\62\0\1\u013a\74\0\1\u013b"+
    "\31\0\1\u013c\76\0\1\327\35\0\3\327\37\0\1\u013d"+
    "\55\0\1\u013e\74\0\1\u013f\54\0\1\u0140\66\0\1\u0141"+
    "\76\0\1\u0142\45\0\1\327\43\0\1\327\63\0\1\u0143"+
    "\61\0\1\u0144\65\0\1\u0145\63\0\1\u0146\62\0\1\u0147"+
    "\101\0\1\u0148\65\0\1\u0149\63\0\1\u014a\41\0\1\u014b"+
    "\131\0\1\u014c\43\0\1\u014d\64\0\1\u014e\37\0\1\u014f"+
    "\112\0\1\u0150\63\0\1\u0151\34\0\1\u0152\65\0\1\u0153"+
    "\104\0\1\u0154\62\0\1\u0155\62\0\1\u0156\65\0\1\u0157"+
    "\63\0\1\u0158\63\0\1\u0159\60\0\1\u015a\101\0\1\u015b"+
    "\65\0\1\u015c\46\0\1\u015d\56\0\1\u015e\73\0\1\u015f"+
    "\50\0\1\u0160\113\0\1\u0161\34\0\1\327\111\0\1\u0162"+
    "\45\0\1\314\37\0\1\314\100\0\1\u0163\37\0\1\u0160"+
    "\7\0\1\u0164\25\0\1\u0165\11\0\1\u0166\45\0\1\u0167"+
    "\60\0\1\u0168\45\0\1\u0169\76\0\1\u016a\72\0\1\u016b"+
    "\54\0\1\u016c\65\0\1\u016d\65\0\1\u016e\42\0\1\u016f"+
    "\112\0\1\u0170\34\0\1\u0171\111\0\1\u0172\52\0\1\u0173"+
    "\70\0\1\u0174\52\0\1\u0175\115\0\1\u0176\43\0\1\u0177"+
    "\63\0\1\u0178\111\0\1\u0179\10\0\1\327\106\0\1\u017a"+
    "\5\0\1\u017b\57\0\1\u017c\75\0\1\u017d\37\0\1\u017e"+
    "\75\0\1\u016e\63\0\1\u017f\60\0\1\u0180\64\0\1\u0181"+
    "\62\0\1\u0182\104\0\1\u0183\24\0\1\u0184\117\0\1\u0185"+
    "\36\0\1\u0186\73\0\1\u0187\62\0\1\u0188\63\0\1\u0189"+
    "\62\0\1\u018a\44\0\1\u018b\123\0\1\u018c\51\0\1\u018d"+
    "\73\0\1\u018e\25\0\1\u018f\123\0\1\u0190\34\0\1\u0191"+
    "\74\0\1\u0192\62\0\1\u0193\63\0\1\u0194\43\0\1\u0195"+
    "\106\0\1\u0196\62\0\1\u0197\67\0\1\u0198\74\0\1\u0199"+
    "\46\0\1\u019a\76\0\1\u019b\46\0\1\u019c\65\0\1\u019d"+
    "\52\0\1\314\1\u019e\45\0\1\u019f\66\0\1\u01a0\75\0"+
    "\1\314\110\0\1\u01a1\65\0\1\u01a2\20\0\1\u01a3\105\0"+
    "\1\u01a4\101\0\1\u01a5\53\0\1\u01a6\36\0\1\u01a7\13\0"+
    "\1\u01a8\11\0\1\u01a9\11\0\1\u01aa\66\0\1\u01ab\36\0"+
    "\1\u01ac\70\0\1\u01ad\63\0\1\u01ae\53\0\1\u01a7\67\0"+
    "\1\u01af\3\0\1\u01b0\54\0\1\u01b1\2\0\1\u01b2\66\0"+
    "\1\u01b3\62\0\1\u01b4\76\0\1\u019c\63\0\1\u01b5\45\0"+
    "\1\u01b6\44\0\1\u01b7\111\0\1\u01b5\63\0\1\u01b8\63\0"+
    "\1\u01b9\63\0\1\u01ba\60\0\1\u01bb\40\0\1\u01bc\106\0"+
    "\1\u01bd\62\0\1\u01be\64\0\1\u01bf\63\0\1\u019c\36\0"+
    "\1\u01c0\110\0\1\u01c1\75\0\1\u01c2\51\0\1\u01c3\67\0"+
    "\1\u01c4\46\0\1\314\1\u01c5\67\0\1\u01c6\64\0\1\u01c7"+
    "\64\0\1\u01bb\42\0\1\u01c8\77\0\1\u01c9\47\0\1\u01ca"+
    "\104\0\1\u01cb\107\0\1\u01cc\33\0\1\u01cd\107\0\1\u01ce"+
    "\62\0\1\u01bb\47\0\1\u01cf\53\0\1\u01d0\67\0\1\u01b2"+
    "\64\0\1\u01d1\65\0\1\u01d2\63\0\1\u01d3\35\0\1\u01d4"+
    "\105\0\1\u01d5\42\0\1\u01d6\65\0\1\u01d7\51\0\1\u01d8"+
    "\2\0\61\u01d8\7\0\1\u01d9\54\0\1\u01d8\2\0\5\u01d8"+
    "\1\u01da\53\u01d8\12\0\1\u01db\40\0\1\u01dc\10\0\1\u01d8"+
    "\2\0\5\u01d8\1\u01da\13\u01d8\1\u01dd\37\u01d8\33\0\1\u01de"+
    "\66\0\1\u01df\75\0\1\u01ba\53\0\1\u01e0\37\0\1\u01ba"+
    "\47\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[22672];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\43\0\2\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\7\1\1\11\23\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\2\1\1\11\4\1\3\0\1\11\2\0"+
    "\1\11\3\0\1\1\1\11\27\0\2\1\3\0\1\11"+
    "\24\0\2\1\16\0\4\1\1\0\1\1\13\0\1\11"+
    "\12\0\1\11\16\0\1\11\21\0\1\11\11\0\1\1"+
    "\16\0\1\11\21\0\1\11\1\1\1\0\1\11\13\0"+
    "\2\11\22\0\1\1\16\0\1\11\3\0\1\1\25\0"+
    "\1\1\10\0\1\1\23\0\1\1\120\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[480];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2266) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 34: 
          { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
          }
        case 51: break;
        case 26: 
          { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 52: break;
        case 15: 
          { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
          }
        case 53: break;
        case 24: 
          { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 54: break;
        case 47: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
          }
        case 55: break;
        case 7: 
          { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
          }
        case 56: break;
        case 2: 
          { yybegin(YYINITIAL); return CndTypes.CRLF;
          }
        case 57: break;
        case 8: 
          { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
          }
        case 58: break;
        case 49: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 59: break;
        case 33: 
          { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
          }
        case 60: break;
        case 9: 
          { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 61: break;
        case 21: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 62: break;
        case 48: 
          { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
          }
        case 63: break;
        case 12: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
          }
        case 64: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 65: break;
        case 17: 
          { yybegin(NODE_TYPE_INHERITANCE);
          }
        case 66: break;
        case 5: 
          { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
          }
        case 67: break;
        case 40: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 68: break;
        case 41: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE;
          }
        case 69: break;
        case 35: 
          { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 70: break;
        case 16: 
          { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
          }
        case 71: break;
        case 10: 
          { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 72: break;
        case 27: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 73: break;
        case 31: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
          }
        case 74: break;
        case 11: 
          { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 75: break;
        case 19: 
          { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
          }
        case 76: break;
        case 44: 
          { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
          }
        case 77: break;
        case 14: 
          { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
          }
        case 78: break;
        case 42: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 79: break;
        case 39: 
          { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 80: break;
        case 6: 
          { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
          }
        case 81: break;
        case 22: 
          { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
          }
        case 82: break;
        case 30: 
          { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 83: break;
        case 46: 
          { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
          }
        case 84: break;
        case 32: 
          { yybegin(YYINITIAL); return CndTypes.COMMENT;
          }
        case 85: break;
        case 37: 
          { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
          }
        case 86: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 87: break;
        case 23: 
          { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
          }
        case 88: break;
        case 25: 
          { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 89: break;
        case 13: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
          }
        case 90: break;
        case 18: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
          }
        case 91: break;
        case 38: 
          { yybegin(PROPERTY_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 92: break;
        case 20: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 93: break;
        case 45: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
          }
        case 94: break;
        case 29: 
          { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 95: break;
        case 50: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
          }
        case 96: break;
        case 36: 
          { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 97: break;
        case 4: 
          { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
          }
        case 98: break;
        case 43: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
          }
        case 99: break;
        case 28: 
          { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 100: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
