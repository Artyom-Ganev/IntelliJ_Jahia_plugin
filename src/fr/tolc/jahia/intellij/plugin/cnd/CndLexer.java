/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int NODETYPE_DONE = 8;
  public static final int SUPER_TYPE_NAMESPACE = 10;
  public static final int SUPER_TYPE_NAME = 12;
  public static final int AFTER_SUPER_TYPE_NAME = 14;
  public static final int OPTIONS = 16;
  public static final int EXTENDS = 18;
  public static final int EXTEND_NAMESPACE = 20;
  public static final int EXTEND = 22;
  public static final int ITEMTYPE = 24;
  public static final int PROPERTY = 26;
  public static final int PROPERTY_TYPE = 28;
  public static final int PROPERTY_MASK_OPTION_NAME = 30;
  public static final int PROPERTY_MASK = 32;
  public static final int PROPERTY_MASK_OPTION = 34;
  public static final int PROPERTY_DEFAULT = 36;
  public static final int PROPERTY_DEFAULT_VALUE = 38;
  public static final int PROPERTY_ATTRIBUTES = 40;
  public static final int PROPERTY_CONSTRAINT = 42;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 44;
  public static final int NODE = 46;
  public static final int NODE_NAMESPACE = 48;
  public static final int NODE_NODETYPE = 50;
  public static final int NODE_DEFAULT = 52;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 54;
  public static final int NODE_DEFAULT_VALUE = 56;
  public static final int NODE_ATTRIBUTES = 58;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14832 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\20\21\1\23\50\21\1\24\1\21\1"+
    "\25\1\26\1\27\1\30\2\26\16\0\1\31\1\15\1\32\1\33\2\21\1\34\11\21\1\35\21\21"+
    "\1\36\1\37\23\21\1\26\1\40\3\21\1\22\1\41\1\40\4\21\1\42\1\43\4\0\1\44\1\45"+
    "\1\26\3\21\2\46\1\26\1\47\1\50\1\0\1\51\5\21\1\52\3\0\1\53\1\54\13\21\1\55"+
    "\1\44\1\56\1\57\1\0\1\60\1\26\1\61\1\62\3\21\3\0\1\63\12\21\1\64\1\0\1\65"+
    "\1\26\1\0\1\66\3\21\1\52\1\67\1\20\2\21\1\64\1\70\1\71\1\72\2\26\3\21\1\73"+
    "\10\26\1\74\1\27\6\26\1\75\2\0\1\76\1\77\6\21\1\100\2\0\1\101\1\21\1\102\1"+
    "\0\2\40\1\103\1\104\1\105\2\21\1\74\1\106\1\107\1\110\1\111\1\61\1\112\1\102"+
    "\1\0\1\113\1\50\1\103\1\114\1\105\2\21\1\74\1\115\1\116\1\117\1\120\1\121"+
    "\1\122\1\123\1\0\1\124\1\26\1\103\1\35\1\34\2\21\1\74\1\125\1\107\1\44\1\126"+
    "\1\127\1\26\1\102\1\0\1\41\1\26\1\103\1\104\1\105\2\21\1\74\1\125\1\107\1"+
    "\110\1\120\1\123\1\112\1\102\1\0\1\41\1\26\1\130\1\131\1\132\1\133\1\134\1"+
    "\131\1\21\1\135\1\136\1\137\1\140\1\26\1\123\1\0\1\26\1\41\1\103\1\31\1\74"+
    "\2\21\1\74\1\141\1\142\1\143\1\137\1\144\1\25\1\102\1\0\2\26\1\145\1\31\1"+
    "\74\2\21\1\74\1\141\1\107\1\143\1\137\1\144\1\32\1\102\1\0\1\146\1\26\1\145"+
    "\1\31\1\74\4\21\1\147\1\143\1\150\1\61\1\26\1\102\1\0\1\26\1\37\1\145\1\21"+
    "\1\22\1\37\2\21\1\34\1\151\1\22\1\152\1\153\1\0\2\26\1\154\1\26\1\40\5\21"+
    "\1\155\1\156\1\157\1\76\1\0\1\160\4\26\1\161\1\162\1\163\1\40\1\164\1\165"+
    "\1\155\1\166\1\167\1\170\1\0\1\171\4\26\1\127\2\26\1\160\1\0\1\160\1\172\1"+
    "\173\1\21\1\40\3\21\1\27\1\43\1\0\1\143\1\174\1\0\1\43\3\0\1\47\1\175\7\26"+
    "\5\21\1\52\1\0\1\176\1\0\1\160\1\64\1\177\1\200\1\201\1\202\1\21\1\203\1\204"+
    "\1\0\1\170\4\21\1\35\1\17\5\21\1\205\51\21\1\132\1\22\1\132\5\21\1\132\4\21"+
    "\1\132\1\22\1\132\1\21\1\22\7\21\1\132\10\21\1\206\4\26\2\21\2\26\12\21\1"+
    "\27\1\26\1\40\114\21\1\104\2\21\1\40\2\21\1\46\11\21\1\131\1\127\1\26\1\21"+
    "\1\31\1\207\1\26\2\21\1\207\1\26\2\21\1\210\1\26\1\21\1\31\1\211\1\26\6\21"+
    "\1\212\3\0\1\213\1\214\1\0\1\160\3\26\1\215\1\0\1\160\13\21\1\26\5\21\1\216"+
    "\10\21\1\217\1\26\3\21\1\27\1\0\1\2\1\0\1\2\1\123\1\0\3\21\1\217\1\27\1\26"+
    "\5\21\1\113\2\0\1\54\1\160\1\0\1\160\4\26\2\21\1\157\1\2\6\21\1\174\1\76\3"+
    "\0\1\110\1\0\1\160\1\0\1\160\1\42\13\26\1\220\5\21\1\212\1\0\1\220\1\113\1"+
    "\0\1\160\1\26\1\221\1\2\1\26\1\222\3\21\1\101\1\201\1\0\1\66\4\21\1\64\1\0"+
    "\1\2\1\26\4\21\1\212\2\0\1\26\1\0\1\223\1\0\1\66\3\21\1\217\12\26\1\224\2"+
    "\0\1\225\1\226\1\26\30\21\4\0\1\76\2\26\1\75\42\21\2\217\4\21\2\217\1\21\1"+
    "\227\3\21\1\217\6\21\1\31\1\167\1\230\1\27\1\231\1\113\1\21\1\27\1\230\1\27"+
    "\1\26\1\221\3\26\1\232\1\26\1\42\1\127\1\26\1\233\1\26\1\47\1\234\1\41\1\42"+
    "\2\26\1\21\1\27\3\21\1\46\2\26\1\0\1\47\1\235\1\0\1\236\1\26\1\237\1\37\1"+
    "\151\1\240\1\30\1\241\1\21\1\242\1\243\1\244\2\26\5\21\1\127\116\26\5\21\1"+
    "\22\5\21\1\22\20\21\1\27\1\245\1\246\1\26\4\21\1\35\1\17\7\21\1\42\1\26\1"+
    "\61\2\21\1\22\1\26\10\22\4\0\5\26\1\42\72\26\1\243\3\26\1\40\1\203\1\240\1"+
    "\27\1\40\11\21\1\22\1\247\1\40\12\21\1\205\1\243\4\21\1\217\1\40\12\21\1\22"+
    "\2\26\3\21\1\46\6\26\170\21\1\217\11\26\71\21\1\27\6\26\21\21\1\27\10\26\5"+
    "\21\1\217\41\21\1\27\2\21\1\0\1\246\2\26\5\21\1\157\1\75\1\250\3\21\1\61\12"+
    "\21\1\160\3\26\1\42\1\21\1\37\14\21\1\251\1\113\1\26\1\21\1\46\11\26\1\21"+
    "\1\252\1\253\2\21\1\52\2\26\1\127\6\21\1\113\1\26\1\66\5\21\1\212\1\0\1\47"+
    "\1\26\1\0\1\160\2\0\1\66\1\50\1\0\1\66\2\21\1\64\1\170\2\21\1\157\1\0\1\2"+
    "\1\26\3\21\1\27\1\77\5\21\1\52\1\0\1\236\1\42\1\0\1\160\4\26\5\21\1\101\1"+
    "\76\1\26\1\253\1\254\1\0\1\160\2\21\1\22\1\255\6\21\1\200\1\256\1\216\2\26"+
    "\1\257\1\21\1\52\1\260\1\26\3\261\1\26\2\22\22\26\4\21\1\52\1\262\1\0\1\160"+
    "\64\21\1\113\1\26\2\21\1\22\1\263\5\21\1\113\40\26\55\21\1\217\15\21\1\25"+
    "\4\26\1\22\1\26\1\263\1\264\1\21\1\74\1\22\1\167\1\265\15\21\1\25\3\26\1\263"+
    "\54\21\1\217\2\26\10\21\1\37\6\21\5\26\1\21\1\27\2\0\2\26\1\76\1\26\1\134"+
    "\2\26\1\243\3\26\1\41\1\31\20\21\1\266\1\233\1\26\1\0\1\160\1\40\2\21\1\114"+
    "\1\40\2\21\1\46\1\267\12\21\1\22\3\37\1\270\1\271\2\26\1\272\1\21\1\141\2"+
    "\21\1\22\2\21\1\273\1\21\1\217\1\21\1\217\4\26\17\21\1\46\10\26\6\21\1\27"+
    "\20\26\1\274\20\26\3\21\1\27\6\21\1\127\5\26\3\21\1\22\2\26\3\21\1\46\6\26"+
    "\3\21\1\217\4\21\1\113\1\21\1\240\5\26\23\21\1\217\1\0\1\160\52\26\1\217\1"+
    "\74\4\21\1\35\1\275\2\21\1\217\25\26\2\21\1\217\1\26\3\21\1\25\10\26\7\21"+
    "\1\267\10\26\1\276\1\75\1\141\1\40\2\21\1\113\1\117\4\26\3\21\1\27\20\26\6"+
    "\21\1\217\1\26\2\21\1\217\1\26\2\21\1\46\21\26\11\21\1\127\66\26\1\222\6\21"+
    "\1\0\1\76\3\26\1\123\1\0\2\26\1\222\5\21\1\0\1\277\2\26\3\21\1\127\1\0\1\160"+
    "\1\222\3\21\1\157\1\0\1\143\1\0\10\26\1\222\5\21\1\52\1\0\1\300\1\26\1\0\1"+
    "\160\24\26\5\21\1\52\1\0\1\26\1\0\1\160\46\26\55\21\1\22\22\26\14\21\1\46"+
    "\63\26\5\21\1\22\72\26\7\21\1\127\130\26\10\21\1\27\1\26\1\101\4\0\1\76\1"+
    "\26\1\61\1\222\1\21\14\26\1\25\153\26\1\301\1\302\2\0\1\303\1\2\3\26\1\304"+
    "\22\26\1\305\67\26\12\21\1\31\10\21\1\31\1\306\1\307\1\21\1\310\1\141\7\21"+
    "\1\35\1\311\2\31\3\21\1\312\1\167\1\37\1\74\51\21\1\217\3\21\1\74\2\21\1\205"+
    "\3\21\1\205\2\21\1\31\3\21\1\31\2\21\1\22\3\21\1\22\3\21\1\74\3\21\1\74\2"+
    "\21\1\205\1\313\6\0\1\141\3\21\1\161\1\40\1\205\1\314\1\237\1\315\1\161\1"+
    "\227\1\161\2\205\1\122\1\21\1\34\1\21\1\113\1\316\1\34\1\21\1\113\50\26\32"+
    "\21\1\22\5\26\106\21\1\27\1\26\33\21\1\217\74\26\1\121\3\26\14\0\20\26\36"+
    "\0\2\26");

  /* The ZZ_CMAP_A table has 1656 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\35\1\3\1\2\6\7\4\0\1\30\3\0\1\6\2\0\1\12\1\32\1\33\1\5\1\34"+
    "\1\27\1\31\1\20\1\4\12\22\1\17\1\0\1\10\1\11\1\24\2\0\7\21\1\13\7\21\1\15"+
    "\2\21\1\23\1\14\6\21\1\25\1\0\1\26\1\0\4\21\4\0\6\7\1\36\2\7\2\0\4\6\4\0\1"+
    "\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\7\6\1\16\2\6\4\0\4\6\16\0\5\6\7\0"+
    "\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0"+
    "\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0"+
    "\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\7\7\4\0\2\6\1\7\13\6\1\0"+
    "\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11"+
    "\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3"+
    "\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2"+
    "\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2"+
    "\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0"+
    "\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1"+
    "\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4"+
    "\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6"+
    "\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5"+
    "\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0"+
    "\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0"+
    "\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5"+
    "\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7"+
    "\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7"+
    "\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0"+
    "\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6"+
    "\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1"+
    "\6\2\0\3\6\1\0\6\6\2\0\2\6\2\35\5\7\5\0\1\6\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1"+
    "\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6"+
    "\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10"+
    "\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0"+
    "\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2"+
    "\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6"+
    "\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7"+
    "\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1"+
    "\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\36\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\1\11\1\14"+
    "\1\15\1\16\1\17\1\20\1\21\1\22\1\23\2\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\3\33\2\34"+
    "\1\35\1\36\1\37\1\40\1\41\1\42\1\43\3\44"+
    "\1\1\1\45\1\46\1\1\2\2\1\3\1\1\1\47"+
    "\1\50\1\0\4\51\1\1\1\3\1\1\1\47\1\0"+
    "\1\52\1\1\2\53\1\54\1\55\1\56\1\57\3\60"+
    "\1\61\1\62\1\63\3\64\1\65\1\0\1\11\1\33"+
    "\1\44\4\0\1\66\1\3\1\65\1\51\2\0\1\3"+
    "\1\65\1\0\1\60\1\64\1\0\1\11\1\44\2\67"+
    "\1\0\1\67\1\3\2\67\1\65\1\51\2\70\1\0"+
    "\1\70\1\3\2\70\1\65\1\52\1\65\1\11\2\0"+
    "\2\65\2\0\2\65\2\0\1\11\1\0\6\67\6\70"+
    "\6\0\1\71\1\52\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\37\0\76\0\135\0\174\0\233\0\272\0\331"+
    "\0\370\0\u0117\0\u0136\0\u0155\0\u0174\0\u0193\0\u01b2\0\u01d1"+
    "\0\u01f0\0\u020f\0\u022e\0\u024d\0\u026c\0\u028b\0\u02aa\0\u02c9"+
    "\0\u02e8\0\u0307\0\u0326\0\u0345\0\u0364\0\u0383\0\u03a2\0\u03a2"+
    "\0\u03c1\0\u03e0\0\u03ff\0\u041e\0\u03a2\0\u03a2\0\u03a2\0\u03a2"+
    "\0\u043d\0\u045c\0\u03a2\0\u03a2\0\u047b\0\u03a2\0\u049a\0\u04b9"+
    "\0\u03a2\0\u03a2\0\u04d8\0\u03a2\0\u03a2\0\u03a2\0\u04f7\0\u0516"+
    "\0\u03a2\0\u0535\0\u03a2\0\u0554\0\u03a2\0\u0573\0\u0592\0\u05b1"+
    "\0\u03a2\0\u05d0\0\u03a2\0\u05ef\0\u03a2\0\u03a2\0\u060e\0\u062d"+
    "\0\u03a2\0\u064c\0\u066b\0\u068a\0\u06a9\0\u03a2\0\u03a2\0\u06c8"+
    "\0\u06e7\0\u0706\0\u0725\0\u0744\0\u06c8\0\u03a2\0\u06c8\0\u0763"+
    "\0\u0782\0\u07a1\0\u07c0\0\u07df\0\u07fe\0\u081d\0\u07df\0\u07df"+
    "\0\u083c\0\u085b\0\u03a2\0\u087a\0\u03a2\0\u0899\0\u03a2\0\u03a2"+
    "\0\u08b8\0\u08d7\0\u08f6\0\u03a2\0\u0915\0\u0934\0\u0953\0\u0972"+
    "\0\u0991\0\u09b0\0\u09cf\0\u09ee\0\u0a0d\0\u0a2c\0\u0a4b\0\u0a6a"+
    "\0\u06e7\0\u0a89\0\u03a2\0\u0aa8\0\u0ac7\0\u0ae6\0\u0b05\0\u0b24"+
    "\0\u0b43\0\u0b62\0\u0b81\0\u0ba0\0\u0bbf\0\u0bde\0\u0bfd\0\u03a2"+
    "\0\u0a6a\0\u0c1c\0\u0c3b\0\u0aa8\0\u0c5a\0\u0ac7\0\u0c79\0\u0c98"+
    "\0\u0b05\0\u0b24\0\u0cb7\0\u0cd6\0\u0b43\0\u0cf5\0\u0b62\0\u0d14"+
    "\0\u0d33\0\u0d52\0\u03a2\0\u0d71\0\u0d90\0\u0daf\0\u0dce\0\u0ded"+
    "\0\u0e0c\0\u0e2b\0\u0e4a\0\u0e69\0\u0d52\0\u0e88\0\u0ea7\0\u0ec6"+
    "\0\u0ee5\0\u0d90\0\u0daf\0\u0f04\0\u0dce\0\u0ded\0\u0f23\0\u0e0c"+
    "\0\u0e2b\0\u0f42\0\u0e4a\0\u0e69\0\u0f61\0\u0f80\0\u0f9f\0\u0fbe"+
    "\0\u0fdd\0\u0ffc\0\u0fdd\0\u101b\0\u101b\0\u103a";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\37\1\40\1\41\1\42\1\43\1\37\1\44\1\37"+
    "\1\45\2\37\4\44\2\37\1\44\1\37\1\44\1\37"+
    "\1\46\2\37\1\42\1\47\2\37\1\50\2\0\1\37"+
    "\1\40\1\41\1\42\1\51\1\37\1\52\2\37\1\53"+
    "\1\54\1\55\3\52\2\37\1\52\1\37\1\52\1\56"+
    "\3\37\1\42\4\37\2\0\1\37\1\40\1\41\1\42"+
    "\1\51\1\37\1\57\4\37\4\57\2\37\1\57\1\37"+
    "\1\57\4\37\1\42\4\37\2\0\1\37\1\40\1\41"+
    "\1\42\1\51\1\37\1\60\4\37\4\60\1\61\1\37"+
    "\1\60\1\37\1\60\2\37\1\62\1\37\1\42\4\37"+
    "\2\0\1\37\1\40\1\41\1\42\1\51\1\37\1\63"+
    "\4\37\4\63\2\37\1\63\1\37\1\63\1\64\3\37"+
    "\1\42\4\37\2\0\1\37\1\40\1\41\1\42\1\51"+
    "\1\37\1\52\4\37\4\52\1\65\1\37\1\52\1\37"+
    "\1\52\4\37\1\42\4\37\2\0\1\37\1\66\1\67"+
    "\1\42\1\51\1\37\1\70\4\37\4\70\2\37\1\70"+
    "\1\37\1\70\4\37\1\42\4\37\2\0\1\37\1\40"+
    "\1\41\1\42\1\51\1\37\1\63\4\37\4\63\2\37"+
    "\1\63\1\37\1\63\3\37\1\71\1\42\4\37\2\0"+
    "\1\37\1\40\1\41\1\42\1\51\1\37\1\72\4\37"+
    "\4\72\2\37\1\72\1\37\1\72\4\37\1\42\4\37"+
    "\2\0\1\37\1\40\1\41\1\42\1\51\4\37\1\73"+
    "\16\37\1\42\4\37\2\0\1\37\1\40\1\41\1\42"+
    "\1\51\1\37\1\74\4\37\4\74\2\37\1\74\1\37"+
    "\1\74\4\37\1\42\4\37\2\0\1\37\1\40\1\41"+
    "\1\42\1\51\1\37\1\60\4\37\4\60\1\61\1\37"+
    "\1\60\1\37\1\60\3\37\1\75\1\42\4\37\2\0"+
    "\1\76\1\40\1\41\1\77\1\100\4\76\1\53\16\76"+
    "\1\42\6\76\1\37\1\40\1\41\1\42\1\51\1\101"+
    "\1\102\4\37\4\102\2\37\1\102\1\37\1\102\4\37"+
    "\1\42\1\37\1\103\2\37\2\0\1\37\1\40\1\41"+
    "\1\42\1\51\1\37\1\104\4\37\4\104\2\37\1\104"+
    "\1\37\1\104\3\37\1\105\1\42\2\37\1\106\1\37"+
    "\2\0\1\37\1\40\1\41\1\42\1\51\1\37\1\107"+
    "\4\37\4\107\2\37\1\107\1\37\1\107\4\37\1\42"+
    "\4\37\2\0\1\37\1\40\1\41\1\42\1\51\1\37"+
    "\1\110\4\37\4\110\2\37\1\110\1\37\1\110\1\37"+
    "\1\111\2\37\1\42\2\37\1\106\1\37\2\0\1\112"+
    "\1\40\1\41\1\113\1\114\4\112\1\53\1\115\13\112"+
    "\1\116\1\117\1\42\2\112\1\106\3\112\1\120\1\121"+
    "\1\122\1\123\1\124\3\120\1\125\1\126\16\120\1\42"+
    "\4\120\2\127\1\130\1\40\1\41\1\131\1\132\5\130"+
    "\1\133\15\130\1\42\6\130\1\134\1\121\1\122\1\135"+
    "\1\136\3\134\1\137\1\37\16\134\1\42\4\134\2\140"+
    "\1\141\1\40\1\41\34\141\1\37\1\40\1\41\1\42"+
    "\1\51\5\37\1\142\15\37\1\42\4\37\2\0\1\37"+
    "\1\40\1\41\1\42\1\51\1\143\1\144\4\37\4\144"+
    "\2\37\1\144\1\37\1\144\4\37\1\42\1\37\1\145"+
    "\2\37\2\0\1\37\1\40\1\41\1\42\1\51\1\37"+
    "\1\146\4\37\4\146\2\37\1\146\1\37\1\146\4\37"+
    "\1\42\4\37\2\0\1\37\1\40\1\41\1\42\1\51"+
    "\1\37\1\60\4\37\4\60\1\61\1\37\1\60\1\37"+
    "\1\60\3\37\1\147\1\42\2\37\1\150\1\37\2\0"+
    "\1\151\1\40\1\41\1\152\1\153\4\151\1\154\16\151"+
    "\1\42\6\151\1\37\1\40\1\41\1\42\1\51\1\37"+
    "\1\155\4\37\4\155\2\37\1\155\1\37\1\155\4\37"+
    "\1\42\4\37\2\0\1\37\1\40\1\41\1\42\1\51"+
    "\1\37\1\156\4\37\4\156\1\61\1\37\1\156\1\37"+
    "\1\156\4\37\1\42\4\37\2\0\1\157\1\40\1\41"+
    "\1\160\1\161\4\157\1\37\16\157\1\42\6\157\40\0"+
    "\1\40\40\0\1\42\24\0\1\42\12\0\1\162\1\163"+
    "\37\0\1\44\4\0\4\44\2\0\1\44\1\0\1\44"+
    "\17\0\1\162\40\0\2\52\3\0\4\52\2\0\3\52"+
    "\12\0\1\52\6\0\2\52\3\0\1\52\1\164\2\52"+
    "\2\0\3\52\12\0\1\52\6\0\2\57\3\0\4\57"+
    "\2\0\3\57\12\0\1\57\6\0\2\60\3\0\4\60"+
    "\2\0\3\60\12\0\1\60\6\0\1\63\4\0\4\63"+
    "\2\0\1\63\1\0\1\63\14\0\1\66\43\0\2\70"+
    "\3\0\4\70\2\0\3\70\12\0\1\70\6\0\1\72"+
    "\4\0\4\72\2\0\1\72\1\0\1\72\21\0\2\74"+
    "\3\0\4\74\2\0\3\74\12\0\1\74\1\76\2\0"+
    "\6\76\1\0\16\76\1\0\7\76\2\0\1\77\5\76"+
    "\1\0\16\76\1\42\7\76\2\0\1\76\1\165\4\76"+
    "\1\0\16\76\1\0\6\76\6\0\2\102\3\0\11\102"+
    "\12\0\1\102\6\0\1\104\4\0\4\104\2\0\1\104"+
    "\1\0\1\104\21\0\1\107\4\0\4\107\2\0\1\107"+
    "\1\0\1\107\21\0\1\110\4\0\4\110\2\0\1\110"+
    "\1\0\1\110\13\0\1\112\2\0\6\112\2\0\13\112"+
    "\3\0\2\112\1\0\4\112\2\0\1\113\5\112\2\0"+
    "\13\112\2\0\1\42\2\112\1\0\4\112\2\0\1\112"+
    "\1\166\4\112\2\0\13\112\3\0\2\112\1\0\3\112"+
    "\1\167\2\0\7\167\1\0\13\167\1\0\10\167\1\170"+
    "\2\0\25\170\1\0\6\170\1\0\2\171\1\172\4\0"+
    "\1\173\17\0\1\172\7\0\1\121\1\171\1\172\4\0"+
    "\1\173\17\0\1\172\6\0\1\170\2\0\1\174\24\170"+
    "\1\42\7\170\2\0\1\170\1\175\23\170\1\0\6\170"+
    "\1\130\2\0\25\130\1\0\7\130\2\0\1\131\24\130"+
    "\1\42\7\130\2\0\1\130\1\176\23\130\1\0\6\130"+
    "\1\133\2\0\25\133\1\177\6\133\1\200\2\0\25\200"+
    "\1\0\7\200\2\0\1\201\24\200\1\42\7\200\2\0"+
    "\1\200\1\202\23\200\1\0\6\200\1\141\2\0\34\141"+
    "\1\203\2\0\34\203\6\0\2\144\3\0\5\144\1\0"+
    "\3\144\12\0\1\144\6\0\2\146\3\0\4\146\2\0"+
    "\3\146\12\0\1\146\1\151\2\0\6\151\1\0\16\151"+
    "\1\0\7\151\2\0\1\152\5\151\1\0\16\151\1\42"+
    "\7\151\2\0\1\151\1\204\4\151\1\0\16\151\1\0"+
    "\6\151\6\0\2\155\3\0\4\155\2\0\3\155\12\0"+
    "\1\155\6\0\2\156\3\0\4\156\2\0\3\156\12\0"+
    "\1\156\1\157\2\0\6\157\1\0\16\157\1\0\7\157"+
    "\2\0\1\160\5\157\1\0\16\157\1\42\7\157\2\0"+
    "\1\157\1\205\4\157\1\0\16\157\1\0\6\157\1\162"+
    "\2\0\34\162\5\163\1\206\31\163\6\0\2\52\3\0"+
    "\1\52\1\207\2\52\2\0\3\52\12\0\1\52\1\165"+
    "\2\0\6\165\1\162\16\165\1\162\6\165\1\166\2\0"+
    "\6\166\2\162\13\166\3\162\2\166\1\162\3\166\1\167"+
    "\2\0\7\167\1\210\13\167\1\0\10\167\1\211\2\0"+
    "\6\211\1\212\16\211\1\213\6\211\3\0\1\172\4\0"+
    "\1\173\17\0\1\172\6\0\1\211\2\0\1\214\5\211"+
    "\1\212\16\211\1\215\6\211\1\216\2\0\6\216\1\217"+
    "\16\216\1\220\6\216\1\176\2\0\25\176\1\162\6\176"+
    "\1\177\2\0\7\177\1\221\24\177\1\222\2\0\6\222"+
    "\1\223\16\222\1\224\7\222\2\0\1\225\5\222\1\223"+
    "\16\222\1\226\6\222\1\227\2\0\6\227\1\230\16\227"+
    "\1\231\6\227\1\203\2\0\7\203\1\232\24\203\1\204"+
    "\2\0\6\204\1\162\16\204\1\162\6\204\1\205\2\0"+
    "\6\205\1\162\16\205\1\162\6\205\4\163\1\233\1\206"+
    "\31\163\6\0\2\52\3\0\2\52\1\234\1\52\2\0"+
    "\3\52\12\0\1\52\1\211\2\0\1\212\5\211\1\212"+
    "\16\211\1\235\6\211\3\0\1\213\5\0\1\236\16\0"+
    "\1\213\11\0\1\215\5\0\1\236\16\0\1\215\6\0"+
    "\1\216\2\0\1\217\5\216\1\217\16\216\1\237\6\216"+
    "\1\162\2\0\1\220\5\162\1\240\16\162\1\220\6\162"+
    "\1\222\2\0\1\223\5\222\1\223\16\222\1\241\6\222"+
    "\3\0\1\224\5\0\1\242\16\0\1\224\11\0\1\226"+
    "\5\0\1\242\16\0\1\226\6\0\1\227\2\0\1\230"+
    "\5\227\1\230\16\227\1\243\6\227\1\162\2\0\1\231"+
    "\5\162\1\244\16\162\1\231\6\162\1\203\2\0\1\245"+
    "\6\203\1\232\14\203\1\246\1\245\6\203\6\0\2\52"+
    "\3\0\3\52\1\247\1\250\1\0\2\52\1\247\12\0"+
    "\1\52\1\251\2\0\1\252\5\251\1\253\16\251\1\235"+
    "\7\251\2\0\1\253\24\251\1\236\6\251\1\254\2\0"+
    "\1\255\5\254\1\256\16\254\1\237\7\254\2\0\1\256"+
    "\24\254\1\240\6\254\1\257\2\0\1\260\5\257\1\261"+
    "\16\257\1\241\7\257\2\0\1\261\24\257\1\242\6\257"+
    "\1\262\2\0\1\263\5\262\1\264\16\262\1\243\7\262"+
    "\2\0\1\264\24\262\1\244\6\262\1\203\2\265\1\246"+
    "\6\203\1\232\15\203\1\246\6\203\6\0\2\52\3\0"+
    "\4\52\1\250\1\0\3\52\12\0\1\52\4\0\1\266"+
    "\32\0\1\251\2\0\25\251\1\0\6\251\1\254\2\0"+
    "\25\254\1\162\6\254\1\257\2\0\25\257\1\0\6\257"+
    "\1\262\2\0\25\262\1\162\6\262\1\0\2\265\1\267"+
    "\6\0\1\270\15\0\1\267\12\0\1\271\35\0\1\267"+
    "\6\0\1\270\15\0\1\267\6\0\1\272\2\0\7\272"+
    "\1\0\24\272\4\0\1\273\6\0\3\273\2\0\4\273"+
    "\5\0\1\273\5\0\1\272\2\0\7\272\1\274\24\272"+
    "\3\0\1\275\23\0\1\276\1\275\7\0\2\265\1\276"+
    "\6\0\1\270\15\0\1\276\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4185];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\36\0\2\11\4\1\4\11\2\1\2\11\1\1\1\11"+
    "\2\1\2\11\1\1\3\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\4\1\2\11\6\1\1\11\1\0\10\1"+
    "\1\0\2\1\1\11\1\1\1\11\1\1\2\11\3\1"+
    "\1\11\6\1\1\0\3\1\4\0\1\11\3\1\2\0"+
    "\2\1\1\0\2\1\1\0\1\1\1\11\2\1\1\0"+
    "\10\1\1\0\6\1\1\11\1\1\2\0\2\1\2\0"+
    "\2\1\2\0\1\1\1\0\14\1\6\0\2\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[190];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 58: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 59: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 60: break;
          case 4: 
            { if ("extends".equalsIgnoreCase(yytext().toString())) { yybegin(EXTENDS); return CndTypes.EXTENDS; } 
												  	else if ("itemtype".equalsIgnoreCase(yytext().toString())) { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE; } 
    											  	else { yybegin(OPTIONS); return CndTypes.OPTION; }
            }
          case 61: break;
          case 5: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 62: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 63: break;
          case 7: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 64: break;
          case 8: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 65: break;
          case 9: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 66: break;
          case 10: 
            { return CndTypes.EQUAL;
            }
          case 67: break;
          case 11: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 68: break;
          case 12: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 69: break;
          case 13: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 70: break;
          case 14: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 71: break;
          case 15: 
            { return CndTypes.COLON;
            }
          case 72: break;
          case 16: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            }
          case 73: break;
          case 17: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 74: break;
          case 18: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 75: break;
          case 19: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            }
          case 76: break;
          case 20: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            }
          case 77: break;
          case 21: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            }
          case 78: break;
          case 22: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            }
          case 79: break;
          case 23: 
            { return CndTypes.OPTION;
            }
          case 80: break;
          case 24: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 81: break;
          case 25: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 82: break;
          case 26: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 83: break;
          case 27: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 84: break;
          case 28: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 85: break;
          case 29: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 86: break;
          case 30: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 87: break;
          case 31: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 88: break;
          case 32: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 89: break;
          case 33: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 90: break;
          case 34: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 91: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 92: break;
          case 36: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 93: break;
          case 37: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 94: break;
          case 38: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 95: break;
          case 39: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 96: break;
          case 40: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 97: break;
          case 41: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 98: break;
          case 42: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 99: break;
          case 43: 
            { return CndTypes.NODE_NAME;
            }
          case 100: break;
          case 44: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 101: break;
          case 45: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 102: break;
          case 46: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 103: break;
          case 47: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 104: break;
          case 48: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 105: break;
          case 49: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 106: break;
          case 50: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 107: break;
          case 51: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 108: break;
          case 52: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 109: break;
          case 53: 
            { return CndTypes.COMMENT;
            }
          case 110: break;
          case 54: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 111: break;
          case 55: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 112: break;
          case 56: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 113: break;
          case 57: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 114: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
