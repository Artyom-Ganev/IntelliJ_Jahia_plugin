/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NAMESPACES_OVER = 10;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_TYPE_DONE_BINARY = 38;
  public static final int PROPERTY_ADDENDUM_BINARY = 40;
  public static final int PROPERTY_TYPE_DONE_LONG = 42;
  public static final int PROPERTY_ADDENDUM_LONG = 44;
  public static final int PROPERTY_DEFAULT_BEGIN_LONG = 46;
  public static final int PROPERTY_TYPE_DONE_DOUBLE = 48;
  public static final int PROPERTY_ADDENDUM_DOUBLE = 50;
  public static final int PROPERTY_DEFAULT_BEGIN_DOUBLE = 52;
  public static final int PROPERTY_TYPE_DONE_BOOLEAN = 54;
  public static final int PROPERTY_ADDENDUM_BOOLEAN = 56;
  public static final int PROPERTY_DEFAULT_BEGIN_BOOLEAN = 58;
  public static final int PROPERTY_TYPE_DONE_DATE = 60;
  public static final int PROPERTY_ADDENDUM_DATE = 62;
  public static final int PROPERTY_DEFAULT_BEGIN_DATE = 64;
  public static final int PROPERTY_TYPE_DONE_STRING_TEXT = 66;
  public static final int PROPERTY_ADDENDUM_STRING_TEXT = 68;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_TEXT = 70;
  public static final int PROPERTY_TYPE_DONE_STRING_CHOICELIST = 72;
  public static final int PROPERTY_ADDENDUM_STRING_CHOICELIST = 74;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST = 76;
  public static final int PROPERTY_TYPE_DONE_WEAKREFERENCE = 78;
  public static final int PROPERTY_ADDENDUM_WEAKREFERENCE = 80;
  public static final int PROPERTY_ADDENDUM = 82;
  public static final int PROPERTY_ADDENDUM_ATTR = 84;
  public static final int PROPERTY_DEFAULT_BEGIN = 86;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 88;
  public static final int PROPERTY_PLUS_BEGIN = 90;
  public static final int PROPERTY_PLUS_NAME_DONE = 92;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 94;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 96;
  public static final int PROPERTY_PLUS_COLON_DONE = 98;
  public static final int PROPERTY_PLUS_TYPE_DONE = 100;
  public static final int PROPERTY_PLUS_ADDENDUM = 102;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 104;
  public static final int EXTEND_BEGIN = 106;
  public static final int EXTEND_NAMESPACE_DONE = 108;
  public static final int EXTEND_COLON_DONE = 110;
  public static final int EXTEND_DONE = 112;
  public static final int EXTEND_ITEM_BEGIN = 114;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  5,  5, 18, 18,  5,  5, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 18, 18, 
     5,  5,  5,  5, 37, 37,  5,  5, 38, 38, 39, 39, 40, 40, 41, 41, 
    42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 
    50, 50, 51, 51
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23040 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\1\1\21\1\22\1\23\1\1\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\1\1\34"+
    "\1\35\1\36\2\37\1\40\7\37\1\41\1\42\1\43\1\37\1\44\1\45\2\37\31\1\1\46\121"+
    "\1\1\47\4\1\1\50\1\1\1\51\1\52\1\53\1\54\1\55\1\56\53\1\1\57\41\37\1\1\1\60"+
    "\1\61\1\1\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76"+
    "\1\77\1\100\1\101\3\37\1\102\1\103\1\104\1\105\1\106\1\107\1\110\1\111\1\112"+
    "\1\37\1\113\5\37\3\1\1\114\1\115\1\116\12\37\4\1\1\117\17\37\2\73\1\120\41"+
    "\37\2\1\1\121\1\122\3\37\1\123\100\37\1\124\13\37\1\125\24\37\1\126\1\127"+
    "\1\37\1\130\1\131\1\132\1\133\2\37\1\134\15\37\1\135\5\37\1\136\2\37\1\137"+
    "\16\37\246\1\1\140\20\1\1\141\1\142\25\73\1\143\51\37\2\1\1\144\u0b05\37\1"+
    "\145\1\146\u02fe\37");

  /* The ZZ_CMAP_Y table has 6592 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\3\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\0\1\32\6\0\1\33\1"+
    "\34\1\35\1\36\1\3\1\37\1\35\1\3\5\40\1\41\7\40\1\41\162\40\1\42\1\43\2\40"+
    "\1\42\3\3\1\40\1\44\1\3\1\45\4\3\34\46\1\40\1\47\1\43\1\50\1\3\1\35\1\41\1"+
    "\47\4\40\1\51\24\40\1\51\42\40\1\52\1\46\1\53\47\40\2\54\1\55\10\40\1\41\1"+
    "\37\1\3\1\55\11\40\1\3\1\56\1\57\12\46\1\60\1\61\1\60\2\3\6\40\1\41\1\3\1"+
    "\41\3\3\1\0\1\62\1\56\1\3\2\46\1\63\1\3\12\40\1\64\5\46\2\65\1\66\1\43\1\67"+
    "\30\40\1\70\1\46\1\71\1\46\1\72\1\73\1\74\2\65\1\75\1\76\3\3\1\31\1\77\7\40"+
    "\6\46\1\63\1\55\25\40\1\100\2\46\1\101\3\3\2\65\1\75\7\40\1\64\2\46\1\42\1"+
    "\35\1\3\5\40\1\100\1\102\2\46\2\103\1\104\4\3\6\40\1\103\21\3\1\105\2\40\1"+
    "\106\1\54\1\107\12\3\1\110\6\46\1\111\1\46\15\40\1\100\1\112\4\46\1\103\1"+
    "\46\2\40\1\100\1\113\2\65\1\55\1\40\1\114\1\40\1\115\1\55\1\40\2\76\5\40\1"+
    "\47\1\40\1\45\1\43\1\42\1\112\1\46\2\116\1\117\1\3\1\120\1\3\1\51\1\100\1"+
    "\113\2\65\1\121\1\3\1\56\1\3\1\57\1\55\1\41\1\122\1\76\5\40\1\47\1\40\1\47"+
    "\1\123\1\42\1\73\1\63\1\120\1\116\1\104\1\124\1\3\1\55\1\45\1\3\1\113\2\65"+
    "\1\74\1\125\2\3\1\57\1\55\1\40\2\51\5\40\1\47\1\40\1\47\1\55\1\42\1\112\1"+
    "\46\2\60\1\104\1\44\3\3\1\100\1\113\2\65\1\126\1\3\1\127\1\3\1\57\1\55\1\40"+
    "\2\76\5\40\1\47\1\40\1\47\1\55\1\42\1\112\1\46\2\116\1\104\1\3\1\130\1\3\1"+
    "\51\1\100\1\113\2\65\1\37\3\3\1\131\1\55\1\41\1\43\1\47\1\42\1\123\1\47\1"+
    "\122\1\44\1\41\1\43\2\40\1\42\1\130\1\63\1\130\1\73\1\104\1\44\1\120\3\3\1"+
    "\113\2\65\2\3\1\126\1\3\1\115\1\55\1\40\2\47\5\40\1\47\2\40\1\114\1\42\1\70"+
    "\1\46\2\73\1\104\1\3\1\61\1\132\1\3\1\100\1\113\2\65\4\3\1\133\1\55\1\40\2"+
    "\47\5\40\1\47\2\40\1\55\1\42\1\112\1\46\2\73\1\104\1\3\1\61\1\3\1\35\1\100"+
    "\1\113\2\65\1\123\3\3\1\133\1\55\1\40\2\47\11\40\1\41\1\70\1\46\2\73\1\117"+
    "\1\3\1\120\1\3\1\110\1\100\1\113\2\65\2\3\1\43\1\40\1\130\1\55\3\40\1\41\1"+
    "\43\5\40\1\51\2\40\1\37\1\40\1\41\1\134\1\120\1\46\1\135\2\46\1\3\1\136\2"+
    "\137\1\130\3\3\1\55\13\40\1\77\1\46\1\63\1\56\1\40\1\64\1\46\1\63\2\65\1\66"+
    "\11\3\1\123\1\76\1\45\1\37\1\3\1\40\1\55\1\40\1\55\1\140\1\43\1\55\1\77\1"+
    "\46\1\60\1\101\1\40\1\45\1\46\1\104\2\65\1\66\1\40\10\3\1\44\5\3\1\104\1\3"+
    "\2\65\1\66\2\3\1\141\1\124\1\130\2\40\1\55\10\40\1\44\1\57\4\46\1\73\1\40"+
    "\1\103\2\46\1\57\10\46\1\142\1\3\1\134\16\3\12\40\1\64\4\46\1\143\2\65\1\66"+
    "\1\3\1\40\1\100\1\74\1\100\1\112\1\72\1\46\1\74\1\103\1\67\2\40\1\100\2\46"+
    "\1\102\2\65\1\144\1\104\11\40\1\51\1\3\1\37\12\40\1\41\23\40\1\47\1\42\1\40"+
    "\1\41\1\47\1\42\12\40\1\47\1\42\10\40\1\47\1\42\1\40\1\41\1\47\1\42\3\40\1"+
    "\41\16\40\1\47\1\42\20\40\1\41\1\57\10\3\4\40\4\3\25\40\1\145\1\54\1\146\1"+
    "\55\132\40\1\76\4\40\1\147\5\40\1\41\1\3\22\40\1\41\1\43\1\106\1\54\1\107"+
    "\1\3\3\40\1\47\1\100\1\142\2\3\4\40\1\100\1\142\2\3\4\40\1\100\3\3\3\40\1"+
    "\47\1\150\3\3\15\40\10\46\1\122\1\56\1\125\2\65\1\66\7\3\1\120\1\104\2\65"+
    "\1\66\1\3\26\40\2\3\12\40\1\151\1\3\21\40\1\42\2\3\7\40\1\152\3\46\1\3\3\46"+
    "\2\3\1\113\2\65\7\40\1\42\1\40\1\44\2\3\13\40\1\3\4\46\1\67\1\40\1\104\1\3"+
    "\2\65\1\66\11\3\5\40\1\64\1\46\1\3\15\40\1\103\1\46\1\63\7\46\1\116\2\65\1"+
    "\66\1\3\2\65\1\66\2\3\1\122\2\3\3\54\1\153\20\3\1\46\1\67\13\40\4\46\1\67"+
    "\1\40\1\3\2\65\1\66\3\3\1\120\2\46\3\3\1\143\7\40\1\103\2\46\1\74\2\65\1\75"+
    "\12\40\1\100\3\46\3\3\11\40\5\46\2\3\2\65\1\66\1\55\2\65\1\75\10\40\1\42\24"+
    "\3\1\63\5\46\1\67\1\77\1\100\1\154\1\146\1\3\60\40\11\46\1\111\3\54\1\146"+
    "\1\3\1\46\5\40\1\42\1\40\1\42\11\40\1\42\1\40\1\42\2\40\2\140\7\40\1\42\15"+
    "\40\1\47\1\40\1\45\1\43\1\47\1\40\1\44\1\40\1\43\1\40\1\3\3\40\1\44\1\43\1"+
    "\47\1\40\1\44\2\155\1\156\1\0\6\3\1\157\1\160\3\3\1\122\1\44\4\3\1\44\1\3"+
    "\1\161\1\0\1\62\1\162\1\0\1\37\2\3\1\122\4\3\3\40\1\44\6\163\1\164\5\3\3\46"+
    "\1\165\1\166\1\115\2\46\1\142\3\3\1\35\1\122\1\43\2\40\1\37\1\55\1\42\1\3"+
    "\1\45\1\47\1\51\2\40\1\42\1\40\1\3\1\55\1\42\1\35\4\3\12\40\1\44\212\3\1\167"+
    "\14\54\1\146\5\3\13\40\1\41\13\40\1\41\41\40\1\44\1\122\1\64\1\74\3\3\11\40"+
    "\1\51\1\3\1\37\16\40\1\3\1\122\3\3\1\120\5\40\1\41\2\3\1\40\1\41\1\40\1\41"+
    "\1\40\1\41\1\40\1\41\1\40\1\41\1\40\1\41\1\40\1\41\1\40\1\41\10\46\13\3\1"+
    "\122\64\3\1\170\1\55\6\3\1\55\1\40\1\100\1\46\1\55\1\42\1\40\1\44\1\55\24"+
    "\40\1\41\1\61\2\55\25\40\1\41\1\40\1\3\1\55\11\40\1\42\1\55\26\40\1\41\4\3"+
    "\6\40\1\41\15\3\61\40\1\42\22\3\63\40\1\106\1\54\1\146\12\3\43\40\1\44\20"+
    "\3\13\40\1\42\3\40\1\44\4\40\2\65\1\75\5\3\13\40\1\64\1\153\2\46\1\171\6\40"+
    "\1\54\1\172\24\40\1\104\10\3\1\122\2\40\1\43\31\40\1\76\1\173\1\40\3\54\2"+
    "\40\1\173\1\146\2\54\17\3\1\110\2\40\2\174\1\64\5\40\1\64\1\46\4\3\1\175\1"+
    "\3\15\40\3\3\1\74\14\40\4\46\1\142\2\3\2\65\1\66\1\3\4\46\1\74\1\40\1\122"+
    "\1\127\2\65\1\75\6\40\1\100\1\46\1\104\5\40\1\64\3\46\3\3\7\40\1\44\1\46\13"+
    "\40\1\64\3\46\1\142\2\3\1\122\2\65\1\66\1\3\4\54\2\137\1\176\1\153\12\40\1"+
    "\103\2\46\1\63\2\3\1\64\2\40\1\104\2\65\1\66\1\3\5\40\1\41\1\177\1\54\14\40"+
    "\1\112\1\72\1\67\1\100\1\151\5\3\1\122\1\42\2\40\1\64\1\46\1\43\1\200\2\3"+
    "\1\55\1\41\1\55\1\41\1\55\1\41\2\3\1\40\1\41\1\40\1\41\12\54\1\153\2\54\1"+
    "\146\2\3\24\54\10\40\1\64\1\46\1\63\1\104\2\65\1\66\1\3\51\40\3\3\5\40\1\41"+
    "\1\122\14\40\1\3\33\40\1\42\32\40\1\42\11\3\1\40\1\41\2\3\1\122\1\40\1\3\1"+
    "\201\2\40\1\47\2\40\1\41\1\40\1\45\1\51\1\47\32\40\1\42\7\3\1\122\32\40\1"+
    "\42\4\3\20\40\1\43\15\40\12\3\3\40\1\175\4\46\4\3\1\46\1\111\2\54\1\122\1"+
    "\44\5\3\1\55\6\3\1\126\1\3\1\40\1\47\41\40\1\202\1\3\1\175\2\3\2\65\1\66\1"+
    "\3\1\55\5\40\1\41\1\122\1\55\5\40\1\41\2\3\1\43\25\40\1\41\1\43\1\40\1\43"+
    "\1\40\1\43\1\40\1\43\1\44\1\34\1\203\4\3\1\204\1\3\3\40\1\55\5\40\1\41\4\40"+
    "\1\41\1\51\3\40\1\42\3\40\1\42\10\3\36\40\1\41\21\3\15\40\1\44\41\3\1\124"+
    "\40\3\7\40\1\44\14\40\1\44\3\3\1\107\7\3\7\40\1\173\4\3\6\40\1\41\1\3\12\54"+
    "\1\153\1\3\7\40\1\42\11\40\1\3\2\40\1\55\1\42\12\3\47\40\1\42\2\65\1\66\25"+
    "\3\12\54\2\3\15\54\47\3\115\54\1\153\2\3\5\54\1\146\2\3\2\54\46\3\1\40\1\42"+
    "\1\47\12\40\1\51\1\44\1\76\5\40\1\42\2\3\5\54\1\153\2\3\7\54\1\153\20\3\4"+
    "\54\1\153\1\146\2\3\5\40\1\42\2\3\6\40\1\42\21\3\16\40\1\3\1\43\20\3\1\103"+
    "\1\61\1\3\1\46\1\40\2\55\6\40\1\3\1\63\1\120\10\3\7\40\1\44\7\54\1\107\10"+
    "\3\2\54\1\205\6\54\1\153\6\3\15\40\1\42\2\3\5\40\1\42\2\3\4\40\1\41\3\3\4"+
    "\54\1\146\33\3\22\40\1\44\15\3\14\54\1\153\3\3\14\54\1\153\3\3\1\143\15\40"+
    "\3\46\1\63\7\3\1\113\2\65\3\3\1\110\1\143\13\40\2\46\1\63\1\36\4\3\6\40\1"+
    "\44\1\3\2\65\1\66\1\3\1\143\10\40\1\64\3\46\1\206\2\65\4\3\11\54\1\207\2\3"+
    "\1\143\13\40\1\64\3\46\1\67\1\44\1\167\1\107\2\65\1\210\1\107\10\3\4\54\1"+
    "\211\11\54\22\3\1\54\1\153\1\212\1\211\3\54\1\211\2\54\1\107\1\3\16\54\1\153"+
    "\1\3\2\137\1\213\1\3\1\54\1\205\1\54\2\214\5\54\1\212\1\54\1\212\1\205\1\146"+
    "\2\54\2\214\1\146\1\107\1\110\1\3\1\205\1\54\1\167\1\54\1\107\1\54\1\107\102"+
    "\3\21\54\1\211\2\3\2\137\1\213\51\3\15\54\1\146\2\54\1\107\5\3\1\54\1\146"+
    "\10\3\20\54\2\107\2\3\2\137\1\213\11\3\12\40\1\64\3\46\2\3\2\65\1\66\15\3"+
    "\6\54\1\146\1\205\3\54\1\3\2\137\1\213\131\3\20\54\2\137\1\213\4\3\1\110\60"+
    "\3\16\54\1\107\1\3\33\40\1\173\12\54\1\146\31\3\30\40\1\173\2\54\1\153\4\3"+
    "\61\54\57\3\13\40\1\41\64\3\21\54\1\153\56\3\16\40\1\44\1\3\7\54\1\153\2\137"+
    "\1\213\31\3\7\54\1\146\1\54\1\107\2\3\15\54\1\153\2\3\1\54\3\3\2\137\1\213"+
    "\1\3\1\110\5\54\1\3\1\205\4\54\34\3\21\40\1\44\2\3\1\103\12\46\1\63\3\3\1"+
    "\120\1\143\3\40\30\3\1\42\77\3\32\54\1\153\1\3\3\54\1\107\2\54\1\107\1\3\2"+
    "\54\1\146\1\215\61\3\1\57\1\104\1\57\1\216\1\0\1\217\1\46\1\63\1\57\1\46\7"+
    "\3\1\130\1\104\44\3\1\130\1\142\56\3\25\40\1\47\21\40\1\47\1\35\1\123\1\55"+
    "\1\47\2\40\1\51\1\55\1\40\1\55\17\40\1\51\1\41\1\55\1\40\1\47\1\40\1\47\6"+
    "\40\1\51\1\41\1\40\1\45\1\43\1\40\1\47\124\40\1\42\6\40\1\47\5\40\1\41\7\40"+
    "\1\41\6\40\1\47\7\40\1\47\5\40\1\41\7\40\1\41\6\40\1\47\7\40\1\47\5\40\1\41"+
    "\2\40\1\113\14\65\15\54\1\153\1\110\14\54\1\107\1\3\1\127\3\3\1\107\4\3\1"+
    "\110\1\54\1\205\3\54\24\3\61\54\1\107\2\3\1\54\1\153\12\3\1\40\1\55\6\40\1"+
    "\123\1\76\1\55\1\40\1\41\1\40\1\140\1\3\1\35\1\122\1\140\1\55\1\123\1\76\2"+
    "\140\1\123\1\76\1\41\1\40\1\41\1\40\1\55\1\45\2\40\1\51\4\40\1\3\2\55\1\51"+
    "\4\40\35\3\6\54\1\146\1\3\6\54\1\146\1\3\6\54\1\146\35\3\65\40\1\41\12\3\15"+
    "\40\1\44\2\3\67\40\1\42\140\54\1\146\27\3\7\40\1\42\70\3\1\36\7\3\30\0\40"+
    "\3\74\46\4\3");

  /* The ZZ_CMAP_A table has 576 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\21\1\3\1\1\1\77\1\100\1\2\2\21\4\0\1\3\3\0\1\5\2\0\1\10\1\45\1\46\1\44"+
    "\1\43\1\25\1\42\1\16\1\4\1\62\1\50\1\63\1\64\2\66\2\22\1\51\1\22\1\15\1\0"+
    "\1\6\1\7\1\20\2\0\1\17\1\67\5\17\1\76\2\17\1\75\1\65\6\17\1\23\1\0\1\24\1"+
    "\0\1\17\1\0\1\36\1\37\1\41\1\34\1\35\1\53\1\61\1\11\1\27\1\17\1\54\1\40\1"+
    "\26\1\31\1\32\1\13\1\17\1\33\1\14\1\12\1\52\1\17\1\56\1\30\1\47\1\55\4\0\2"+
    "\21\1\71\2\21\1\70\1\0\4\5\4\0\1\73\2\0\1\21\3\0\1\73\2\0\7\73\1\0\2\73\4"+
    "\0\3\73\3\0\1\73\1\0\1\73\1\0\4\74\1\73\1\0\4\73\1\0\1\72\2\73\1\0\3\73\1"+
    "\0\1\74\2\72\2\73\4\72\1\0\3\73\3\0\1\5\1\0\5\74\1\0\1\74\1\0\2\74\1\0\1\21"+
    "\3\0\3\74\1\0\3\73\1\74\6\60\2\0\1\74\3\73\1\0\1\73\3\74\1\21\1\0\2\74\2\73"+
    "\2\74\1\0\4\74\2\73\2\60\3\73\2\0\2\73\1\74\4\73\3\74\1\73\2\0\2\74\1\73\1"+
    "\74\1\73\5\74\2\0\1\73\1\72\3\73\4\72\6\0\1\72\3\74\1\72\1\74\1\73\2\74\2"+
    "\0\2\60\1\72\3\73\1\72\4\74\2\0\3\74\1\73\4\0\1\74\2\73\2\5\3\0\1\73\1\0\2"+
    "\73\2\0\1\74\2\0\1\73\1\74\3\0\1\5\3\0\1\72\4\0\2\74\2\0\1\74\3\73\1\72\2"+
    "\0\1\72\2\74\2\0\1\74\1\0\1\74\1\0\1\74\3\0\6\57\1\0\1\73\1\0\1\73\1\0\1\74"+
    "\1\0\2\74\3\0\3\74\1\73\2\60\2\74\1\73\1\72\2\0\2\72\2\0\1\70\4\73\1\0\2\74"+
    "\1\73\1\74\1\73\1\0\1\73\2\72\1\0\3\72\1\0\1\74\2\73\1\0\7\70\1\21\2\77\5"+
    "\21\1\70\3\0\1\70\2\0\2\21\7\5\1\0\1\74\4\72\1\74\2\72\2\0\2\72\1\70\3\0\2"+
    "\74\1\0\1\73\3\72\1\74\3\73\1\72\2\73\1\74\1\73\1\5\3\0\2\57\2\72\2\0\1\73"+
    "\1\74\1\73\2\74\2\0\1\73\1\74\2\73\2\0\1\21\1\0\2\5\2\0\3\21\1\0\3\72\1\74"+
    "\1\0\2\60\2\0\1\72\1\0\2\60\1\72\1\0\2\72\1\0\2\72\1\0\2\72\2\57\2\0\1\72"+
    "\2\0\1\72\1\0\2\72\1\0\3\74\4\21\1\74");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\64\0\1\1\2\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\2\21\1\22\1\3"+
    "\1\23\1\3\5\1\1\24\1\25\1\26\1\27\1\30"+
    "\1\26\1\1\1\31\1\26\2\1\1\32\1\26\2\1"+
    "\1\33\1\26\1\1\1\34\1\26\1\35\1\3\12\1"+
    "\1\36\1\1\1\36\2\37\1\3\1\40\1\41\1\42"+
    "\1\43\1\3\1\1\1\44\1\45\1\46\1\3\1\47"+
    "\3\1\1\50\3\0\1\51\2\0\1\52\3\0\1\53"+
    "\23\0\1\54\22\0\1\55\24\0\1\56\1\57\1\60"+
    "\1\61\2\0\1\62\2\0\1\63\1\64\1\65\16\0"+
    "\2\36\1\66\1\0\1\67\13\0\1\70\2\0\1\71"+
    "\1\0\1\72\11\0\1\73\15\0\1\74\10\0\1\75"+
    "\24\0\1\76\1\77\1\100\17\0\1\101\7\0\1\102"+
    "\15\0\1\103\1\104\1\0\1\105\14\0\1\106\1\107"+
    "\26\0\1\76\20\0\1\110\3\0\1\111\15\0\1\76"+
    "\16\0\1\112\11\0\1\111\27\0\1\111\25\0\1\112"+
    "\3\0\1\111\111\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\202\0\303\0\u0104\0\u0145\0\u0186\0\u01c7"+
    "\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e\0\u03cf"+
    "\0\u0410\0\u0451\0\u0492\0\u04d3\0\u0514\0\u0555\0\u0596\0\u05d7"+
    "\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c\0\u075d\0\u079e\0\u07df"+
    "\0\u0820\0\u0861\0\u08a2\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7"+
    "\0\u0a28\0\u0a69\0\u0aaa\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0bef"+
    "\0\u0c30\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d34\0\u0d75\0\u0db6"+
    "\0\u0df7\0\u0d34\0\u0d34\0\u0e38\0\u0e79\0\u0d34\0\u0d34\0\u0eba"+
    "\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0d34\0\u0fff\0\u0d34\0\u0d34"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u0d34\0\u1144\0\u0d34\0\u1185"+
    "\0\u0d34\0\u1185\0\u11c6\0\u1207\0\u1248\0\u1289\0\u12ca\0\u130b"+
    "\0\u134c\0\u0d34\0\u0d34\0\u138d\0\u13ce\0\u0d34\0\u140f\0\u1450"+
    "\0\u0d34\0\u1491\0\u14d2\0\u1513\0\u0d34\0\u1554\0\u1595\0\u15d6"+
    "\0\u0d34\0\u1617\0\u1658\0\u0d34\0\u1699\0\u16da\0\u171b\0\u175c"+
    "\0\u179d\0\u17de\0\u181f\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964"+
    "\0\u19a5\0\u19e6\0\u1a27\0\u1a68\0\u1aa9\0\u0d34\0\u1aea\0\u1b2b"+
    "\0\u0d34\0\u1b6c\0\u0d34\0\u1bad\0\u1bee\0\u1c2f\0\u0d34\0\u1c70"+
    "\0\u1cb1\0\u0d34\0\u1cf2\0\u1d33\0\u1d74\0\u1db5\0\u1df6\0\u1e37"+
    "\0\u0efb\0\u0d34\0\u1e78\0\u0f7d\0\u0d34\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u0d34\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102"+
    "\0\u2143\0\u2184\0\u21c5\0\u1450\0\u2206\0\u2247\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u238c\0\u1658\0\u1658\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u275b\0\u279c\0\u27dd\0\u281e\0\u0d34"+
    "\0\u285f\0\u28a0\0\u1bee\0\u28e1\0\u2922\0\u2963\0\u29a4\0\u29e5"+
    "\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9\0\u2b2a\0\u2b6b\0\u2bac\0\u2bed"+
    "\0\u2c2e\0\u2c6f\0\u2cb0\0\u2cf1\0\u2143\0\u2184\0\u21c5\0\u2206"+
    "\0\u2d32\0\u2d73\0\u22c9\0\u2db4\0\u2df5\0\u238c\0\u23cd\0\u240e"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\u2f7b\0\u2fbc\0\u2ffd"+
    "\0\u303e\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183\0\u31c4\0\u281e"+
    "\0\u285f\0\u3205\0\u3246\0\u3287\0\u32c8\0\u3309\0\u334a\0\u338b"+
    "\0\u33cc\0\u340d\0\u344e\0\u348f\0\u34d0\0\u3511\0\u0d34\0\u3552"+
    "\0\u3593\0\u0d34\0\u35d4\0\u0d34\0\u3615\0\u3656\0\u3697\0\u36d8"+
    "\0\u3719\0\u375a\0\u379b\0\u37dc\0\u381d\0\u0d34\0\u385e\0\u389f"+
    "\0\u38e0\0\u3921\0\u3962\0\u39a3\0\u39e4\0\u3a25\0\u3a66\0\u3aa7"+
    "\0\u3ae8\0\u3b29\0\u3b6a\0\u0d34\0\u3bab\0\u3bec\0\u3c2d\0\u3c6e"+
    "\0\u3caf\0\u3cf0\0\u3d31\0\u3d72\0\u0d34\0\u3db3\0\u3df4\0\u3e35"+
    "\0\u3e76\0\u3eb7\0\u3ef8\0\u3f39\0\u3f7a\0\u3fbb\0\u3ffc\0\u403d"+
    "\0\u407e\0\u40bf\0\u4100\0\u4141\0\u4182\0\u41c3\0\u4204\0\u4245"+
    "\0\u4286\0\u42c7\0\u0d34\0\u0d34\0\u4308\0\u4349\0\u438a\0\u43cb"+
    "\0\u440c\0\u444d\0\u448e\0\u44cf\0\u4510\0\u4551\0\u4592\0\u45d3"+
    "\0\u4614\0\u4655\0\u4696\0\u0d34\0\u46d7\0\u4718\0\u4759\0\u479a"+
    "\0\u47db\0\u42c7\0\u481c\0\u0d34\0\u485d\0\u489e\0\u48df\0\u4920"+
    "\0\u4961\0\u49a2\0\u49e3\0\u4a24\0\u4a65\0\u4aa6\0\u4ae7\0\u4b28"+
    "\0\u4b69\0\u0d34\0\u4759\0\u4baa\0\u0d34\0\u4beb\0\u4c2c\0\u4c6d"+
    "\0\u4cae\0\u4cef\0\u4d30\0\u4d71\0\u4db2\0\u4df3\0\u4e34\0\u4e75"+
    "\0\u4eb6\0\u0d34\0\u0d34\0\u4ef7\0\u4f38\0\u4f79\0\u4fba\0\u4ffb"+
    "\0\u503c\0\u507d\0\u50be\0\u50ff\0\u5140\0\u5181\0\u51c2\0\u5203"+
    "\0\u5244\0\u5285\0\u52c6\0\u5307\0\u5348\0\u5389\0\u53ca\0\u540b"+
    "\0\u544c\0\u548d\0\u54ce\0\u550f\0\u5550\0\u5591\0\u55d2\0\u5613"+
    "\0\u5654\0\u5695\0\u56d6\0\u5717\0\u5758\0\u5799\0\u57da\0\u581b"+
    "\0\u585c\0\u589d\0\u0d34\0\u58de\0\u591f\0\u5960\0\u59a1\0\u59e2"+
    "\0\u5a23\0\u5a64\0\u5aa5\0\u5ae6\0\u5b27\0\u5b68\0\u5ba9\0\u59a1"+
    "\0\u5bea\0\u5c2b\0\u5c6c\0\u5cad\0\u0d34\0\u5cee\0\u5d2f\0\u5d70"+
    "\0\u5db1\0\u5df2\0\u5e33\0\u5e74\0\u5eb5\0\u5ef6\0\u5f37\0\u5f78"+
    "\0\u5fb9\0\u5ffa\0\u603b\0\u607c\0\u60bd\0\u60fe\0\u613f\0\u6180"+
    "\0\u61c1\0\u6202\0\u6243\0\u6284\0\u62c5\0\u6306\0\u6347\0\u6388"+
    "\0\u63c9\0\u640a\0\u644b\0\u648c\0\u64cd\0\u650e\0\u654f\0\u6590"+
    "\0\u65d1\0\u6612\0\u6653\0\u6694\0\u66d5\0\u6716\0\u6757\0\u6798"+
    "\0\u67d9\0\u681a\0\u685b\0\u689c\0\u68dd\0\u691e\0\u695f\0\u69a0"+
    "\0\u69e1\0\u6a22\0\u6a63\0\u6aa4\0\u6ae5\0\u6b26\0\u6b67\0\u6ba8"+
    "\0\u6be9\0\u6c2a\0\u6c6b\0\u6cac\0\u6ced\0\u6d2e\0\u6d6f\0\u6db0"+
    "\0\u6df1\0\u6e32\0\u6e73\0\u0d34\0\u6eb4\0\u6ef5\0\u6f36\0\u0d34"+
    "\0\u6f77\0\u6fb8\0\u6ff9\0\u703a\0\u707b\0\u70bc\0\u70fd\0\u713e"+
    "\0\u717f\0\u71c0\0\u7201\0\u7242\0\u7283\0\u72c4\0\u7305\0\u7346"+
    "\0\u7387\0\u73c8\0\u7409\0\u744a\0\u748b\0\u74cc\0\u750d\0\u754e"+
    "\0\u758f\0\u75d0\0\u7611\0\u7652\0\u7693\0\u76d4\0\u7715\0\u7756"+
    "\0\u7797\0\u77d8\0\u7819\0\u785a\0\u789b\0\u78dc\0\u791d\0\u795e"+
    "\0\u799f\0\u79e0\0\u7a21\0\u7a62\0\u7aa3\0\u7ae4\0\u7b25\0\u7b66"+
    "\0\u7ba7\0\u7be8\0\u7c29\0\u7c6a\0\u7cab\0\u7cec\0\u7d2d\0\u7d6e"+
    "\0\u7daf\0\u7df0\0\u7e31\0\u7e72\0\u7eb3\0\u7ef4\0\u7f35\0\u7f76"+
    "\0\u7fb7\0\u7ff8\0\u8039\0\u807a\0\u80bb\0\u80fc\0\u813d\0\u817e"+
    "\0\u81bf";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\65\1\66\1\67\1\70\1\71\1\65\1\72\14\65"+
    "\1\73\3\65\1\74\5\65\1\75\4\65\1\76\1\77"+
    "\25\65\1\0\5\65\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\1\65\1\100\3\65\4\100\2\65\1\100\6\65"+
    "\14\100\5\65\1\100\2\65\5\100\2\65\1\100\3\65"+
    "\1\100\1\65\1\100\1\65\1\0\1\65\1\100\1\65"+
    "\2\100\1\0\1\70\1\65\1\66\1\67\1\70\3\65"+
    "\1\101\61\65\1\0\5\65\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\5\65\1\102\57\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\70\4\65\1\103\60\65"+
    "\1\0\5\65\1\0\1\70\1\65\1\66\1\67\1\70"+
    "\65\65\1\0\5\65\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\1\65\1\104\3\65\4\104\2\65\1\104\6\65"+
    "\14\104\5\65\1\104\2\65\5\104\2\65\1\104\3\65"+
    "\1\104\1\65\1\104\1\65\1\0\1\65\1\104\1\65"+
    "\2\104\1\0\1\70\1\65\1\66\1\67\1\70\11\65"+
    "\1\105\53\65\1\0\5\65\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\1\65\1\106\3\65\4\106\2\65\1\106"+
    "\6\65\14\106\5\65\1\106\2\65\5\106\2\65\1\106"+
    "\3\65\1\106\1\65\1\106\1\65\1\0\1\65\1\106"+
    "\1\65\2\106\1\0\1\70\1\65\1\66\1\67\1\70"+
    "\20\65\1\107\44\65\1\0\5\65\1\0\1\70\1\65"+
    "\1\66\1\67\1\70\14\65\1\110\5\65\1\111\3\65"+
    "\1\112\3\65\1\113\32\65\1\0\5\65\1\0\1\70"+
    "\1\65\1\66\1\67\1\70\1\65\1\114\3\65\4\114"+
    "\2\65\1\114\6\65\14\114\5\65\1\114\2\65\5\114"+
    "\2\65\1\114\3\65\1\114\1\65\1\114\1\65\1\0"+
    "\1\65\1\114\1\65\2\114\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\11\65\1\115\53\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\70\1\65\1\116\3\65"+
    "\4\116\2\65\1\116\6\65\14\116\5\65\1\116\2\65"+
    "\5\116\2\65\1\116\3\65\1\116\1\65\1\116\1\65"+
    "\1\0\1\65\1\116\1\65\2\116\1\0\1\70\1\117"+
    "\1\66\1\67\1\120\21\117\1\121\43\117\1\0\5\117"+
    "\1\0\1\122\1\65\1\66\1\67\1\70\1\65\1\123"+
    "\3\65\4\123\2\65\1\123\6\65\14\123\5\65\1\123"+
    "\2\65\5\123\2\65\1\123\3\65\1\123\1\65\1\123"+
    "\1\65\1\0\1\65\1\123\1\65\2\123\1\0\1\70"+
    "\1\65\1\66\1\67\1\124\65\65\1\0\5\65\1\0"+
    "\1\124\1\65\1\66\1\67\1\70\10\65\1\125\17\65"+
    "\1\126\2\65\1\127\1\130\15\65\1\131\12\65\1\0"+
    "\5\65\1\0\1\70\1\65\1\66\1\67\1\70\42\65"+
    "\1\132\22\65\1\0\5\65\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\42\65\1\133\22\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\134\65\65\1\0\5\65"+
    "\1\0\1\134\1\65\1\66\1\67\1\70\16\65\1\135"+
    "\25\65\2\135\5\65\2\135\1\65\3\135\1\65\1\135"+
    "\2\65\1\0\5\65\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\42\65\1\136\22\65\1\0\5\65\1\0\1\70"+
    "\1\65\1\66\1\67\1\137\65\65\1\0\5\65\1\0"+
    "\1\137\1\65\1\66\1\67\1\70\16\65\1\140\25\65"+
    "\2\140\5\65\2\140\1\65\3\140\1\65\1\140\2\65"+
    "\1\0\5\65\1\0\1\70\1\65\1\66\1\67\1\70"+
    "\42\65\1\141\22\65\1\0\5\65\1\0\1\70\1\65"+
    "\1\66\1\67\1\142\65\65\1\0\5\65\1\0\1\142"+
    "\1\65\1\66\1\67\1\70\6\65\1\143\40\65\1\144"+
    "\15\65\1\0\5\65\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\42\65\1\145\22\65\1\0\5\65\1\0\1\70"+
    "\1\65\1\66\1\67\1\146\65\65\1\0\5\65\1\0"+
    "\1\146\1\65\1\66\1\67\1\70\4\65\1\147\20\65"+
    "\1\150\37\65\1\0\5\65\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\42\65\1\151\22\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\152\65\65\1\0\5\65"+
    "\1\0\1\152\1\65\1\66\1\67\1\70\4\65\1\153"+
    "\60\65\1\0\5\65\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\42\65\1\154\22\65\1\0\5\65\1\0\1\70"+
    "\1\65\1\66\1\67\1\155\65\65\1\0\5\65\1\0"+
    "\1\155\1\156\1\66\1\67\1\70\64\156\1\65\1\0"+
    "\5\156\1\0\1\70\1\65\1\66\1\67\1\157\5\65"+
    "\1\160\1\65\1\161\1\162\11\65\1\163\1\164\1\65"+
    "\1\165\1\166\3\65\1\167\1\170\13\65\1\171\15\65"+
    "\1\0\5\65\1\0\1\157\1\65\1\66\1\67\1\70"+
    "\1\65\1\172\2\65\1\173\4\172\2\65\1\172\1\65"+
    "\2\174\3\65\14\172\5\65\1\172\2\174\5\172\1\65"+
    "\1\174\1\172\3\174\1\172\1\174\1\172\1\65\1\174"+
    "\1\65\1\172\1\174\2\172\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\1\65\1\175\3\65\4\175\2\65\1\175"+
    "\6\65\14\175\2\65\1\176\2\65\1\175\2\65\5\175"+
    "\2\65\1\175\3\65\1\175\1\65\1\175\1\65\1\0"+
    "\1\65\1\175\1\65\2\175\1\0\1\70\1\65\1\66"+
    "\1\67\1\177\65\65\1\0\5\65\1\0\1\177\1\65"+
    "\1\66\1\67\1\70\1\65\1\200\3\65\4\200\2\65"+
    "\1\200\6\65\14\200\5\65\1\200\2\65\5\200\2\65"+
    "\1\200\3\65\1\200\1\65\1\200\1\65\1\0\1\65"+
    "\1\200\1\65\2\200\1\0\1\70\1\65\1\66\1\67"+
    "\1\70\11\65\1\201\53\65\1\0\5\65\1\0\1\70"+
    "\1\65\1\66\1\67\1\70\1\65\1\202\3\65\4\202"+
    "\2\65\1\202\6\65\14\202\5\65\1\202\2\65\5\202"+
    "\2\65\1\202\3\65\1\202\1\65\1\202\1\65\1\0"+
    "\1\65\1\202\1\65\2\202\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\42\65\1\203\22\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\204\65\65\1\0\5\65"+
    "\1\0\1\204\1\65\1\66\1\67\1\70\1\65\1\205"+
    "\3\65\4\205\2\65\1\205\6\65\14\205\5\65\1\205"+
    "\2\65\5\205\2\65\1\205\3\65\1\205\1\65\1\205"+
    "\1\65\1\0\1\65\1\205\1\65\2\205\1\0\1\70"+
    "\1\65\1\66\1\67\1\70\1\65\1\206\3\65\4\206"+
    "\2\65\1\206\6\65\14\206\5\65\1\206\2\65\5\206"+
    "\2\65\1\206\3\65\1\206\1\65\1\206\1\65\1\0"+
    "\1\65\1\206\1\65\2\206\1\0\1\70\1\65\1\66"+
    "\1\67\1\70\11\65\1\207\53\65\1\0\5\65\1\0"+
    "\1\70\1\65\1\66\1\67\1\70\1\65\1\210\3\65"+
    "\4\210\2\65\1\210\6\65\14\210\5\65\1\210\2\65"+
    "\5\210\2\65\1\210\3\65\1\210\1\65\1\210\1\65"+
    "\1\0\1\65\1\210\1\65\2\210\1\0\1\70\1\65"+
    "\1\66\1\67\1\211\21\65\1\212\43\65\1\0\5\65"+
    "\1\0\1\211\1\65\1\66\1\67\1\70\26\65\1\213"+
    "\1\65\1\214\3\65\1\215\30\65\1\0\5\65\1\0"+
    "\1\70\102\0\1\66\102\0\1\70\74\0\1\70\4\0"+
    "\1\216\106\0\1\217\116\0\1\220\55\0\1\100\3\0"+
    "\4\100\2\0\1\100\6\0\14\100\5\0\1\100\2\0"+
    "\5\100\2\0\1\100\3\0\1\100\1\0\1\100\3\0"+
    "\1\100\1\0\2\100\5\0\1\221\4\0\1\222\67\0"+
    "\1\221\12\0\1\223\71\0\1\224\14\0\1\225\57\0"+
    "\1\224\5\0\1\104\3\0\4\104\2\0\1\104\6\0"+
    "\14\104\5\0\1\104\2\0\5\104\2\0\1\104\3\0"+
    "\1\104\1\0\1\104\3\0\1\104\1\0\2\104\7\0"+
    "\1\106\3\0\4\106\2\0\1\106\1\0\2\106\3\0"+
    "\14\106\5\0\10\106\1\0\10\106\1\0\1\106\1\0"+
    "\4\106\31\0\1\226\104\0\1\227\104\0\1\230\46\0"+
    "\1\114\3\0\4\114\2\0\1\114\6\0\14\114\5\0"+
    "\1\114\2\0\5\114\2\0\1\114\3\0\1\114\1\0"+
    "\1\114\3\0\1\114\1\0\2\114\7\0\1\116\3\0"+
    "\4\116\2\0\1\116\1\0\2\116\3\0\14\116\5\0"+
    "\10\116\1\0\10\116\1\0\1\116\1\0\4\116\5\0"+
    "\1\122\21\0\1\121\52\0\1\122\5\0\1\123\3\0"+
    "\5\123\1\0\1\123\1\0\2\123\3\0\14\123\5\0"+
    "\10\123\1\0\10\123\1\0\1\123\1\0\4\123\5\0"+
    "\1\124\41\0\1\231\32\0\1\124\12\0\1\232\120\0"+
    "\1\233\3\0\1\234\71\0\1\235\2\0\1\236\100\0"+
    "\1\237\103\0\1\240\46\0\1\134\3\0\1\241\70\0"+
    "\1\134\22\0\1\135\25\0\2\135\5\0\2\135\1\0"+
    "\3\135\1\0\1\135\15\0\1\137\3\0\1\242\70\0"+
    "\1\137\16\0\1\243\3\0\1\244\25\0\2\244\5\0"+
    "\2\244\1\0\3\244\1\0\1\244\15\0\1\142\3\0"+
    "\1\245\70\0\1\142\33\0\1\246\103\0\1\247\45\0"+
    "\1\146\3\0\1\250\70\0\1\146\22\0\1\251\25\0"+
    "\2\251\5\0\2\251\1\0\3\251\1\0\1\251\44\0"+
    "\1\252\51\0\1\152\3\0\1\253\70\0\1\152\1\254"+
    "\2\0\5\254\1\255\70\254\3\0\1\155\3\0\1\256"+
    "\70\0\1\155\1\156\3\0\64\156\2\0\5\156\5\0"+
    "\1\157\2\0\1\257\71\0\1\157\27\0\1\260\104\0"+
    "\1\261\77\0\1\262\104\0\1\263\13\0\1\264\57\0"+
    "\1\265\16\0\1\266\62\0\1\267\77\0\1\270\100\0"+
    "\1\271\20\0\1\272\60\0\1\273\104\0\1\274\47\0"+
    "\1\172\3\0\4\172\1\275\1\0\1\172\1\0\2\174"+
    "\2\0\1\276\14\172\5\0\1\172\2\174\5\172\1\0"+
    "\1\174\1\172\3\174\1\172\1\174\1\172\1\0\1\174"+
    "\1\0\1\172\1\174\2\172\2\0\1\277\2\0\76\277"+
    "\5\0\1\174\3\0\4\174\2\0\1\174\1\0\2\174"+
    "\2\0\1\276\14\174\5\0\10\174\1\0\10\174\1\0"+
    "\1\174\1\0\4\174\7\0\1\175\3\0\5\175\1\0"+
    "\1\175\1\0\2\175\3\0\14\175\5\0\10\175\1\0"+
    "\10\175\1\0\1\175\1\0\4\175\5\0\1\177\41\0"+
    "\1\300\32\0\1\177\5\0\1\200\3\0\4\200\2\0"+
    "\1\200\6\0\14\200\5\0\1\200\2\0\5\200\2\0"+
    "\1\200\3\0\1\200\1\0\1\200\3\0\1\200\1\0"+
    "\2\200\7\0\1\202\3\0\4\202\2\0\1\202\1\0"+
    "\2\202\3\0\14\202\5\0\10\202\1\0\10\202\1\0"+
    "\1\202\1\0\4\202\5\0\1\204\3\0\1\301\26\0"+
    "\1\302\41\0\1\204\5\0\1\303\3\0\4\303\1\304"+
    "\1\0\1\303\6\0\14\303\5\0\1\303\2\0\5\303"+
    "\2\0\1\303\3\0\1\303\1\0\1\303\3\0\1\303"+
    "\1\0\2\303\7\0\1\206\3\0\4\206\2\0\1\206"+
    "\6\0\14\206\5\0\1\206\2\0\5\206\2\0\1\206"+
    "\3\0\1\206\1\0\1\206\3\0\1\206\1\0\2\206"+
    "\7\0\1\210\3\0\4\210\2\0\1\210\1\0\2\210"+
    "\3\0\14\210\5\0\10\210\1\0\10\210\1\0\1\210"+
    "\1\0\4\210\5\0\1\211\21\0\1\212\52\0\1\211"+
    "\13\0\1\305\122\0\1\306\101\0\1\307\42\0\1\216"+
    "\2\0\76\216\35\0\1\310\55\0\1\311\100\0\1\312"+
    "\116\0\1\313\104\0\1\314\60\0\1\315\117\0\1\316"+
    "\117\0\1\317\40\0\1\320\117\0\1\321\101\0\1\322"+
    "\77\0\1\323\105\0\1\324\45\0\1\325\74\0\1\325"+
    "\3\0\1\326\74\0\1\326\22\0\1\327\25\0\2\327"+
    "\5\0\2\327\1\0\3\327\1\0\1\327\15\0\1\330"+
    "\74\0\1\330\52\0\1\331\66\0\1\332\43\0\1\333"+
    "\74\0\1\333\22\0\1\334\25\0\2\334\5\0\2\334"+
    "\1\0\3\334\1\0\1\334\70\0\1\335\25\0\1\336"+
    "\74\0\1\336\3\0\1\337\74\0\1\337\3\0\1\340"+
    "\74\0\1\340\34\0\1\341\73\0\1\342\2\0\1\343"+
    "\101\0\1\344\76\0\1\345\107\0\1\346\74\0\1\347"+
    "\115\0\1\350\102\0\1\351\66\0\1\352\75\0\1\353"+
    "\54\0\1\354\120\0\1\355\107\0\1\356\44\0\1\357"+
    "\3\0\4\357\2\0\1\357\6\0\14\357\5\0\1\357"+
    "\2\0\5\357\2\0\1\357\3\0\1\357\1\0\1\357"+
    "\3\0\1\357\1\0\2\357\5\0\1\276\1\0\1\174"+
    "\3\0\4\174\2\0\1\174\1\0\2\174\3\0\14\174"+
    "\5\0\10\174\1\0\10\174\1\0\1\174\1\0\4\174"+
    "\1\0\1\276\1\277\2\0\5\277\1\360\70\277\3\0"+
    "\1\361\74\0\1\361\52\0\1\362\33\0\1\363\3\0"+
    "\4\363\2\0\1\363\6\0\14\363\5\0\1\363\2\0"+
    "\5\363\2\0\1\363\3\0\1\363\1\0\1\363\3\0"+
    "\1\363\1\0\2\363\14\0\1\364\141\0\1\365\74\0"+
    "\1\366\57\0\1\367\107\0\1\370\56\0\1\371\114\0"+
    "\1\372\106\0\1\373\55\0\1\374\115\0\1\375\110\0"+
    "\1\376\76\0\1\377\101\0\1\u0100\102\0\1\u0101\121\0"+
    "\1\u0102\73\0\1\u0103\61\0\1\u0104\57\0\1\331\106\0"+
    "\1\u0105\25\0\2\u0105\5\0\2\u0105\1\0\3\u0105\1\0"+
    "\1\u0105\57\0\1\u0106\67\0\1\u0107\72\0\1\u0108\64\0"+
    "\1\u0109\100\0\1\u010a\122\0\1\u010b\56\0\1\u010c\123\0"+
    "\1\u010d\74\0\1\u010e\121\0\1\u010f\60\0\1\u0110\106\0"+
    "\1\u0111\72\0\1\u0112\62\0\1\u0113\121\0\1\344\50\0"+
    "\1\357\3\0\4\357\2\0\1\357\1\0\2\357\3\0"+
    "\14\357\5\0\10\357\1\0\10\357\1\0\1\357\1\0"+
    "\4\357\14\0\1\u0114\73\0\1\363\3\0\4\363\2\0"+
    "\1\363\1\0\2\363\3\0\14\363\5\0\10\363\1\0"+
    "\10\363\1\0\1\363\1\0\4\363\31\0\1\u0115\107\0"+
    "\1\u0116\74\0\1\u0117\60\0\1\u0118\117\0\1\u0119\63\0"+
    "\1\u011a\1\u011b\114\0\1\u011c\102\0\1\u011d\100\0\1\u011e"+
    "\76\0\1\u011f\107\0\1\u0120\73\0\1\u0121\102\0\1\u0122"+
    "\76\0\1\u0123\67\0\1\u0124\25\0\2\u0124\5\0\2\u0124"+
    "\1\0\3\u0124\1\0\1\u0124\60\0\1\u0125\67\0\1\350"+
    "\101\0\1\u0126\77\0\1\u0127\101\0\1\u0128\100\0\1\u0129"+
    "\71\0\1\u012a\101\0\1\u012b\110\0\1\u012c\71\0\1\u012d"+
    "\116\0\1\u012e\72\0\1\u012f\51\0\1\u0130\120\0\1\u0131"+
    "\100\0\1\u0132\120\0\1\u0133\100\0\1\u0134\75\0\1\u0135"+
    "\65\0\1\u0136\61\0\1\u011b\67\0\1\u0137\132\0\1\u0138"+
    "\100\0\1\u0139\123\0\1\u013a\54\0\1\u013b\112\0\1\u013c"+
    "\67\0\1\u013d\77\0\1\u013e\105\0\1\u013f\71\0\1\u0140"+
    "\106\0\1\u0141\76\0\1\u0142\53\0\1\u0143\101\0\1\u0142"+
    "\122\0\1\u0144\103\0\1\u0145\113\0\1\u0146\102\0\1\u0147"+
    "\56\0\1\u0148\54\0\1\u0149\132\0\1\u014a\70\0\1\u014b"+
    "\107\0\1\u0134\52\0\1\u014c\101\0\1\u014d\101\0\1\u014e"+
    "\70\0\1\u014f\133\0\1\u0150\102\0\1\u0151\42\0\1\u0152"+
    "\21\0\1\u0153\52\0\1\u0152\31\0\1\u0154\122\0\1\u0155"+
    "\75\0\1\u0156\11\0\1\u0157\65\0\1\u010e\43\0\1\u0158"+
    "\126\0\1\u0159\72\0\1\u0126\102\0\1\u015a\56\0\1\u015b"+
    "\126\0\1\u015c\75\0\1\u015d\100\0\1\u015e\65\0\1\u015f"+
    "\25\0\2\u015f\5\0\2\u015f\1\0\3\u015f\1\0\1\u015f"+
    "\45\0\1\u0160\61\0\1\u014c\121\0\1\u0161\46\0\1\u014e"+
    "\3\0\1\u0162\70\0\1\u014e\4\0\1\u0163\4\0\4\u0163"+
    "\1\0\2\u0163\2\0\1\u0163\3\0\15\u0163\4\0\10\u0163"+
    "\2\0\7\u0163\5\0\2\u0163\42\0\1\u0164\52\0\1\u0165"+
    "\71\0\1\u0153\6\0\1\u0166\20\0\1\u0167\5\0\1\u0168"+
    "\36\0\1\u0153\35\0\1\u0169\113\0\1\u016a\11\0\2\u016a"+
    "\37\0\1\u016a\25\0\2\u016a\11\0\2\u016a\1\0\1\u016a"+
    "\47\0\1\u016b\100\0\1\u010e\52\0\1\u016c\126\0\1\u016d"+
    "\72\0\1\u016e\104\0\1\u016f\103\0\1\u0141\60\0\1\u0170"+
    "\117\0\1\u0171\46\0\1\u0161\3\0\1\u0172\70\0\1\u0161"+
    "\35\0\1\u0173\100\0\1\u0174\72\0\1\u0175\62\0\1\u0176"+
    "\122\0\1\u0177\107\0\1\u0178\72\0\1\u010e\54\0\1\u0179"+
    "\20\0\1\u017a\77\0\1\u017b\111\0\1\u017c\46\0\1\u017d"+
    "\113\0\1\u010e\25\0\2\u010e\5\0\2\u010e\1\0\3\u010e"+
    "\1\0\1\u010e\50\0\1\u017e\72\0\1\u017f\111\0\1\u0180"+
    "\71\0\1\u0181\103\0\1\u0182\113\0\1\u0183\11\0\1\u0184"+
    "\1\u0183\1\u0185\66\0\1\u0186\60\0\1\u010e\60\0\1\u010e"+
    "\100\0\1\u0187\76\0\1\u0188\102\0\1\u0189\100\0\1\u018a"+
    "\77\0\1\u018b\116\0\1\u018c\102\0\1\u018d\71\0\1\u018e"+
    "\25\0\2\u018e\10\0\3\u018e\1\0\1\u018e\34\0\1\u018e"+
    "\25\0\2\u018e\11\0\2\u018e\1\0\1\u018e\62\0\1\u018e"+
    "\11\0\1\u018e\47\0\1\u018f\56\0\1\u0190\145\0\1\u0191"+
    "\61\0\1\u0192\101\0\1\u0193\54\0\1\u0194\127\0\1\u0195"+
    "\100\0\1\u0196\124\0\1\u0197\25\0\1\u0198\102\0\1\u0199"+
    "\121\0\1\u019a\77\0\1\u019b\77\0\1\u019c\102\0\1\u019d"+
    "\100\0\1\u019e\100\0\1\u019f\113\0\1\u01a0\11\0\1\u01a0"+
    "\1\u01a1\47\0\1\u01a2\120\0\1\u01a3\75\0\1\u01a4\66\0"+
    "\1\u01a5\73\0\1\u01a6\110\0\1\u01a7\43\0\1\u01a8\21\0"+
    "\1\u01a9\52\0\1\u01a8\22\0\1\u01aa\25\0\2\u01aa\10\0"+
    "\3\u01aa\1\0\1\u01aa\62\0\1\u01aa\11\0\3\u01aa\70\0"+
    "\1\u01ab\52\0\1\u010e\130\0\1\u01ac\60\0\1\u01ad\54\0"+
    "\1\u01ad\115\0\1\u01ae\54\0\1\u01a9\7\0\1\u01af\25\0"+
    "\1\u01b0\11\0\1\u01b1\24\0\1\u01a9\15\0\1\u01b2\120\0"+
    "\1\u01b3\75\0\1\u01b4\62\0\1\u01b5\113\0\1\u01b6\107\0"+
    "\1\u01b7\71\0\1\u01b8\121\0\1\u01b9\11\0\3\u01b9\1\0"+
    "\1\u01b9\43\0\1\u01ba\102\0\1\u01bb\57\0\1\u01bc\127\0"+
    "\1\u01bd\51\0\1\u01be\126\0\1\u01bf\62\0\1\u01c0\25\0"+
    "\2\u01c0\10\0\3\u01c0\1\0\1\u01c0\41\0\1\u01c1\105\0"+
    "\1\u01c2\67\0\1\u01c3\131\0\1\u01c4\61\0\1\u01c5\100\0"+
    "\1\u01c6\60\0\1\u01c7\140\0\1\u01c8\33\0\1\u010e\123\0"+
    "\1\u01c9\5\0\1\u01ca\74\0\1\u01cb\124\0\1\u01cc\42\0"+
    "\1\u01cd\125\0\1\u01ce\11\0\3\u01ce\1\0\1\u01ce\47\0"+
    "\1\u01bb\100\0\1\u01cf\75\0\1\u01d0\101\0\1\u01d1\77\0"+
    "\1\u01d2\121\0\1\u01d3\47\0\1\u01d4\25\0\2\u01d4\10\0"+
    "\3\u01d4\1\0\1\u01d4\26\0\1\u01d5\136\0\1\u01d6\51\0"+
    "\1\u01d7\110\0\1\u01d8\77\0\1\u01d9\64\0\1\u01da\114\0"+
    "\1\u01db\77\0\1\u01dc\61\0\1\u01dd\135\0\1\u01de\71\0"+
    "\1\u01df\62\0\1\u01e0\25\0\2\u01e0\10\0\3\u01e0\1\0"+
    "\1\u01e0\64\0\1\u01e1\40\0\1\u01e2\135\0\1\u01e3\54\0"+
    "\1\u01e4\111\0\1\u01e5\66\0\1\u01e6\25\0\2\u01e6\10\0"+
    "\3\u01e6\1\0\1\u01e6\45\0\1\u01e7\100\0\1\u01e8\60\0"+
    "\1\u01e9\123\0\1\u01ea\77\0\1\u01eb\65\0\1\u01ec\25\0"+
    "\2\u01ec\10\0\3\u01ec\1\0\1\u01ec\53\0\1\u01ed\106\0"+
    "\1\u01ee\66\0\1\u01ef\115\0\1\u01f0\61\0\1\u01f1\110\0"+
    "\1\u01f2\72\0\1\u01f3\67\0\1\u01f4\1\u01f5\62\0\1\u01f6"+
    "\103\0\1\u01f7\112\0\1\u01f8\124\0\1\u01f9\11\0\1\u01f9"+
    "\1\u01fa\104\0\1\u01fb\64\0\1\u01fc\35\0\1\u01fd\122\0"+
    "\1\u01fe\70\0\1\u01ff\25\0\2\u01ff\10\0\3\u01ff\1\0"+
    "\1\u01ff\62\0\1\u01ff\11\0\3\u01ff\66\0\1\u0200\66\0"+
    "\1\u0201\53\0\1\u0202\13\0\1\u0203\11\0\1\u0204\11\0"+
    "\1\u0205\122\0\1\u0206\20\0\1\u0207\114\0\1\u0208\105\0"+
    "\1\u0209\100\0\1\u020a\70\0\1\u0202\104\0\1\u020b\3\0"+
    "\1\u020c\71\0\1\u020d\2\0\1\u020e\103\0\1\u020f\113\0"+
    "\1\u0210\11\0\3\u0210\1\0\1\u0210\46\0\1\u0211\125\0"+
    "\1\u0212\100\0\1\u0213\50\0\1\u0214\61\0\1\u0215\126\0"+
    "\1\u0213\100\0\1\u0216\100\0\1\u0217\62\0\1\u0218\25\0"+
    "\2\u0218\10\0\3\u0218\1\0\1\u0218\52\0\1\u0219\64\0"+
    "\1\u01f4\111\0\1\u021a\55\0\1\u021b\123\0\1\u021c\77\0"+
    "\1\u021d\101\0\1\u021e\53\0\1\u0125\125\0\1\u0212\53\0"+
    "\1\u021f\125\0\1\u0220\124\0\1\u0221\54\0\1\u0222\104\0"+
    "\1\u0223\63\0\1\u01f8\1\u0224\104\0\1\u0225\101\0\1\u0226"+
    "\101\0\1\u021a\57\0\1\u0227\114\0\1\u0228\64\0\1\u0229"+
    "\121\0\1\u022a\143\0\1\u022b\31\0\1\u022c\124\0\1\u022d"+
    "\74\0\1\u021a\67\0\1\u022e\70\0\1\u022f\104\0\1\u020e"+
    "\101\0\1\u0230\102\0\1\u0231\100\0\1\u0232\52\0\1\u0233"+
    "\122\0\1\u0234\57\0\1\u0235\102\0\1\u0236\77\0\4\u0237"+
    "\2\0\1\u0237\2\0\1\u0237\3\0\16\u0237\3\0\21\u0237"+
    "\2\0\5\u0237\11\0\1\u0238\75\0\1\u0239\4\0\4\u0237"+
    "\2\0\1\u0237\2\0\1\u0237\3\0\16\u0237\3\0\21\u0237"+
    "\2\0\5\u0237\14\0\1\u023a\40\0\1\u023b\36\0\4\u023c"+
    "\2\0\1\u023c\2\0\1\u023c\3\0\16\u023c\1\u023d\2\0"+
    "\21\u023c\2\0\5\u023c\35\0\1\u023e\103\0\1\u023f\52\0"+
    "\1\u01f1\4\u023c\2\0\1\u023c\2\0\1\u023c\3\0\16\u023c"+
    "\3\0\21\u023c\2\0\5\u023c\12\0\1\u01f1\142\0\1\u0240"+
    "\66\0\1\u0241\75\0\1\u01f1\57\0\1\u0240\64\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33280];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\64\0\2\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\10\1\2\11\2\1\1\11\2\1\1\11\3\1\1\11"+
    "\3\1\1\11\2\1\1\11\21\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\2\1\1\11\4\1\3\0"+
    "\1\11\2\0\1\11\3\0\1\11\23\0\1\1\22\0"+
    "\1\11\24\0\4\1\2\0\1\1\2\0\3\1\16\0"+
    "\3\1\1\0\1\1\13\0\1\11\2\0\1\11\1\0"+
    "\1\11\11\0\1\11\15\0\1\11\10\0\1\11\24\0"+
    "\1\1\2\11\17\0\1\11\7\0\1\11\15\0\1\11"+
    "\1\1\1\0\1\11\14\0\2\11\26\0\1\1\20\0"+
    "\1\11\3\0\1\1\15\0\1\11\16\0\1\1\11\0"+
    "\1\1\27\0\1\1\25\0\1\11\3\0\1\11\111\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[577];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 75: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 76: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 77: break;
          case 4: 
            { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
            }
          case 78: break;
          case 5: 
            { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
            }
          case 79: break;
          case 6: 
            { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
            }
          case 80: break;
          case 7: 
            { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
            }
          case 81: break;
          case 8: 
            { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
            }
          case 82: break;
          case 9: 
            { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 83: break;
          case 10: 
            { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 84: break;
          case 11: 
            { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 85: break;
          case 12: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
            }
          case 86: break;
          case 13: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
            }
          case 87: break;
          case 14: 
            { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
            }
          case 88: break;
          case 15: 
            { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
            }
          case 89: break;
          case 16: 
            { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
            }
          case 90: break;
          case 17: 
            { yybegin(NODE_TYPE_INHERITANCE);
            }
          case 91: break;
          case 18: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
            }
          case 92: break;
          case 19: 
            { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
            }
          case 93: break;
          case 20: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 94: break;
          case 21: 
            { yybegin(PROPERTY_ADDENDUM_LONG); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 95: break;
          case 22: 
            { yybegin(PROPERTY_ADDENDUM_ATTR);
            }
          case 96: break;
          case 23: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_LONG;
            }
          case 97: break;
          case 24: 
            { yybegin(PROPERTY_ADDENDUM_DOUBLE); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 98: break;
          case 25: 
            { yybegin(PROPERTY_ADDENDUM_BOOLEAN); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 99: break;
          case 26: 
            { yybegin(PROPERTY_ADDENDUM_DATE); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 100: break;
          case 27: 
            { yybegin(PROPERTY_ADDENDUM_STRING_TEXT); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 101: break;
          case 28: 
            { yybegin(PROPERTY_ADDENDUM_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 102: break;
          case 29: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_CHOICELIST;
            }
          case 103: break;
          case 30: 
            { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
            }
          case 104: break;
          case 31: 
            { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
            }
          case 105: break;
          case 32: 
            { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 106: break;
          case 33: 
            { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 107: break;
          case 34: 
            { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 108: break;
          case 35: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 109: break;
          case 36: 
            { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 110: break;
          case 37: 
            { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 111: break;
          case 38: 
            { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 112: break;
          case 39: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
            }
          case 113: break;
          case 40: 
            { yybegin(YYINITIAL); return CndTypes.COMMENT;
            }
          case 114: break;
          case 41: 
            { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
            }
          case 115: break;
          case 42: 
            { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
            }
          case 116: break;
          case 43: 
            { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 117: break;
          case 44: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_TEXT;
            }
          case 118: break;
          case 45: 
            { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 119: break;
          case 46: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_LONG); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 120: break;
          case 47: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_DOUBLE); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 121: break;
          case 48: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DOUBLE;
            }
          case 122: break;
          case 49: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_BOOLEAN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 123: break;
          case 50: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_DATE); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 124: break;
          case 51: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_TEXT); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 125: break;
          case 52: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 126: break;
          case 53: 
            { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
            }
          case 127: break;
          case 54: 
            { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 128: break;
          case 55: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 129: break;
          case 56: 
            { yybegin(PROPERTY_TYPE_DONE_DATE); return CndTypes.PROPERTY_TYPE_DATE;
            }
          case 130: break;
          case 57: 
            { yybegin(PROPERTY_TYPE_DONE_LONG); return CndTypes.PROPERTY_TYPE_LONG;
            }
          case 131: break;
          case 58: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_BOOLEAN;
            }
          case 132: break;
          case 59: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 133: break;
          case 60: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
            }
          case 134: break;
          case 61: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DATE;
            }
          case 135: break;
          case 62: 
            { yybegin(PROPERTY_TYPE_DONE_STRING_TEXT); return CndTypes.PROPERTY_TYPE_STRING_TEXT;
            }
          case 136: break;
          case 63: 
            { yybegin(PROPERTY_TYPE_DONE_DOUBLE); return CndTypes.PROPERTY_TYPE_DOUBLE;
            }
          case 137: break;
          case 64: 
            { yybegin(PROPERTY_TYPE_DONE_BINARY); return CndTypes.PROPERTY_TYPE_BINARY;
            }
          case 138: break;
          case 65: 
            { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
            }
          case 139: break;
          case 66: 
            { yybegin(PROPERTY_TYPE_DONE_BOOLEAN); return CndTypes.PROPERTY_TYPE_BOOLEAN;
            }
          case 140: break;
          case 67: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
            }
          case 141: break;
          case 68: 
            { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
            }
          case 142: break;
          case 69: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
            }
          case 143: break;
          case 70: 
            { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
            }
          case 144: break;
          case 71: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
            }
          case 145: break;
          case 72: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
            }
          case 146: break;
          case 73: 
            { yybegin(PROPERTY_TYPE_DONE_WEAKREFERENCE); return CndTypes.PROPERTY_TYPE_WEAKREFERENCE;
            }
          case 147: break;
          case 74: 
            { yybegin(PROPERTY_TYPE_DONE_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_STRING_CHOICELIST;
            }
          case 148: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
