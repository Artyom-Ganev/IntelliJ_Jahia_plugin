/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int SUPER_TYPES = 10;
  public static final int OPTIONS = 12;
  public static final int EXTENDS = 14;
  public static final int EXTEND_NAMESPACE = 16;
  public static final int EXTEND = 18;
  public static final int ITEMTYPE = 20;
  public static final int PROPERTY = 22;
  public static final int PROPERTY_TYPE = 24;
  public static final int PROPERTY_MASK_OPTION_NAME = 26;
  public static final int PROPERTY_MASK_OPTION = 28;
  public static final int PROPERTY_DEFAULT = 30;
  public static final int PROPERTY_DEFAULT_VALUE = 32;
  public static final int PROPERTY_ATTRIBUTES = 34;
  public static final int PROPERTY_CONSTRAINT = 36;
  public static final int NODE = 38;
  public static final int NODE_NAMESPACE = 40;
  public static final int NODE_NODETYPE = 42;
  public static final int NODE_DEFAULT = 44;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 46;
  public static final int NODE_DEFAULT_VALUE = 48;
  public static final int NODE_ATTRIBUTES = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21"+
    "\1\37\21\21\1\40\1\41\23\21\1\27\1\42\3\21\1\22\1\43\1\42\4\21\1\44\1\45\4"+
    "\0\1\46\1\47\1\27\3\21\2\50\1\27\1\51\1\52\1\0\1\53\5\21\1\54\2\0\1\55\1\56"+
    "\1\57\13\21\1\60\1\46\1\61\1\62\1\55\1\63\1\27\1\64\1\65\3\21\3\0\1\66\12"+
    "\21\1\67\1\0\1\70\1\27\1\55\1\71\3\21\1\54\1\72\1\20\2\21\1\67\1\73\1\74\1"+
    "\75\2\27\3\21\1\76\10\27\1\77\1\30\6\27\1\100\2\0\1\101\1\102\6\21\1\103\2"+
    "\0\1\104\1\21\1\105\1\55\2\42\1\106\1\107\1\110\2\21\1\77\1\111\1\112\1\113"+
    "\1\114\1\64\1\115\1\105\1\55\1\116\1\52\1\106\1\117\1\110\2\21\1\77\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\55\1\127\1\27\1\106\1\37\1\36\2\21"+
    "\1\77\1\130\1\112\1\46\1\131\1\132\1\27\1\105\1\55\1\43\1\27\1\106\1\107\1"+
    "\110\2\21\1\77\1\130\1\112\1\113\1\123\1\133\1\115\1\105\1\55\1\43\1\27\1"+
    "\134\1\135\1\136\1\137\1\140\1\135\1\21\1\141\1\142\1\143\1\144\1\27\1\126"+
    "\1\55\1\27\1\43\1\106\1\32\1\77\2\21\1\77\1\145\1\146\1\147\1\143\1\150\1"+
    "\26\1\105\1\55\2\27\1\151\1\32\1\77\2\21\1\77\1\145\1\112\1\147\1\143\1\150"+
    "\1\34\1\105\1\55\1\152\1\27\1\151\1\32\1\77\4\21\1\153\1\147\1\154\1\64\1"+
    "\27\1\105\1\55\1\27\1\41\1\151\1\21\1\22\1\41\2\21\1\36\1\155\1\22\1\156\1"+
    "\157\1\0\1\160\1\161\1\162\1\27\1\42\5\21\1\163\1\164\1\165\1\101\1\55\1\166"+
    "\4\27\1\167\1\170\1\171\1\42\1\172\1\173\1\163\1\174\1\175\1\176\1\55\1\177"+
    "\4\27\1\132\2\27\1\200\1\55\1\166\1\201\1\202\1\21\1\42\3\21\1\30\1\45\1\0"+
    "\1\147\1\203\1\0\1\45\3\0\1\51\1\204\7\27\5\21\1\54\1\0\1\205\1\55\1\166\1"+
    "\67\1\206\1\207\1\210\1\211\1\21\1\212\1\213\1\55\1\214\4\21\1\37\1\17\5\21"+
    "\1\215\51\21\1\136\1\22\1\136\5\21\1\136\4\21\1\136\1\22\1\136\1\21\1\22\7"+
    "\21\1\136\10\21\1\216\4\27\2\21\2\27\12\21\1\30\1\27\1\42\114\21\1\107\2\21"+
    "\1\217\2\21\1\50\11\21\1\135\1\132\1\27\1\21\1\32\1\220\1\27\2\21\1\220\1"+
    "\27\2\21\1\221\1\27\1\21\1\32\1\222\1\27\6\21\1\223\3\0\1\224\1\225\1\55\1"+
    "\166\3\27\1\226\1\55\1\166\13\21\1\27\5\21\1\227\10\21\1\230\1\27\3\21\1\30"+
    "\1\0\1\2\1\0\1\2\1\126\1\55\3\21\1\230\1\30\1\27\5\21\1\116\2\0\1\57\1\200"+
    "\1\55\1\166\4\27\2\21\1\165\1\2\6\21\1\203\1\101\3\0\1\113\1\55\1\166\1\55"+
    "\1\166\1\44\13\27\1\231\5\21\1\223\1\0\1\231\1\116\1\55\1\166\1\27\1\232\1"+
    "\2\1\27\1\233\3\21\1\104\1\210\1\55\1\71\4\21\1\67\1\0\1\2\1\27\4\21\1\223"+
    "\2\0\1\27\1\55\1\234\1\55\1\71\3\21\1\230\12\27\1\235\2\0\1\236\1\237\1\27"+
    "\30\21\4\0\1\101\2\27\1\100\42\21\2\230\4\21\2\230\1\21\1\240\3\21\1\230\6"+
    "\21\1\32\1\175\1\241\1\30\1\242\1\116\1\21\1\30\1\241\1\30\1\243\1\244\3\27"+
    "\1\245\1\27\1\44\1\132\1\27\1\246\1\247\1\51\1\250\1\43\1\44\2\27\1\21\1\30"+
    "\3\21\1\50\2\27\1\0\1\51\1\251\1\0\1\252\1\27\1\253\1\41\1\155\1\254\1\31"+
    "\1\255\1\21\1\256\1\257\1\260\2\27\5\21\1\132\116\27\5\21\1\22\5\21\1\22\20"+
    "\21\1\30\1\261\1\262\1\27\4\21\1\37\1\17\7\21\1\44\1\27\1\64\2\21\1\22\1\27"+
    "\10\22\4\0\5\27\1\44\72\27\1\263\3\27\1\42\1\212\1\254\1\30\1\42\11\21\1\22"+
    "\1\264\1\42\12\21\1\215\1\257\4\21\1\230\1\42\12\21\1\22\2\27\3\21\1\50\6"+
    "\27\170\21\1\230\11\27\71\21\1\30\6\27\21\21\1\30\10\27\5\21\1\230\41\21\1"+
    "\30\2\21\1\55\1\265\2\27\5\21\1\165\1\100\1\266\3\21\1\64\12\21\1\200\3\27"+
    "\1\44\1\21\1\41\14\21\1\267\1\116\1\27\1\21\1\50\11\27\1\21\1\270\1\271\2"+
    "\21\1\54\2\27\1\132\6\21\1\116\1\27\1\272\5\21\1\223\1\0\1\51\1\27\1\55\1"+
    "\166\2\0\1\272\1\52\1\55\1\71\2\21\1\67\1\176\2\21\1\165\1\0\1\2\1\27\3\21"+
    "\1\30\1\102\5\21\1\54\1\0\1\252\1\44\1\55\1\166\2\27\1\161\1\273\5\21\1\104"+
    "\1\101\1\27\1\271\1\274\1\55\1\166\2\21\1\22\1\275\6\21\1\207\1\276\1\227"+
    "\2\27\1\277\1\21\1\54\1\300\1\27\3\301\1\27\2\22\22\27\4\21\1\54\1\302\1\55"+
    "\1\166\64\21\1\116\1\27\2\21\1\22\1\303\5\21\1\116\40\27\55\21\1\230\15\21"+
    "\1\26\4\27\1\22\1\27\1\303\1\304\1\21\1\77\1\22\1\175\1\305\15\21\1\26\3\27"+
    "\1\303\54\21\1\230\2\27\10\21\1\41\6\21\5\27\1\21\1\30\2\0\2\27\1\101\1\27"+
    "\1\140\2\27\1\257\3\27\1\43\1\32\20\21\1\306\1\246\1\27\1\55\1\166\1\42\2"+
    "\21\1\117\1\42\2\21\1\50\1\307\12\21\1\22\3\41\1\310\1\311\2\27\1\312\1\21"+
    "\1\145\2\21\1\22\2\21\1\313\1\21\1\230\1\21\1\230\4\27\17\21\1\50\10\27\6"+
    "\21\1\30\20\27\1\314\20\27\3\21\1\30\6\21\1\132\5\27\3\21\1\22\2\27\3\21\1"+
    "\50\6\27\3\21\1\230\4\21\1\116\1\21\1\254\5\27\23\21\1\230\1\55\1\166\52\27"+
    "\1\230\1\77\4\21\1\37\1\315\2\21\1\230\25\27\2\21\1\230\1\27\3\21\1\26\10"+
    "\27\7\21\1\307\10\27\1\316\1\100\1\145\1\42\2\21\1\116\1\122\4\27\3\21\1\30"+
    "\20\27\6\21\1\230\1\27\2\21\1\230\1\27\2\21\1\50\21\27\11\21\1\132\66\27\1"+
    "\233\6\21\1\0\1\101\3\27\1\126\1\55\2\27\1\233\5\21\1\0\1\317\2\27\3\21\1"+
    "\132\1\55\1\166\1\233\3\21\1\165\1\0\1\320\1\55\10\27\1\233\5\21\1\54\1\0"+
    "\1\321\1\27\1\55\1\166\42\27\1\161\1\273\72\27\1\161\1\273\56\27\1\161\1\273"+
    "\4\27\5\21\1\54\1\0\1\27\1\55\1\166\14\27\1\161\1\273\64\27\1\161\1\273\42"+
    "\27\55\21\1\22\22\27\14\21\1\50\63\27\5\21\1\22\72\27\7\21\1\132\4\27\1\161"+
    "\1\273\34\27\1\161\1\273\64\27\10\21\1\30\1\27\1\104\4\0\1\101\1\27\1\64\1"+
    "\233\1\21\14\27\1\26\153\27\1\322\1\323\2\0\1\324\1\2\3\27\1\325\22\27\1\326"+
    "\67\27\12\21\1\32\10\21\1\32\1\327\1\330\1\21\1\331\1\145\7\21\1\37\1\332"+
    "\2\32\3\21\1\333\1\175\1\41\1\77\51\21\1\230\3\21\1\77\2\21\1\215\3\21\1\215"+
    "\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\77\3\21\1\77\2\21\1\215\1"+
    "\334\6\55\1\145\3\21\1\167\1\42\1\215\1\335\1\253\1\336\1\167\1\240\1\167"+
    "\2\215\1\125\1\21\1\36\1\21\1\116\1\337\1\36\1\21\1\116\50\27\32\21\1\22\5"+
    "\27\106\21\1\30\1\27\33\21\1\230\74\27\1\124\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1792 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\72\1\3\1\2\6\7\4\0\1\47\3\0\1\6\2\0\1\40\1\65\1\66\1\5\1\71"+
    "\1\53\1\55\1\45\1\4\1\62\1\32\6\62\1\33\1\62\1\54\1\0\1\51\1\37\1\52\2\0\1"+
    "\14\1\15\1\21\1\23\1\24\1\36\1\46\1\35\1\57\1\56\1\61\1\25\1\10\1\13\1\22"+
    "\1\31\1\26\1\20\1\60\1\17\1\27\1\50\1\42\1\12\1\30\1\34\1\63\1\0\1\64\1\0"+
    "\1\56\1\12\1\30\1\34\4\0\6\7\1\70\2\7\1\67\1\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\17\6\1\0\2\11\15\6\1\16\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\1\0\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6"+
    "\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\5\7\12\44\4\0\2\6\1\7\13\6\1"+
    "\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\44\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2"+
    "\0\11\6\3\7\1\6\6\0\2\44\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0"+
    "\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7"+
    "\2\0\2\44\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2"+
    "\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\2\44\2\7\3"+
    "\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\15\0\2\7\2\0\1\7\1\6\1"+
    "\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2"+
    "\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7"+
    "\4\0\6\7\1\0\1\7\7\0\12\43\2\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\1\7\2\44\7"+
    "\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\44\2\0\4\6\2\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7"+
    "\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\2\44\4\7\2\0\3\6\1\0\7\6\2\0\3\7"+
    "\1\67\11\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1"+
    "\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\44\3\0\3\6\3"+
    "\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0"+
    "\6\6\2\0\2\6\13\67\5\7\2\72\5\7\1\67\4\0\1\6\12\0\1\67\2\0\6\7\1\0\1\7\3\0"+
    "\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\1\41\3\6\1\0\3\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\4\0\4\6\3\7\2\6\4\0\1\67\4\0\3\6\1\0\2\7\2\0\3\6\2\44\2\6\4\0\6\7"+
    "\1\0\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\4\6\2\7\6\6\2\43\6\0\4\6\2\7"+
    "\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5"+
    "\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1"+
    "\0\2\7\1\0\3\7\2\0\1\7\2\0\5\7\1\0\2\44\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2"+
    "\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0"+
    "\4\6\1\0\4\6\2\0\2\44\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0"+
    "\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\2\10\1\11\1\12\1\13\1\14\5\15"+
    "\1\16\1\17\1\20\5\21\1\22\4\1\1\23\1\24"+
    "\1\25\6\1\2\26\1\27\14\1\1\30\1\31\1\32"+
    "\16\1\2\33\1\1\1\34\14\1\1\35\1\1\1\36"+
    "\5\37\15\1\1\40\2\41\1\42\1\43\1\44\1\45"+
    "\6\1\1\46\1\1\1\47\1\50\7\1\1\51\7\0"+
    "\1\10\4\15\4\21\66\0\1\33\25\0\3\37\60\0"+
    "\1\10\4\15\4\21\21\0\1\52\14\0\1\53\31\0"+
    "\1\33\32\0\3\37\40\0\1\54\12\0\1\55\4\0"+
    "\1\51\6\0\1\10\4\15\4\21\17\0\1\52\6\0"+
    "\1\53\6\0\1\56\5\0\1\56\21\0\1\57\21\0"+
    "\2\37\6\0\1\60\43\0\1\61\5\0\1\10\1\0"+
    "\1\61\3\15\1\61\3\21\1\62\101\0\2\37\53\0"+
    "\3\15\3\21\10\0\1\63\55\0\2\37\37\0\1\64"+
    "\1\0\2\15\2\21\47\0\1\57\4\0\2\37\10\0"+
    "\1\60\14\0\1\65\1\0\1\66\1\15\1\21\24\0"+
    "\1\56\14\0\2\37\30\0\1\56\14\0\1\57\13\0"+
    "\1\60\301\0\1\57\1\0\1\60\1\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[1166];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u05fe\0\u05fe\0\u05fe"+
    "\0\u05fe\0\u084c\0\u0887\0\u08c2\0\u05fe\0\u05fe\0\u05fe\0\u08fd"+
    "\0\u0938\0\u0973\0\u09ae\0\u09e9\0\u0a24\0\u05fe\0\u05fe\0\u05fe"+
    "\0\u0a5f\0\u0a9a\0\u0ad5\0\u0b10\0\u0b4b\0\u05fe\0\u0b86\0\u0bc1"+
    "\0\u0bfc\0\u0c37\0\u05fe\0\u0c72\0\u05fe\0\u0cad\0\u0ce8\0\u0d23"+
    "\0\u0d5e\0\u0d99\0\u0dd4\0\u05fe\0\u0e0f\0\u05fe\0\u0e4a\0\u0e85"+
    "\0\u0ec0\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7\0\u1022\0\u105d"+
    "\0\u1098\0\u10d3\0\u05fe\0\u05fe\0\u05fe\0\u110e\0\u1149\0\u1184"+
    "\0\u11bf\0\u11fa\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321\0\u135c"+
    "\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u05fe\0\u14f9"+
    "\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b\0\u1696\0\u16d1"+
    "\0\u170c\0\u1747\0\u1782\0\u05fe\0\u17bd\0\u05fe\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u1995\0\u19d0\0\u1a0b"+
    "\0\u1a46\0\u1a81\0\u1abc\0\u1af7\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3"+
    "\0\u1c1e\0\u05fe\0\u1c59\0\u05fe\0\u1c94\0\u05fe\0\u05fe\0\u1ccf"+
    "\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u05fe\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u3f61\0\u3f9c"+
    "\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139\0\u4174"+
    "\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311\0\u434c"+
    "\0\u4387\0\u43c2\0\u43fd\0\u4438\0\u4473\0\u44ae\0\u44e9\0\u4524"+
    "\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686\0\u46c1\0\u46fc"+
    "\0\u4737\0\u4772\0\u05fe\0\u47ad\0\u47e8\0\u4823\0\u485e\0\u4899"+
    "\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36\0\u05fe"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u05fe\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b"+
    "\0\u5196\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333"+
    "\0\u536e\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u369f\0\u56a8"+
    "\0\u56e3\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880"+
    "\0\u58bb\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58"+
    "\0\u5a93\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30"+
    "\0\u5c6b\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u05fe"+
    "\0\u5e08\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5"+
    "\0\u5fe0\0\u601b\0\u05fe\0\u6056\0\u6091\0\u60cc\0\u6107\0\u05fe"+
    "\0\u6142\0\u617d\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df"+
    "\0\u631a\0\u6355\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7"+
    "\0\u64f2\0\u652d\0\u6568\0\u65a3\0\u65de\0\u6619\0\u6654\0\u668f"+
    "\0\u66ca\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867"+
    "\0\u68a2\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f"+
    "\0\u6a7a\0\u6ab5\0\u6af0\0\u6b2b\0\u05fe\0\u6b66\0\u6ba1\0\u6bdc"+
    "\0\u6c17\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4"+
    "\0\u6def\0\u6e2a\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51\0\u6f8c"+
    "\0\u6fc7\0\u7002\0\u703d\0\u7078\0\u05fe\0\u70b3\0\u70ee\0\u7129"+
    "\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6\0\u7301"+
    "\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463\0\u749e\0\u74d9"+
    "\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b\0\u05fe\0\u7676"+
    "\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813\0\u784e"+
    "\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb\0\u7a26"+
    "\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3\0\u7bfe"+
    "\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b\0\u7dd6"+
    "\0\u7e11\0\u7e4c\0\u05fe\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73"+
    "\0\u7fae\0\u7fe9\0\u0938\0\u8024\0\u805f\0\u809a\0\u0a5f\0\u80d5"+
    "\0\u8110\0\u814b\0\u05fe\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272"+
    "\0\u82ad\0\u82e8\0\u8323\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a"+
    "\0\u8485\0\u84c0\0\u84fb\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622"+
    "\0\u865d\0\u8698\0\u86d3\0\u870e\0\u8749\0\u8784\0\u87bf\0\u87fa"+
    "\0\u8835\0\u8870\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2"+
    "\0\u8a0d\0\u8a48\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa"+
    "\0\u8be5\0\u8c20\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82"+
    "\0\u8dbd\0\u8df8\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u8f5a"+
    "\0\u8f95\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132"+
    "\0\u916d\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2"+
    "\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba"+
    "\0\u96f5\0\u9730\0\u976b\0\u97a6\0\u97e1\0\u981c\0\u9857\0\u9892"+
    "\0\u98cd\0\u9908\0\u9943\0\u997e\0\u99b9\0\u99f4\0\u9a2f\0\u9a6a"+
    "\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc\0\u9c07\0\u9c42"+
    "\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf\0\u05fe"+
    "\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7"+
    "\0\u9ff2\0\ua02d\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\ua18f"+
    "\0\ua1ca\0\ua205\0\ua240\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\ua367"+
    "\0\ua3a2\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\ua504\0\ua53f"+
    "\0\ua57a\0\ua5b5\0\ua5f0\0\ua62b\0\ua666\0\ua6a1\0\ua6dc\0\ua717"+
    "\0\u15e5\0\ua752\0\ua78d\0\ua7c8\0\ua803\0\ua83e\0\ua879\0\ua8b4"+
    "\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16\0\uaa51\0\uaa8c"+
    "\0\uaac7\0\uab02\0\u1a0b\0\uab3d\0\uab78\0\uabb3\0\uabee\0\uac29"+
    "\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b\0\uadc6\0\uae01"+
    "\0\uae3c\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63\0\u05fe\0\uaf9e"+
    "\0\uafd9\0\ub014\0\ub04f\0\ub08a\0\ub0c5\0\ub100\0\ub13b\0\ub176"+
    "\0\ub1b1\0\ub1ec\0\ub227\0\ub262\0\ub29d\0\ub2d8\0\ub313\0\ub34e"+
    "\0\ub389\0\ub3c4\0\ub3ff\0\ub43a\0\u1149\0\ub475\0\ub4b0\0\ub4eb"+
    "\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\ub612\0\ub64d\0\ub688\0\ub6c3"+
    "\0\ub6fe\0\ub739\0\ub774\0\ub7af\0\ub7ea\0\ub825\0\ub860\0\ub89b"+
    "\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38\0\uba73"+
    "\0\ubaae\0\ubae9\0\ubb24\0\ubb5f\0\ubb9a\0\ubbd5\0\ubc10\0\ubc4b"+
    "\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\ubd72\0\ubdad\0\ubde8\0\ube23"+
    "\0\ube5e\0\ube99\0\ubed4\0\ubf0f\0\ubf4a\0\ubf85\0\ubfc0\0\u05fe"+
    "\0\ubffb\0\uaf9e\0\uc036\0\uc071\0\uc0ac\0\uc0e7\0\uc122\0\uc15d"+
    "\0\uc198\0\uc1d3\0\uc20e\0\uc249\0\uc284\0\uc2bf\0\uc2fa\0\uc335"+
    "\0\uc370\0\uc3ab\0\uc3e6\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\uc50d"+
    "\0\ub59c\0\uc548\0\uc583\0\uc5be\0\uc5f9\0\uc634\0\uc66f\0\uc6aa"+
    "\0\uc6e5\0\uc720\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\uc847\0\uc882"+
    "\0\uc8bd\0\uc8f8\0\uc933\0\uc96e\0\uc9a9\0\uc9e4\0\uca1f\0\uca5a"+
    "\0\uca95\0\ucad0\0\ucb0b\0\ucb46\0\ucb81\0\ucbbc\0\ucbf7\0\ucc32"+
    "\0\ucc6d\0\ucca8\0\ucce3\0\ucd1e\0\ucd59\0\ucd94\0\ucdcf\0\uce0a"+
    "\0\uce45\0\uce80\0\ucebb\0\ucef6\0\ucf31\0\ucf6c\0\ucfa7\0\ucfe2"+
    "\0\ud01d\0\ud058\0\ud093\0\ud0ce\0\uc6e5\0\ud109\0\ud144\0\ud17f"+
    "\0\ud1ba\0\ud1f5\0\ud230\0\ud26b\0\ud2a6\0\ud2e1\0\ud31c\0\ud357"+
    "\0\uca1f\0\ud392\0\ud3cd\0\ud408\0\ud443\0\ud47e\0\ud4b9\0\ud4f4"+
    "\0\ud52f\0\ud56a\0\ud5a5\0\ud5e0\0\ud61b\0\ud656\0\ud691\0\ud6cc"+
    "\0\ud707\0\ud742\0\ud77d\0\ud7b8\0\ud7f3\0\ud82e\0\ud869\0\ud8a4"+
    "\0\ud8df\0\ud91a\0\ud955\0\ud990\0\ud9cb\0\uda06\0\uda41\0\uda7c"+
    "\0\udab7\0\udaf2\0\udb2d\0\udb68\0\udba3\0\udbde\0\udc19\0\udc54"+
    "\0\udc8f\0\udcca\0\udd05\0\udd40\0\udd7b\0\uddb6\0\uddf1\0\ude2c"+
    "\0\ude67\0\udea2\0\udedd\0\udf18\0\udf53\0\udf8e\0\udfc9\0\ue004"+
    "\0\ue03f\0\ue07a\0\ue0b5\0\ue0f0\0\ue12b\0\ue166\0\ue1a1\0\ue1dc"+
    "\0\ue217\0\ue252\0\ue28d\0\ue2c8\0\ue303\0\ue33e\0\ue379\0\ue3b4"+
    "\0\ue3ef\0\ue42a\0\ue465\0\ue4a0\0\ue4db\0\ue516\0\ue551\0\ue58c"+
    "\0\ue5c7\0\ue602\0\ue63d\0\ue678\0\ue6b3\0\ue6ee\0\ue729\0\ue764"+
    "\0\ue79f\0\ue7da\0\ue815\0\ue850\0\ue88b\0\ue8c6\0\ue901\0\ue93c"+
    "\0\ue977\0\ue9b2\0\ue9ed\0\uea28\0\uea63\0\uea9e\0\uead9\0\ueb14"+
    "\0\ueb4f\0\ueb8a\0\uebc5\0\uec00\0\uec3b\0\uec76\0\uecb1\0\uecec"+
    "\0\ued27\0\ued62\0\ued9d\0\uedd8\0\uee13\0\uee4e\0\uee89\0\ueec4"+
    "\0\ueeff\0\uef3a\0\uef75\0\uefb0\0\uefeb\0\uf026\0\uf061\0\uf09c"+
    "\0\uf0d7\0\uf112\0\uf14d\0\uf188\0\uf1c3\0\uf1fe\0\uf239\0\uf274"+
    "\0\uf2af\0\uf2ea\0\uf325\0\uf360\0\uf39b\0\uf3d6\0\uf411\0\uf44c"+
    "\0\uf487\0\uf4c2\0\uf4fd\0\uf538\0\uf573\0\uf5ae\0\uf5e9\0\uf624"+
    "\0\uf65f\0\uf69a\0\uf6d5\0\uf710\0\uf74b\0\uf786\0\uf7c1\0\uf7fc"+
    "\0\uf837\0\uf872\0\uf8ad\0\uf8e8\0\uf923\0\uf95e\0\uf999\0\uf9d4"+
    "\0\ufa0f\0\ufa4a\0\ufa85\0\ufac0\0\ufafb\0\ufb36\0\ufb71\0\ufbac"+
    "\0\ufbe7\0\ufc22\0\ufc5d\0\ufc98\0\ufcd3\0\ufd0e\0\ufd49\0\ufd84"+
    "\0\ufdbf\0\ufdfa\0\ufe35\0\ufe70\0\ufeab\0\ufee6\0\uff21\0\uff5c"+
    "\0\uff97\0\uffd2\0\ufd49\1\15\0\ufe70\1\110";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[1166];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\1\34\1\35\1\36\1\37\3\33\1\40\1\41"+
    "\1\33\1\42\1\43\5\33\1\44\1\33\1\45\22\33"+
    "\1\36\1\33\1\46\3\33\1\47\1\33\1\41\3\33"+
    "\1\50\4\33\1\0\1\51\1\0\1\33\1\34\1\35"+
    "\1\36\1\52\1\33\1\53\1\33\22\53\2\33\1\53"+
    "\1\54\1\53\1\55\1\56\2\53\3\33\1\53\1\36"+
    "\1\53\1\33\1\57\3\33\4\53\6\33\1\0\1\33"+
    "\1\0\1\33\1\34\1\35\1\36\1\52\1\33\1\60"+
    "\1\33\22\60\2\33\3\60\2\33\2\60\3\33\1\60"+
    "\1\36\1\60\5\33\4\60\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\61\1\33"+
    "\1\62\2\61\1\63\1\64\5\61\1\65\7\61\2\33"+
    "\3\61\2\33\2\61\3\33\1\61\1\36\1\61\1\33"+
    "\1\66\1\33\1\67\1\33\4\61\2\33\1\70\3\33"+
    "\1\0\1\33\1\0\1\33\1\34\1\35\1\36\1\52"+
    "\1\33\1\71\1\33\1\72\2\71\1\73\1\74\5\71"+
    "\1\75\7\71\2\33\3\71\2\33\2\71\3\33\1\71"+
    "\1\36\1\71\5\33\4\71\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\61\1\33"+
    "\1\62\2\61\1\63\1\64\5\61\1\65\7\61\2\33"+
    "\3\61\2\33\2\61\3\33\1\61\1\36\1\61\2\33"+
    "\1\76\1\67\1\33\4\61\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\3\33\1\77\2\33"+
    "\1\100\1\101\5\33\1\102\24\33\1\36\20\33\1\0"+
    "\1\33\1\0\1\33\1\34\1\35\1\36\1\52\32\33"+
    "\1\103\7\33\1\36\20\33\1\0\1\33\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\1\33\1\104\1\33\22\104"+
    "\2\33\3\104\2\33\2\104\3\33\1\104\1\36\1\104"+
    "\5\33\4\104\6\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\61\1\33\22\61\2\33"+
    "\3\61\2\33\2\61\3\33\1\61\1\36\1\61\2\33"+
    "\1\105\1\67\1\33\4\61\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\3\33\1\106\10\33"+
    "\1\107\1\110\1\111\1\33\1\112\3\33\1\113\5\33"+
    "\1\55\7\33\1\36\20\33\1\0\1\33\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\1\114\1\115\1\33\22\115"+
    "\2\33\3\115\2\33\2\115\3\33\1\115\1\36\1\115"+
    "\5\33\4\115\3\33\1\116\2\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\6\33\1\117\1\33"+
    "\1\120\1\121\1\122\1\123\1\124\1\33\1\125\1\33"+
    "\1\126\1\33\1\127\1\33\1\130\4\33\1\131\3\33"+
    "\1\132\4\33\1\36\3\33\1\133\4\33\1\121\2\33"+
    "\1\134\2\33\1\135\1\33\1\0\1\33\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\3\33\1\136\1\137\1\33"+
    "\1\140\1\141\1\33\1\142\1\143\1\144\1\145\1\33"+
    "\1\146\1\33\1\147\1\33\1\150\1\33\1\151\4\33"+
    "\1\152\3\33\1\153\4\33\1\36\7\33\1\137\1\142"+
    "\7\33\1\0\1\33\1\0\1\154\1\34\1\35\1\36"+
    "\1\155\32\154\1\55\1\156\6\154\1\36\3\154\1\157"+
    "\10\154\1\70\1\154\1\135\1\33\1\0\1\154\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\3\33\1\160\1\161"+
    "\1\33\1\162\1\163\1\164\1\165\2\33\1\166\1\167"+
    "\3\33\1\170\2\33\1\171\3\33\1\172\1\173\1\174"+
    "\7\33\1\36\1\175\1\176\5\33\1\161\1\165\7\33"+
    "\1\0\1\33\1\0\1\177\1\34\1\35\1\36\1\200"+
    "\4\177\1\201\14\177\1\202\11\177\1\203\6\177\1\36"+
    "\7\177\1\201\7\177\1\33\1\0\1\177\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\3\33\1\204\1\205\1\33"+
    "\1\206\1\207\1\210\1\211\2\33\1\212\1\213\3\33"+
    "\1\214\2\33\1\215\3\33\1\216\1\217\10\33\1\36"+
    "\1\220\1\176\5\33\1\205\1\211\7\33\1\0\1\33"+
    "\1\0\1\221\1\34\1\35\70\221\1\33\1\34\1\35"+
    "\1\36\1\52\1\222\1\223\1\33\22\223\2\33\3\223"+
    "\2\33\2\223\3\33\1\223\1\36\1\223\5\33\4\223"+
    "\3\33\1\224\2\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\225\1\33\22\225\2\33"+
    "\3\225\2\33\2\225\3\33\1\225\1\36\1\225\5\33"+
    "\4\225\6\33\1\0\1\33\1\0\1\33\1\34\1\35"+
    "\1\36\1\52\1\33\1\61\1\33\22\61\2\33\3\61"+
    "\2\33\2\61\3\33\1\61\1\36\1\61\2\33\1\226"+
    "\1\67\1\33\4\61\4\33\1\227\1\33\1\0\1\33"+
    "\1\0\1\33\1\34\1\35\1\36\1\52\3\33\1\230"+
    "\1\231\2\33\1\232\1\33\1\233\2\33\1\234\7\33"+
    "\1\235\5\33\1\236\7\33\1\36\1\237\6\33\1\231"+
    "\1\233\7\33\1\0\1\33\1\0\1\33\1\34\1\35"+
    "\1\36\1\52\1\33\1\240\1\33\22\240\2\33\3\240"+
    "\2\33\2\240\3\33\1\240\1\36\1\240\5\33\4\240"+
    "\6\33\1\0\1\33\1\0\1\33\1\34\1\35\1\36"+
    "\1\52\1\33\1\241\1\33\22\241\2\33\3\241\2\33"+
    "\2\241\3\33\1\241\1\36\1\241\3\33\1\67\1\33"+
    "\4\241\6\33\1\0\1\33\1\0\1\33\1\34\1\35"+
    "\1\36\1\52\3\33\1\242\1\243\2\33\1\244\1\33"+
    "\1\245\2\33\1\246\7\33\1\247\15\33\1\36\1\250"+
    "\6\33\1\243\1\245\7\33\1\0\1\33\75\0\1\34"+
    "\74\0\1\36\43\0\1\36\27\0\1\251\1\252\76\0"+
    "\1\253\45\0\1\253\32\0\1\254\75\0\1\255\65\0"+
    "\1\256\75\0\1\257\64\0\1\260\64\0\1\251\74\0"+
    "\31\53\2\0\2\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\5\0\5\53\5\0\1\53\10\0\11\53\1\261"+
    "\17\53\2\0\2\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\5\0\5\53\5\0\1\53\10\0\31\60\2\0"+
    "\2\60\1\0\1\60\1\0\1\60\1\0\1\60\5\0"+
    "\5\60\5\0\1\60\10\0\31\61\2\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\5\0\5\61\5\0"+
    "\1\61\10\0\3\61\1\262\25\61\2\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\5\0\1\61\1\262"+
    "\3\61\5\0\1\61\10\0\14\61\1\263\14\61\2\0"+
    "\2\61\1\0\1\61\1\0\1\61\1\0\1\61\5\0"+
    "\5\61\5\0\1\61\10\0\7\61\1\264\21\61\2\0"+
    "\2\61\1\0\1\61\1\0\1\61\1\0\1\61\5\0"+
    "\5\61\5\0\1\61\10\0\12\61\1\265\16\61\2\0"+
    "\2\61\1\0\1\61\1\0\1\61\1\0\1\61\5\0"+
    "\5\61\5\0\1\61\10\0\31\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\5\71\5\0"+
    "\1\71\10\0\3\71\1\266\25\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\1\71\1\266"+
    "\3\71\5\0\1\71\10\0\14\71\1\267\14\71\2\0"+
    "\2\71\1\0\1\71\1\0\1\71\1\0\1\71\5\0"+
    "\5\71\5\0\1\71\10\0\7\71\1\270\21\71\2\0"+
    "\2\71\1\0\1\71\1\0\1\71\1\0\1\71\5\0"+
    "\5\71\5\0\1\71\10\0\12\71\1\271\16\71\2\0"+
    "\2\71\1\0\1\71\1\0\1\71\1\0\1\71\5\0"+
    "\5\71\5\0\1\71\13\0\1\272\45\0\1\272\35\0"+
    "\1\273\65\0\1\274\75\0\1\275\60\0\31\104\2\0"+
    "\2\104\1\0\1\104\1\0\1\104\1\0\1\104\5\0"+
    "\5\104\5\0\1\104\26\0\1\276\70\0\1\277\2\0"+
    "\1\300\76\0\1\301\65\0\1\302\57\0\1\303\2\0"+
    "\1\304\42\0\1\303\33\0\1\305\3\0\1\306\54\0"+
    "\31\115\2\0\2\115\1\0\3\115\1\0\1\115\3\0"+
    "\1\115\1\0\5\115\5\0\1\115\16\0\1\307\67\0"+
    "\1\310\10\0\1\311\34\0\1\310\32\0\1\312\67\0"+
    "\1\313\7\0\1\314\57\0\1\315\12\0\1\316\32\0"+
    "\1\315\27\0\1\317\5\0\1\320\12\0\1\321\51\0"+
    "\1\322\5\0\1\323\1\0\1\324\70\0\1\325\63\0"+
    "\1\326\4\0\1\327\63\0\1\330\2\0\1\331\42\0"+
    "\1\330\24\0\1\332\45\0\1\332\37\0\1\333\57\0"+
    "\1\334\10\0\1\335\1\0\1\336\32\0\1\334\23\0"+
    "\1\337\104\0\1\340\77\0\1\341\64\0\1\342\1\343"+
    "\1\0\1\344\2\0\1\345\67\0\1\346\3\0\1\347"+
    "\66\0\1\350\70\0\1\351\74\0\1\352\57\0\1\353"+
    "\45\0\1\353\31\0\1\354\41\0\1\354\36\0\1\355"+
    "\73\0\1\356\67\0\1\357\50\0\1\154\3\0\33\154"+
    "\2\0\6\154\1\0\3\154\1\0\10\154\1\0\1\154"+
    "\3\0\1\154\1\0\1\154\3\0\1\360\32\154\2\0"+
    "\6\154\1\0\3\154\1\0\10\154\1\0\1\154\3\0"+
    "\1\154\1\0\1\361\2\0\35\361\1\0\23\361\1\0"+
    "\6\361\14\0\1\362\12\0\1\363\56\0\1\364\3\0"+
    "\1\365\12\0\1\366\13\0\1\367\46\0\1\370\63\0"+
    "\1\371\1\0\1\372\11\0\1\373\65\0\1\374\71\0"+
    "\1\375\1\376\72\0\1\377\63\0\1\u0100\106\0\1\u0101"+
    "\63\0\1\u0102\63\0\1\u0103\45\0\1\u0103\27\0\1\u0104"+
    "\102\0\1\u0105\46\0\1\177\3\0\43\177\1\0\17\177"+
    "\2\0\1\177\1\0\1\177\3\0\1\u0106\42\177\1\0"+
    "\17\177\2\0\1\177\1\0\1\177\3\0\13\177\1\u0107"+
    "\27\177\1\0\17\177\2\0\1\177\1\0\1\177\3\0"+
    "\23\177\1\u0108\17\177\1\0\17\177\2\0\1\177\1\0"+
    "\1\203\2\0\1\u0109\43\203\1\u0109\17\203\2\u0109\1\203"+
    "\1\u0109\14\0\1\u010a\12\0\1\u010b\56\0\1\u010c\3\0"+
    "\1\u010d\12\0\1\u010e\13\0\1\u010f\46\0\1\u0110\63\0"+
    "\1\u0111\1\0\1\u0112\11\0\1\u0113\65\0\1\u0114\71\0"+
    "\1\u0115\1\u0116\72\0\1\u0117\63\0\1\u0118\106\0\1\u0119"+
    "\63\0\1\u011a\63\0\1\u011b\45\0\1\u011b\27\0\1\u011c"+
    "\102\0\1\u011d\46\0\1\221\2\0\70\221\6\0\31\223"+
    "\2\0\2\223\1\0\1\223\1\0\1\223\1\0\1\223"+
    "\3\0\1\223\1\0\5\223\5\0\1\223\10\0\31\225"+
    "\2\0\2\225\1\0\1\225\1\0\1\225\1\0\1\225"+
    "\5\0\5\225\5\0\1\225\16\0\1\u011e\12\0\1\u011f"+
    "\56\0\1\u0120\32\0\1\u0121\41\0\1\u0122\11\0\1\u0123"+
    "\56\0\1\u0124\101\0\1\u0125\70\0\1\u0126\76\0\1\u0127"+
    "\54\0\31\240\2\0\2\240\1\0\1\240\1\0\1\240"+
    "\1\0\1\240\5\0\5\240\5\0\1\240\10\0\31\241"+
    "\2\0\2\241\1\0\1\241\1\0\1\241\1\0\1\241"+
    "\5\0\5\241\5\0\1\241\16\0\1\u0128\12\0\1\u0129"+
    "\56\0\1\u012a\32\0\1\u012b\41\0\1\u012c\11\0\1\u012d"+
    "\56\0\1\u012e\101\0\1\u012f\70\0\1\u0130\76\0\1\u0131"+
    "\46\0\1\251\2\0\70\251\5\252\1\u0132\65\252\12\0"+
    "\1\u0133\104\0\1\u0134\74\0\1\u0135\62\0\1\u0136\41\0"+
    "\1\u0136\35\0\1\u0137\66\0\1\u0138\61\0\11\53\1\u0139"+
    "\17\53\2\0\2\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\5\0\5\53\5\0\1\53\10\0\4\61\1\u013a"+
    "\24\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\20\61\1\u013b"+
    "\10\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\10\61\1\u013c"+
    "\20\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\2\61\1\u013c\2\61\5\0\1\61\10\0"+
    "\15\61\1\u013d\13\61\2\0\2\61\1\0\1\61\1\0"+
    "\1\61\1\0\1\61\5\0\5\61\5\0\1\61\10\0"+
    "\4\71\1\u013e\24\71\2\0\2\71\1\0\1\71\1\0"+
    "\1\71\1\0\1\71\5\0\5\71\5\0\1\71\10\0"+
    "\20\71\1\u013f\10\71\2\0\2\71\1\0\1\71\1\0"+
    "\1\71\1\0\1\71\5\0\5\71\5\0\1\71\10\0"+
    "\10\71\1\u0140\20\71\2\0\2\71\1\0\1\71\1\0"+
    "\1\71\1\0\1\71\5\0\2\71\1\u0140\2\71\5\0"+
    "\1\71\10\0\15\71\1\u0141\13\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\5\71\5\0"+
    "\1\71\14\0\1\u0142\106\0\1\u0143\62\0\1\u0144\41\0"+
    "\1\u0144\35\0\1\u0145\66\0\1\u0146\66\0\1\u0147\73\0"+
    "\1\u0148\75\0\1\u0149\111\0\1\u014a\52\0\1\u014b\41\0"+
    "\1\u014b\42\0\1\u014c\64\0\1\u014d\70\0\1\u014e\62\0"+
    "\1\u014f\75\0\1\u0150\101\0\1\u0151\70\0\1\u0152\120\0"+
    "\1\u0153\36\0\1\u0154\101\0\1\u0155\107\0\1\u0156\53\0"+
    "\1\u0157\100\0\1\u0158\67\0\1\u0159\1\0\1\u015a\65\0"+
    "\1\u015b\102\0\1\u015c\64\0\1\u015d\64\0\1\u015e\102\0"+
    "\1\u015f\60\0\1\u0160\45\0\1\u0160\34\0\1\u0161\70\0"+
    "\1\u0162\100\0\1\u0163\61\0\1\u0164\66\0\1\u0165\105\0"+
    "\1\u0166\62\0\1\u0167\73\0\1\u0168\101\0\1\u0169\66\0"+
    "\1\u016a\73\0\1\u016b\72\0\1\u016c\103\0\1\u016d\56\0"+
    "\1\u016e\65\0\1\u016f\113\0\1\u0165\54\0\1\u0170\2\0"+
    "\1\u0171\41\0\1\u0171\22\0\1\u0172\16\0\1\u0173\74\0"+
    "\1\u0174\54\0\1\u0175\103\0\1\u0176\66\0\1\u0177\66\0"+
    "\1\u0178\76\0\1\u0179\52\0\1\360\2\0\1\251\33\360"+
    "\2\251\6\360\1\251\3\360\1\251\10\360\1\251\1\360"+
    "\3\251\1\360\1\251\1\361\2\0\35\361\1\u017a\23\361"+
    "\1\0\6\361\13\0\1\u017b\104\0\1\u017c\56\0\1\u017d"+
    "\5\0\1\u017e\3\0\1\u017f\33\0\1\u017d\37\0\1\u0180"+
    "\101\0\1\u0181\52\0\1\u0182\105\0\1\u0183\7\0\1\u0184"+
    "\50\0\1\u0185\100\0\1\u0186\67\0\1\u0187\75\0\1\u0188"+
    "\72\0\1\u0189\70\0\1\u018a\62\0\1\u018b\20\0\1\u018c"+
    "\62\0\1\u018d\75\0\1\u018e\57\0\1\u018f\10\0\1\u0190"+
    "\34\0\1\u018f\36\0\1\u0191\1\u0192\67\0\1\u0193\71\0"+
    "\1\u0194\52\0\1\u0106\2\0\1\251\43\u0106\1\251\17\u0106"+
    "\2\251\1\u0106\1\251\1\177\3\0\20\177\1\u0195\22\177"+
    "\1\0\17\177\2\0\1\177\1\0\1\177\3\0\20\177"+
    "\1\u0196\22\177\1\0\17\177\2\0\1\177\1\0\1\u0109"+
    "\2\0\35\u0109\1\u0197\32\u0109\13\0\1\u0198\104\0\1\u0199"+
    "\56\0\1\u019a\5\0\1\u019b\3\0\1\u019c\33\0\1\u019a"+
    "\37\0\1\u019d\101\0\1\u019e\52\0\1\u019f\105\0\1\u01a0"+
    "\7\0\1\u01a1\50\0\1\u01a2\100\0\1\u01a3\67\0\1\u01a4"+
    "\75\0\1\u01a5\72\0\1\u01a6\70\0\1\u01a7\62\0\1\u01a8"+
    "\20\0\1\u01a9\62\0\1\u01aa\75\0\1\u01ab\57\0\1\u01ac"+
    "\10\0\1\u01ad\34\0\1\u01ac\36\0\1\u01ae\1\u01af\67\0"+
    "\1\u01b0\71\0\1\u01b1\65\0\1\u01b2\104\0\1\u01b3\56\0"+
    "\1\u01b4\45\0\1\u01b4\26\0\1\u01b5\101\0\1\u01b6\67\0"+
    "\1\u01b7\71\0\1\u01b8\41\0\1\u01b8\22\0\1\u01b9\20\0"+
    "\1\u01ba\63\0\1\u01bb\70\0\1\u01bc\65\0\1\u01bd\104\0"+
    "\1\u01be\56\0\1\u01bf\45\0\1\u01bf\26\0\1\u01c0\101\0"+
    "\1\u01c1\67\0\1\u01c2\71\0\1\u01c3\41\0\1\u01c3\22\0"+
    "\1\u01c4\20\0\1\u01c5\63\0\1\u01c6\70\0\1\u01c7\52\0"+
    "\4\252\1\u01c8\1\u0132\65\252\11\0\1\u01c9\45\0\1\u01c9"+
    "\23\0\1\u01ca\111\0\1\u01cb\62\0\1\u01cc\77\0\1\u01cd"+
    "\72\0\1\u01ce\54\0\23\53\1\u01cf\5\53\2\0\2\53"+
    "\1\0\1\53\1\0\1\53\1\0\1\53\5\0\5\53"+
    "\5\0\1\53\10\0\3\61\1\u01d0\25\61\2\0\2\61"+
    "\1\0\1\61\1\0\1\61\1\0\1\61\5\0\1\61"+
    "\1\u01d0\3\61\5\0\1\61\10\0\21\61\1\u01d1\7\61"+
    "\2\0\2\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\5\0\5\61\5\0\1\61\10\0\11\61\1\u01d2\17\61"+
    "\2\0\2\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\5\0\5\61\5\0\1\61\10\0\16\61\1\u01d3\12\61"+
    "\2\0\2\61\1\0\1\61\1\0\1\61\1\0\1\61"+
    "\5\0\5\61\5\0\1\61\10\0\3\71\1\u01d4\25\71"+
    "\2\0\2\71\1\0\1\71\1\0\1\71\1\0\1\71"+
    "\5\0\1\71\1\u01d4\3\71\5\0\1\71\10\0\21\71"+
    "\1\u01d5\7\71\2\0\2\71\1\0\1\71\1\0\1\71"+
    "\1\0\1\71\5\0\5\71\5\0\1\71\10\0\11\71"+
    "\1\u01d6\17\71\2\0\2\71\1\0\1\71\1\0\1\71"+
    "\1\0\1\71\5\0\5\71\5\0\1\71\10\0\16\71"+
    "\1\u01d7\12\71\2\0\2\71\1\0\1\71\1\0\1\71"+
    "\1\0\1\71\5\0\5\71\5\0\1\71\13\0\1\u01d8"+
    "\45\0\1\u01d8\42\0\1\u01d9\62\0\1\u01da\77\0\1\u01db"+
    "\62\0\1\u01dc\75\0\1\u01dd\71\0\1\u01de\41\0\1\u01de"+
    "\23\0\1\u01df\45\0\1\u01df\27\0\1\u01e0\75\0\1\u01e1"+
    "\75\0\1\u01e2\101\0\1\u01e3\51\0\1\u01e4\106\0\1\u0160"+
    "\62\0\1\u01e5\103\0\1\u01e6\56\0\1\325\45\0\1\325"+
    "\32\0\1\u01e7\110\0\1\u01e8\61\0\1\u01e9\72\0\1\u01ea"+
    "\70\0\1\u01eb\61\0\1\u01ec\45\0\1\u01ec\34\0\1\u01ed"+
    "\75\0\1\u01ee\63\0\1\u01ef\66\0\1\u01f0\45\0\1\u01f0"+
    "\61\0\1\u0160\50\0\1\u01f1\107\0\1\u01f2\17\0\1\u01f2"+
    "\46\0\1\u0160\61\0\1\u01f3\107\0\1\u01f4\17\0\1\u01f4"+
    "\35\0\1\u01f5\75\0\1\u01f6\72\0\1\u01f7\111\0\1\u0165"+
    "\50\0\1\u01f8\70\0\1\u01f9\61\0\1\u01fa\45\0\1\u01fa"+
    "\32\0\1\u01fb\67\0\1\u01fc\71\0\1\u01fd\110\0\1\u01fe"+
    "\64\0\1\u01ff\71\0\1\u0200\101\0\1\u0201\54\0\1\u0202"+
    "\103\0\1\u0203\107\0\1\u0204\17\0\1\u0204\31\0\1\u01f7"+
    "\62\0\1\u0205\130\0\1\u01f5\65\0\1\u0206\17\0\1\u0206"+
    "\34\0\1\u0207\66\0\1\u0208\72\0\1\u0209\77\0\1\u020a"+
    "\72\0\1\u020b\56\0\1\u020c\75\0\1\u020d\101\0\1\u020e"+
    "\77\0\1\u020f\72\0\1\u0210\70\0\1\u0211\65\0\1\u0212"+
    "\74\0\1\u0213\66\0\1\u0214\41\0\1\u0214\32\0\1\u0215"+
    "\71\0\1\u0216\104\0\1\u0217\71\0\1\u020d\64\0\1\u0218"+
    "\70\0\1\u0219\62\0\1\u021a\101\0\1\u021b\76\0\1\u021c"+
    "\67\0\1\u021d\76\0\1\u018a\64\0\1\u021e\41\0\1\u021e"+
    "\12\0\1\177\3\0\4\177\1\u021f\36\177\1\0\17\177"+
    "\2\0\1\177\1\0\1\177\3\0\14\177\1\u0220\26\177"+
    "\1\0\17\177\2\0\1\177\24\0\1\u0221\66\0\1\u0222"+
    "\72\0\1\u0223\77\0\1\u0224\72\0\1\u0225\56\0\1\u0226"+
    "\75\0\1\u0227\101\0\1\u0228\77\0\1\u0229\72\0\1\u022a"+
    "\70\0\1\u022b\65\0\1\u022c\74\0\1\u022d\66\0\1\u022e"+
    "\41\0\1\u022e\32\0\1\u022f\71\0\1\u0230\104\0\1\u0231"+
    "\71\0\1\u0227\64\0\1\u0232\70\0\1\u0233\62\0\1\u0234"+
    "\101\0\1\u0235\76\0\1\u0236\67\0\1\u0237\76\0\1\u01a7"+
    "\64\0\1\u0238\41\0\1\u0238\35\0\1\u0239\66\0\1\u023a"+
    "\72\0\1\u023b\75\0\1\u023c\70\0\1\u023d\74\0\1\u023e"+
    "\101\0\1\u023f\71\0\1\u01b8\61\0\1\u0240\71\0\1\u0241"+
    "\41\0\1\u0241\35\0\1\u0242\66\0\1\u0243\72\0\1\u0244"+
    "\75\0\1\u0245\70\0\1\u0246\74\0\1\u0247\101\0\1\u0248"+
    "\71\0\1\u01c3\61\0\1\u0249\71\0\1\u024a\41\0\1\u024a"+
    "\25\0\1\u024b\76\0\1\u024c\77\0\1\u024d\66\0\1\u024e"+
    "\72\0\1\u024f\65\0\1\u0250\65\0\10\53\1\u0251\20\53"+
    "\2\0\2\53\1\0\1\53\1\0\1\53\1\0\1\53"+
    "\3\0\1\u0252\1\0\2\53\1\u0251\2\53\5\0\1\53"+
    "\10\0\5\61\1\u0253\23\61\2\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\5\0\5\61\5\0\1\61"+
    "\10\0\16\61\1\u0254\12\61\2\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\5\0\5\61\5\0\1\61"+
    "\10\0\12\61\1\u0255\16\61\2\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\5\0\5\61\5\0\1\61"+
    "\10\0\12\61\1\u0256\16\61\2\0\2\61\1\0\1\61"+
    "\1\0\1\61\1\0\1\61\5\0\5\61\5\0\1\61"+
    "\10\0\5\71\1\u0257\23\71\2\0\2\71\1\0\1\71"+
    "\1\0\1\71\1\0\1\71\5\0\5\71\5\0\1\71"+
    "\10\0\16\71\1\u0258\12\71\2\0\2\71\1\0\1\71"+
    "\1\0\1\71\1\0\1\71\5\0\5\71\5\0\1\71"+
    "\10\0\12\71\1\u0259\16\71\2\0\2\71\1\0\1\71"+
    "\1\0\1\71\1\0\1\71\5\0\5\71\5\0\1\71"+
    "\10\0\12\71\1\u025a\16\71\2\0\2\71\1\0\1\71"+
    "\1\0\1\71\1\0\1\71\5\0\5\71\5\0\1\71"+
    "\15\0\1\u025b\103\0\1\u025c\66\0\1\u025d\72\0\1\u025e"+
    "\75\0\1\u025f\67\0\1\u0260\3\0\1\u0261\64\0\1\u0262"+
    "\41\0\1\u0262\34\0\1\u0263\77\0\1\u0264\65\0\1\u0265"+
    "\77\0\1\u0266\67\0\1\u0267\57\0\1\u0268\45\0\1\u0268"+
    "\33\0\1\u0269\76\0\1\u026a\62\0\1\u026b\75\0\1\u026c"+
    "\73\0\1\u026d\120\0\1\u026e\44\0\1\u0153\73\0\1\u026f"+
    "\112\0\1\u0270\17\0\1\u0270\30\0\1\u0271\11\0\1\u0272"+
    "\66\0\1\u014f\55\0\1\u0273\120\0\1\u0274\60\0\1\u01eb"+
    "\75\0\1\u0275\63\0\1\u0276\77\0\1\u0277\63\0\1\u01f5"+
    "\41\0\1\u01f5\30\0\1\u01f5\1\u0278\40\0\1\u01f5\30\0"+
    "\1\u0279\2\0\1\u027a\36\0\1\u0279\43\0\1\u027b\55\0"+
    "\1\u027c\76\0\1\u027d\74\0\1\u027e\75\0\1\u027f\71\0"+
    "\1\u0280\75\0\1\u0281\65\0\1\u0282\67\0\1\u0283\66\0"+
    "\1\u0284\103\0\1\u0285\57\0\1\u0286\45\0\1\u0286\51\0"+
    "\1\u0287\50\0\1\u0288\67\0\1\u0289\45\0\1\u0289\24\0"+
    "\1\u028a\45\0\1\u028a\33\0\1\u028b\64\0\1\u028c\77\0"+
    "\1\u028d\73\0\1\u028e\76\0\1\u028f\73\0\1\u0290\75\0"+
    "\1\u0291\61\0\1\u020d\74\0\1\u0292\70\0\1\u0293\77\0"+
    "\1\u0294\62\0\1\u0295\105\0\1\u0296\56\0\1\u0297\107\0"+
    "\1\u0298\56\0\1\u0299\102\0\1\u029a\72\0\1\u0181\62\0"+
    "\1\u029b\67\0\1\u029c\45\0\1\u029c\13\0\1\177\3\0"+
    "\13\177\1\u029d\27\177\1\0\17\177\2\0\1\177\1\0"+
    "\1\177\3\0\24\177\1\u029e\16\177\1\0\17\177\2\0"+
    "\1\177\15\0\1\u029f\67\0\1\u02a0\45\0\1\u02a0\24\0"+
    "\1\u02a1\45\0\1\u02a1\33\0\1\u02a2\64\0\1\u02a3\77\0"+
    "\1\u02a4\73\0\1\u02a5\76\0\1\u02a6\73\0\1\u02a7\75\0"+
    "\1\u02a8\61\0\1\u0227\74\0\1\u02a9\70\0\1\u02aa\77\0"+
    "\1\u02ab\62\0\1\u02ac\105\0\1\u02ad\56\0\1\u02ae\107\0"+
    "\1\u02af\56\0\1\u02b0\102\0\1\u02b1\72\0\1\u019e\62\0"+
    "\1\u02b2\67\0\1\u02b3\45\0\1\u02b3\27\0\1\u02b4\67\0"+
    "\1\u02b5\45\0\1\u02b5\24\0\1\u02b6\45\0\1\u02b6\33\0"+
    "\1\u02b7\71\0\1\u01b8\74\0\1\u02b8\100\0\1\u02b9\67\0"+
    "\1\u02ba\57\0\1\u02bb\45\0\1\u02bb\27\0\1\u02bc\67\0"+
    "\1\u02bd\45\0\1\u02bd\24\0\1\u02be\45\0\1\u02be\33\0"+
    "\1\u02bf\71\0\1\u01c3\74\0\1\u02c0\100\0\1\u02c1\67\0"+
    "\1\u02c2\57\0\1\u02c3\45\0\1\u02c3\43\0\1\u02c4\62\0"+
    "\1\u02c5\66\0\1\u02c6\72\0\1\u02c7\101\0\1\u02c8\55\0"+
    "\31\53\2\0\2\53\1\0\1\53\1\0\1\53\1\0"+
    "\1\53\3\0\1\u0252\1\0\5\53\5\0\1\53\6\0"+
    "\1\u02c9\74\0\12\61\1\u02ca\16\61\2\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\5\0\5\61\5\0"+
    "\1\61\10\0\6\61\1\u02cb\22\61\2\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\5\0\5\61\5\0"+
    "\1\61\10\0\6\61\1\u02cc\22\61\2\0\2\61\1\0"+
    "\1\61\1\0\1\61\1\0\1\61\5\0\5\61\5\0"+
    "\1\61\10\0\12\71\1\u02cd\16\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\5\71\5\0"+
    "\1\71\10\0\6\71\1\u02ce\22\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\5\71\5\0"+
    "\1\71\10\0\6\71\1\u02cf\22\71\2\0\2\71\1\0"+
    "\1\71\1\0\1\71\1\0\1\71\5\0\5\71\5\0"+
    "\1\71\22\0\1\u02d0\66\0\1\u02d1\72\0\1\u02d2\72\0"+
    "\1\u02d3\67\0\1\u02d4\45\0\1\u02d4\26\0\1\u0266\70\0"+
    "\1\u02d5\45\0\1\u02d5\26\0\1\u02d6\104\0\1\u0266\65\0"+
    "\1\u02d7\71\0\1\u02d8\73\0\1\u02d9\70\0\1\u02da\41\0"+
    "\1\u02da\42\0\1\u0160\56\0\1\u02db\76\0\1\u02dc\76\0"+
    "\1\u02dd\72\0\1\u02de\70\0\1\u02df\74\0\1\u02e0\63\0"+
    "\1\u02e1\66\0\1\u02e2\45\0\1\u02e2\24\0\1\330\45\0"+
    "\1\330\27\0\1\u02e3\67\0\1\u02e4\45\0\1\u02e4\44\0"+
    "\1\u02e5\65\0\1\316\72\0\1\u02e6\76\0\1\u02e7\66\0"+
    "\1\u02e8\70\0\1\u02e9\67\0\1\u01f5\70\0\1\u02ea\71\0"+
    "\1\u02eb\101\0\1\u02ec\63\0\1\u02ed\76\0\1\u02ee\72\0"+
    "\1\u02ef\65\0\1\u02f0\77\0\1\u02f1\75\0\1\u02f2\67\0"+
    "\1\u02f3\70\0\1\u02f4\41\0\1\u02f4\37\0\1\u02f5\64\0"+
    "\1\u02f6\104\0\1\u02f7\55\0\1\u02f8\71\0\1\u02f9\103\0"+
    "\1\u02fa\76\0\1\u02fb\66\0\1\u020d\66\0\1\u02fc\77\0"+
    "\1\u02fd\101\0\1\u02fe\56\0\1\u02ff\111\0\1\u0300\50\0"+
    "\1\u0301\72\0\1\u02f7\74\0\1\u028e\111\0\1\u0302\56\0"+
    "\1\u0303\70\0\1\u018c\73\0\1\u0304\71\0\1\u0305\74\0"+
    "\1\u0181\50\0\1\177\3\0\24\177\1\u0306\16\177\1\0"+
    "\17\177\2\0\1\177\1\0\1\177\3\0\16\177\1\u0307"+
    "\24\177\1\0\17\177\2\0\1\177\20\0\1\u0308\104\0"+
    "\1\u0309\55\0\1\u030a\71\0\1\u030b\103\0\1\u030c\76\0"+
    "\1\u030d\66\0\1\u0227\66\0\1\u030e\77\0\1\u030f\101\0"+
    "\1\u0310\56\0\1\u0311\111\0\1\u0312\50\0\1\u0313\72\0"+
    "\1\u0309\74\0\1\u02a5\111\0\1\u0314\56\0\1\u0315\70\0"+
    "\1\u01a9\73\0\1\u0316\71\0\1\u0317\74\0\1\u019e\67\0"+
    "\1\u0318\104\0\1\u0319\55\0\1\u031a\102\0\1\u01b8\66\0"+
    "\1\u031b\71\0\1\u02b7\74\0\1\u031c\73\0\1\u031d\67\0"+
    "\1\u031e\104\0\1\u031f\55\0\1\u0320\102\0\1\u01c3\66\0"+
    "\1\u0321\71\0\1\u02bf\74\0\1\u0322\73\0\1\u0323\101\0"+
    "\1\u0324\71\0\1\u024b\63\0\1\u0325\66\0\1\u0326\73\0"+
    "\1\u0327\41\0\1\u0327\16\0\1\u0328\74\0\22\61\1\u0253"+
    "\6\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\13\61\1\u0329"+
    "\15\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\7\61\1\u032a"+
    "\21\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\22\71\1\u0257"+
    "\6\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\10\0\13\71\1\u032b"+
    "\15\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\10\0\7\71\1\u032c"+
    "\21\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\32\0\1\u025b\63\0"+
    "\1\u032d\66\0\1\u032e\74\0\1\u032f\70\0\1\u0330\113\0"+
    "\1\u0331\52\0\1\u02d8\41\0\1\u02d8\35\0\1\u0332\66\0"+
    "\1\u0333\71\0\1\u0149\41\0\1\u0149\25\0\1\u0160\103\0"+
    "\1\u0334\60\0\1\u0335\73\0\1\u0336\77\0\1\u0337\77\0"+
    "\1\u0338\67\0\1\u0339\60\0\1\u033a\107\0\1\u0160\60\0"+
    "\1\u033b\104\0\1\u033c\56\0\1\u033d\45\0\1\u033d\44\0"+
    "\1\u033e\66\0\1\u033f\55\0\1\u0340\107\0\1\u0341\64\0"+
    "\1\u0342\77\0\1\u0343\65\0\1\u0344\63\0\1\u0345\103\0"+
    "\1\u0346\75\0\1\u0347\76\0\1\u01f5\66\0\1\u0348\77\0"+
    "\1\u0349\57\0\1\u034a\41\0\1\u034a\34\0\1\u034b\72\0"+
    "\1\u0299\75\0\1\u028e\72\0\1\u034c\61\0\1\u034d\101\0"+
    "\1\u034e\100\0\1\u034f\71\0\1\u0350\61\0\1\u0351\77\0"+
    "\1\u0352\72\0\1\u0353\100\0\2\u0354\7\0\2\u0354\15\0"+
    "\1\u0354\35\0\1\u0355\76\0\1\u0356\60\0\1\u0357\74\0"+
    "\1\u0358\51\0\1\177\3\0\25\177\1\u0359\15\177\1\0"+
    "\17\177\2\0\1\177\1\0\1\177\3\0\25\177\1\u035a"+
    "\15\177\1\0\17\177\2\0\1\177\23\0\1\u02b0\75\0"+
    "\1\u02a5\72\0\1\u035b\61\0\1\u035c\101\0\1\u035d\100\0"+
    "\1\u035e\71\0\1\u035f\61\0\1\u0360\77\0\1\u0361\72\0"+
    "\1\u0362\100\0\2\u0363\7\0\2\u0363\15\0\1\u0363\35\0"+
    "\1\u0364\76\0\1\u0365\60\0\1\u0366\74\0\1\u0367\73\0"+
    "\1\u0368\75\0\1\u02b7\72\0\1\u0369\71\0\1\u036a\65\0"+
    "\1\u036b\66\0\1\u01b8\101\0\1\u036c\75\0\1\u02bf\72\0"+
    "\1\u036d\71\0\1\u036e\65\0\1\u036f\66\0\1\u01c3\103\0"+
    "\1\u0370\65\0\1\u024b\100\0\1\u0371\51\0\1\u0372\3\0"+
    "\1\u0372\1\0\4\u0372\1\0\20\u0372\3\0\1\u0372\2\0"+
    "\2\u0372\1\0\1\u0372\4\0\6\u0372\16\0\11\61\1\u0253"+
    "\17\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\17\61\1\u0373"+
    "\11\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\11\71\1\u0257"+
    "\17\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\10\0\17\71\1\u0374"+
    "\11\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\21\0\1\u025b\100\0"+
    "\1\u0375\61\0\1\u02d8\105\0\1\u0376\54\0\1\u0377\45\0"+
    "\1\u0377\37\0\1\u0378\57\0\1\u0379\45\0\1\u0379\27\0"+
    "\1\u0153\75\0\1\u0153\74\0\1\u014f\101\0\1\u0153\53\0"+
    "\1\u037a\45\0\1\u037a\25\0\1\u0153\104\0\1\u037b\72\0"+
    "\1\u037c\70\0\1\u037d\74\0\1\u01f7\72\0\1\u037e\77\0"+
    "\1\u037f\65\0\1\u0380\70\0\1\u0381\67\0\1\u0278\77\0"+
    "\1\u0382\70\0\1\u0383\74\0\1\u0384\61\0\1\u0385\72\0"+
    "\1\u0386\77\0\1\u0387\63\0\1\u0388\45\0\1\u0388\55\0"+
    "\1\u0389\41\0\1\u038a\45\0\1\u038a\32\0\1\u038b\112\0"+
    "\1\u038c\57\0\1\u038d\70\0\1\u038e\74\0\1\u038f\66\0"+
    "\1\u0390\66\0\1\u0304\123\0\1\u0391\36\0\1\u0392\45\0"+
    "\1\u0392\31\0\1\u0393\41\0\1\u0393\36\0\1\u0394\103\0"+
    "\1\u0395\35\0\1\177\3\0\20\177\1\u0396\22\177\1\0"+
    "\17\177\2\0\1\177\1\0\1\177\3\0\12\177\1\u0397"+
    "\30\177\1\0\10\177\1\u0397\6\177\2\0\1\177\12\0"+
    "\1\u0398\45\0\1\u0398\32\0\1\u0399\112\0\1\u039a\57\0"+
    "\1\u039b\70\0\1\u039c\74\0\1\u039d\66\0\1\u039e\66\0"+
    "\1\u0316\123\0\1\u039f\36\0\1\u03a0\45\0\1\u03a0\31\0"+
    "\1\u03a1\41\0\1\u03a1\36\0\1\u03a2\103\0\1\u03a3\55\0"+
    "\1\u01ba\63\0\1\u03a4\45\0\1\u03a4\27\0\1\u031c\102\0"+
    "\1\u03a5\66\0\1\u01c5\63\0\1\u03a6\45\0\1\u03a6\27\0"+
    "\1\u0322\102\0\1\u03a7\72\0\1\u024b\54\0\16\61\1\u0253"+
    "\12\61\2\0\2\61\1\0\1\61\1\0\1\61\1\0"+
    "\1\61\5\0\5\61\5\0\1\61\10\0\16\71\1\u0257"+
    "\12\71\2\0\2\71\1\0\1\71\1\0\1\71\1\0"+
    "\1\71\5\0\5\71\5\0\1\71\26\0\1\u025b\65\0"+
    "\1\u03a8\74\0\1\u03a9\71\0\1\u03aa\76\0\1\u03ab\64\0"+
    "\1\u0335\41\0\1\u0335\43\0\1\u0272\64\0\1\u0160\63\0"+
    "\1\u03ac\77\0\1\u03ad\76\0\1\u03ae\103\0\1\u03af\54\0"+
    "\1\u01f5\70\0\1\u03b0\41\0\1\u03b0\35\0\1\u033e\64\0"+
    "\1\u03b1\74\0\1\u0343\72\0\1\u03b2\75\0\1\u03b3\72\0"+
    "\1\u03b4\104\0\1\u028e\47\0\1\u03b5\45\0\1\u03b5\26\0"+
    "\1\u03b6\3\0\1\u03b7\7\0\1\u03b8\10\0\1\u03b9\101\0"+
    "\1\u03ba\43\0\1\u03bb\64\0\1\u0212\117\0\1\u03bc\65\0"+
    "\2\u03bd\7\0\2\u03bd\15\0\1\u03bd\31\0\1\u03be\120\0"+
    "\1\u03bf\46\0\1\u020d\60\0\1\u03c0\45\0\1\u03c0\13\0"+
    "\1\177\3\0\43\177\1\u03ba\17\177\2\0\1\177\1\0"+
    "\1\177\3\0\43\177\1\u03bf\17\177\2\0\1\177\35\0"+
    "\1\u02a5\47\0\1\u03c1\45\0\1\u03c1\26\0\1\u03c2\3\0"+
    "\1\u03c3\7\0\1\u03c4\10\0\1\u03c5\101\0\1\u03c6\43\0"+
    "\1\u03c7\64\0\1\u022c\117\0\1\u03c8\65\0\2\u03c9\7\0"+
    "\2\u03c9\15\0\1\u03c9\31\0\1\u03ca\120\0\1\u03cb\46\0"+
    "\1\u0227\60\0\1\u03cc\45\0\1\u03cc\47\0\1\u02b7\61\0"+
    "\1\u01b8\103\0\1\u02bf\61\0\1\u01c3\73\0\1\u03cd\62\0"+
    "\1\u03ce\67\0\1\u03cf\45\0\1\u03cf\31\0\1\u03d0\41\0"+
    "\1\u03d0\35\0\1\u0153\66\0\1\u03d1\77\0\1\u03d2\57\0"+
    "\1\u03d3\45\0\1\u03d3\26\0\1\u03d4\106\0\1\u03d5\74\0"+
    "\1\u03d6\72\0\1\u01f7\54\0\1\u01f7\101\0\1\u03d7\72\0"+
    "\1\u020d\72\0\1\u03d8\63\0\1\u03d9\72\0\1\u03b6\116\0"+
    "\1\u03da\56\0\1\u03db\107\0\1\u03dc\51\0\1\u03dd\113\0"+
    "\1\u03de\53\0\1\u03df\73\0\1\u03e0\72\0\1\u0227\72\0"+
    "\1\u03e1\63\0\1\u03e2\72\0\1\u03c2\116\0\1\u03e3\56\0"+
    "\1\u03e4\107\0\1\u03e5\51\0\1\u03e6\113\0\1\u03e7\53\0"+
    "\1\u03e8\61\0\1\u03e9\101\0\1\u03ea\66\0\1\u03eb\127\0"+
    "\1\u03ec\53\0\1\u03ed\60\0\1\u0165\77\0\1\u03ee\70\0"+
    "\1\u03ef\63\0\1\u03f0\77\0\1\u03f1\65\0\1\u03f2\120\0"+
    "\1\u03f3\17\0\1\u03f3\30\0\1\u03f4\122\0\1\u03f5\47\0"+
    "\1\u03f6\107\0\1\u03f7\17\0\1\u03f7\50\0\1\u03f8\60\0"+
    "\1\u03f9\11\0\1\u03fa\1\u020d\10\0\2\u03fa\34\0\1\u03fb"+
    "\71\0\1\u03fc\120\0\1\u03fd\17\0\1\u03fd\30\0\1\u03fe"+
    "\122\0\1\u03ff\47\0\1\u0400\107\0\1\u0401\17\0\1\u0401"+
    "\50\0\1\u0402\60\0\1\u0403\11\0\1\u0404\1\u0227\10\0"+
    "\2\u0404\34\0\1\u0405\100\0\1\u0406\61\0\1\u0407\45\0"+
    "\1\u0407\61\0\1\u02d8\35\0\1\u0408\45\0\1\u0408\27\0"+
    "\1\u0409\103\0\1\u040a\70\0\1\u0165\72\0\1\u040b\71\0"+
    "\1\u040c\64\0\1\u040d\102\0\1\u040e\70\0\1\u040f\60\0"+
    "\1\u0410\10\0\1\u0411\1\u0412\2\0\1\u0413\65\0\1\u020d"+
    "\76\0\1\u0414\56\0\1\u0415\1\u0416\4\0\1\u0417\3\0"+
    "\1\u0418\2\0\1\u0419\31\0\1\u0416\1\u0417\23\0\1\u041a"+
    "\45\0\1\u041a\40\0\1\u03f9\11\0\1\u03fa\1\u020d\10\0"+
    "\2\u03fa\1\u03de\44\0\1\u020d\61\0\1\u041b\102\0\1\u041c"+
    "\70\0\1\u041d\60\0\1\u041e\10\0\1\u041f\1\u0420\2\0"+
    "\1\u0421\65\0\1\u0227\76\0\1\u0422\56\0\1\u0423\1\u0424"+
    "\4\0\1\u0425\3\0\1\u0426\2\0\1\u0427\31\0\1\u0424"+
    "\1\u0425\23\0\1\u0428\45\0\1\u0428\40\0\1\u0403\11\0"+
    "\1\u0404\1\u0227\10\0\2\u0404\1\u03e7\44\0\1\u0227\70\0"+
    "\1\u0429\71\0\1\u042a\74\0\1\u042b\66\0\1\u042c\75\0"+
    "\1\u042d\74\0\1\u0165\76\0\1\u042e\66\0\1\u042f\60\0"+
    "\1\u042f\120\0\1\u0430\17\0\1\u0430\35\0\1\u0431\70\0"+
    "\1\u0432\101\0\1\u0433\55\0\1\u0434\106\0\1\u0435\53\0"+
    "\1\u0181\2\0\1\u0436\42\0\1\u0181\61\0\1\367\53\0"+
    "\1\u0437\70\0\1\u0438\61\0\1\u0439\117\0\1\u043a\17\0"+
    "\1\u043a\36\0\1\u043b\60\0\1\u043b\120\0\1\u043c\17\0"+
    "\1\u043c\35\0\1\u043d\70\0\1\u043e\101\0\1\u043f\55\0"+
    "\1\u0440\106\0\1\u0441\53\0\1\u019e\2\0\1\u0442\42\0"+
    "\1\u019e\61\0\1\u010f\53\0\1\u0443\70\0\1\u0444\61\0"+
    "\1\u0445\117\0\1\u0446\17\0\1\u0446\35\0\1\u02d8\61\0"+
    "\1\u02d8\121\0\1\u02d8\54\0\1\u0447\61\0\1\u0448\103\0"+
    "\1\u0449\57\0\1\u044a\45\0\1\u044a\37\0\1\u044b\65\0"+
    "\1\u044c\66\0\1\u044d\7\0\1\u044e\66\0\1\u044f\103\0"+
    "\1\u0450\104\0\1\u0451\42\0\1\u020d\70\0\1\u020d\105\0"+
    "\1\u0452\66\0\1\u0452\77\0\1\u03fa\57\0\1\u0453\45\0"+
    "\1\u0453\37\0\1\u0454\65\0\1\u0455\66\0\1\u0456\7\0"+
    "\1\u0457\66\0\1\u0458\103\0\1\u0459\104\0\1\u045a\42\0"+
    "\1\u0227\70\0\1\u0227\105\0\1\u045b\66\0\1\u045b\77\0"+
    "\1\u0404\61\0\1\u027b\73\0\1\u045c\76\0\1\u045d\106\0"+
    "\1\u0357\51\0\1\u045e\73\0\1\u045f\75\0\1\u0460\77\0"+
    "\1\u0461\57\0\1\u0462\45\0\1\u0462\35\0\1\u0463\72\0"+
    "\1\u0464\74\0\1\u0465\102\0\1\u0366\51\0\1\u0466\73\0"+
    "\1\u0467\75\0\1\u0468\77\0\1\u0469\57\0\1\u046a\45\0"+
    "\1\u046a\35\0\1\u046b\72\0\1\u046c\74\0\1\u046d\56\0"+
    "\1\u033e\101\0\1\u046e\64\0\1\u046f\45\0\1\u046f\36\0"+
    "\1\u0470\73\0\1\u0471\72\0\1\u0472\70\0\1\u0473\77\0"+
    "\1\u0212\63\0\1\u0474\70\0\1\u0212\41\0\1\u0212\23\0"+
    "\1\u0475\45\0\1\u0475\36\0\1\u0476\73\0\1\u0477\72\0"+
    "\1\u0478\70\0\1\u0479\77\0\1\u022c\63\0\1\u047a\70\0"+
    "\1\u022c\41\0\1\u022c\23\0\1\u033e\45\0\1\u033e\47\0"+
    "\1\u047b\52\0\1\u047c\71\0\1\u0212\102\0\1\u047d\62\0"+
    "\1\u047e\102\0\1\u047f\103\0\1\u0480\52\0\1\u0481\71\0"+
    "\1\u022c\102\0\1\u0482\62\0\1\u0483\102\0\1\u0484\73\0"+
    "\1\u0485\65\0\1\u0486\64\0\1\u0487\45\0\1\u0487\31\0"+
    "\1\u020d\41\0\1\u020d\52\0\1\u020d\56\0\1\u0488\65\0"+
    "\1\u0489\64\0\1\u048a\45\0\1\u048a\31\0\1\u0227\41\0"+
    "\1\u0227\52\0\1\u0227\55\0\1\u048b\63\0\1\u020d\75\0"+
    "\1\u048c\76\0\1\u048d\63\0\1\u0227\75\0\1\u048e\75\0"+
    "\1\u03f6\72\0\1\u0400\50\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[65667];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\2\11\11\1\4\11\3\1\3\11\6\1\3\11"+
    "\5\1\1\11\4\1\1\11\1\1\1\11\6\1\1\11"+
    "\1\1\1\11\14\1\3\11\21\1\1\11\14\1\1\11"+
    "\1\1\1\11\23\1\1\11\1\1\1\11\1\1\2\11"+
    "\6\1\1\11\13\1\7\0\11\1\66\0\1\1\25\0"+
    "\3\1\60\0\11\1\21\0\1\11\14\0\1\11\31\0"+
    "\1\11\32\0\3\1\40\0\1\11\12\0\1\11\4\0"+
    "\1\11\6\0\11\1\17\0\1\1\6\0\1\1\6\0"+
    "\1\11\5\0\1\1\21\0\1\11\21\0\2\1\6\0"+
    "\1\11\43\0\1\11\5\0\1\1\1\0\10\1\1\11"+
    "\101\0\2\1\53\0\6\1\10\0\1\11\55\0\2\1"+
    "\37\0\1\11\1\0\4\1\47\0\1\1\4\0\2\1"+
    "\10\0\1\1\14\0\1\11\1\0\3\1\24\0\1\1"+
    "\14\0\2\1\30\0\1\1\14\0\1\1\13\0\1\1"+
    "\301\0\1\1\1\0\1\1\1\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[1166];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 55: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 56: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 57: break;
          case 4: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 58: break;
          case 5: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 59: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 60: break;
          case 7: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 61: break;
          case 8: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 62: break;
          case 9: 
            { return CndTypes.EQUAL;
            }
          case 63: break;
          case 10: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 64: break;
          case 11: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 65: break;
          case 12: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 66: break;
          case 13: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 67: break;
          case 14: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 68: break;
          case 15: 
            { return CndTypes.COLON;
            }
          case 69: break;
          case 16: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 70: break;
          case 17: 
            { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
            }
          case 71: break;
          case 18: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
            }
          case 72: break;
          case 19: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 73: break;
          case 20: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 74: break;
          case 21: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 75: break;
          case 22: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 76: break;
          case 23: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 77: break;
          case 24: 
            { return CndTypes.COMMA;
            }
          case 78: break;
          case 25: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 79: break;
          case 26: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 80: break;
          case 27: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 81: break;
          case 28: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 82: break;
          case 29: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 83: break;
          case 30: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 84: break;
          case 31: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 85: break;
          case 32: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 86: break;
          case 33: 
            { return CndTypes.NODE_NAME;
            }
          case 87: break;
          case 34: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 88: break;
          case 35: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 89: break;
          case 36: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 90: break;
          case 37: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 91: break;
          case 38: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 92: break;
          case 39: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 93: break;
          case 40: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 94: break;
          case 41: 
            { return CndTypes.COMMENT;
            }
          case 95: break;
          case 42: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 96: break;
          case 43: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 97: break;
          case 44: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 98: break;
          case 45: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 99: break;
          case 46: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 100: break;
          case 47: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 101: break;
          case 48: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 102: break;
          case 49: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 103: break;
          case 50: 
            { return CndTypes.OPTION;
            }
          case 104: break;
          case 51: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 105: break;
          case 52: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            }
          case 106: break;
          case 53: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            }
          case 107: break;
          case 54: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
