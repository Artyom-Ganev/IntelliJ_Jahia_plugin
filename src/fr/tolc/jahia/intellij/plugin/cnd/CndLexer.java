/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NAMESPACE_URI = 4;
  public static final int NODETYPE_NAMESPACE = 6;
  public static final int NODETYPE = 8;
  public static final int NODETYPE_DONE = 10;
  public static final int SUPER_TYPE_NAMESPACE = 12;
  public static final int SUPER_TYPE_NAME = 14;
  public static final int AFTER_SUPER_TYPE_NAME = 16;
  public static final int OPTIONS = 18;
  public static final int EXTENDS = 20;
  public static final int EXTEND_NAMESPACE = 22;
  public static final int EXTEND = 24;
  public static final int ITEMTYPE = 26;
  public static final int PROPERTY = 28;
  public static final int PROPERTY_TYPE = 30;
  public static final int PROPERTY_MASK_OPTION_NAME = 32;
  public static final int PROPERTY_MASK = 34;
  public static final int PROPERTY_MASK_OPTION = 36;
  public static final int PROPERTY_DEFAULT = 38;
  public static final int PROPERTY_DEFAULT_VALUE = 40;
  public static final int PROPERTY_ATTRIBUTES = 42;
  public static final int PROPERTY_CONSTRAINT = 44;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 46;
  public static final int NODE = 48;
  public static final int NODE_NAMESPACE = 50;
  public static final int NODE_NODETYPE = 52;
  public static final int NODE_DEFAULT = 54;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 56;
  public static final int NODE_DEFAULT_VALUE = 58;
  public static final int NODE_ATTRIBUTES = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14752 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\0\1\5\1\6\2\7\1\10\1\6\2\7\1\11\1\12\3\0\1\13\1"+
    "\14\1\15\1\16\2\7\1\17\3\7\1\17\71\7\1\20\1\7\1\21\1\22\1\23\1\24\2\22\16"+
    "\0\1\25\1\13\1\26\1\27\2\7\1\30\11\7\1\31\21\7\1\32\1\33\23\7\1\22\1\6\3\7"+
    "\1\17\1\34\1\6\4\7\1\35\1\36\4\0\1\37\1\40\1\22\3\7\2\41\1\22\1\42\1\43\1"+
    "\0\1\44\5\7\1\45\3\0\1\46\1\47\13\7\1\50\1\37\1\51\1\52\1\0\1\53\1\22\1\54"+
    "\1\55\3\7\3\0\1\56\12\7\1\57\1\0\1\60\1\22\1\0\1\61\3\7\1\45\1\62\1\16\2\7"+
    "\1\57\1\63\1\64\1\65\2\22\3\7\1\66\10\22\1\67\1\23\6\22\1\70\2\0\1\71\1\72"+
    "\6\7\1\73\2\0\1\74\1\7\1\75\1\0\2\6\1\76\1\77\1\100\2\7\1\67\1\101\1\102\1"+
    "\103\1\104\1\54\1\105\1\75\1\0\1\106\1\43\1\76\1\107\1\100\2\7\1\67\1\110"+
    "\1\111\1\112\1\113\1\114\1\115\1\116\1\0\1\117\1\22\1\76\1\31\1\30\2\7\1\67"+
    "\1\120\1\102\1\37\1\121\1\122\1\22\1\75\1\0\1\34\1\22\1\76\1\77\1\100\2\7"+
    "\1\67\1\120\1\102\1\103\1\113\1\116\1\105\1\75\1\0\1\34\1\22\1\123\1\124\1"+
    "\125\1\126\1\127\1\124\1\7\1\130\1\131\1\132\1\133\1\22\1\116\1\0\1\22\1\34"+
    "\1\76\1\25\1\67\2\7\1\67\1\134\1\135\1\136\1\132\1\137\1\21\1\75\1\0\2\22"+
    "\1\140\1\25\1\67\2\7\1\67\1\134\1\102\1\136\1\132\1\137\1\26\1\75\1\0\1\141"+
    "\1\22\1\140\1\25\1\67\4\7\1\142\1\136\1\143\1\54\1\22\1\75\1\0\1\22\1\33\1"+
    "\140\1\7\1\17\1\33\2\7\1\30\1\144\1\17\1\145\1\146\1\0\2\22\1\147\1\22\1\6"+
    "\5\7\1\150\1\151\1\152\1\71\1\0\1\153\4\22\1\154\1\155\1\156\1\6\1\157\1\160"+
    "\1\150\1\161\1\162\1\163\1\0\1\164\4\22\1\122\2\22\1\153\1\0\1\153\1\165\1"+
    "\166\1\7\1\6\3\7\1\23\1\36\1\0\1\136\1\167\1\0\1\36\3\0\1\42\1\170\7\22\5"+
    "\7\1\45\1\0\1\171\1\0\1\153\1\57\1\172\1\173\1\174\1\175\1\7\1\176\1\177\1"+
    "\0\1\163\4\7\1\31\1\15\5\7\1\200\51\7\1\125\1\17\1\125\5\7\1\125\4\7\1\125"+
    "\1\17\1\125\1\7\1\17\7\7\1\125\10\7\1\201\4\22\2\7\2\22\12\7\1\23\1\22\1\6"+
    "\114\7\1\77\2\7\1\6\2\7\1\41\11\7\1\124\1\122\1\22\1\7\1\25\1\202\1\22\2\7"+
    "\1\202\1\22\2\7\1\203\1\22\1\7\1\25\1\204\1\22\6\7\1\205\3\0\1\206\1\207\1"+
    "\0\1\153\3\22\1\210\1\0\1\153\13\7\1\22\5\7\1\211\10\7\1\212\1\22\3\7\1\23"+
    "\1\0\1\2\1\0\1\2\1\116\1\0\3\7\1\212\1\23\1\22\5\7\1\106\2\0\1\47\1\153\1"+
    "\0\1\153\4\22\2\7\1\152\1\2\6\7\1\167\1\71\3\0\1\103\1\0\1\153\1\0\1\153\1"+
    "\35\13\22\1\213\5\7\1\205\1\0\1\213\1\106\1\0\1\153\1\22\1\214\1\2\1\22\1"+
    "\215\3\7\1\74\1\174\1\0\1\61\4\7\1\57\1\0\1\2\1\22\4\7\1\205\2\0\1\22\1\0"+
    "\1\216\1\0\1\61\3\7\1\212\12\22\1\217\2\0\1\220\1\221\1\22\30\7\4\0\1\71\2"+
    "\22\1\70\42\7\2\212\4\7\2\212\1\7\1\222\3\7\1\212\6\7\1\25\1\162\1\223\1\23"+
    "\1\224\1\106\1\7\1\23\1\223\1\23\1\22\1\214\3\22\1\225\1\22\1\35\1\122\1\22"+
    "\1\226\1\22\1\42\1\227\1\34\1\35\2\22\1\7\1\23\3\7\1\41\2\22\1\0\1\42\1\230"+
    "\1\0\1\231\1\22\1\232\1\33\1\144\1\233\1\24\1\234\1\7\1\235\1\236\1\237\2"+
    "\22\5\7\1\122\116\22\5\7\1\17\5\7\1\17\20\7\1\23\1\240\1\241\1\22\4\7\1\31"+
    "\1\15\7\7\1\35\1\22\1\54\2\7\1\17\1\22\10\17\4\0\5\22\1\35\72\22\1\236\3\22"+
    "\1\6\1\176\1\233\1\23\1\6\11\7\1\17\1\242\1\6\12\7\1\200\1\236\4\7\1\212\1"+
    "\6\12\7\1\17\2\22\3\7\1\41\6\22\170\7\1\212\11\22\71\7\1\23\6\22\21\7\1\23"+
    "\10\22\5\7\1\212\41\7\1\23\2\7\1\0\1\241\2\22\5\7\1\152\1\70\1\243\3\7\1\54"+
    "\12\7\1\153\3\22\1\35\1\7\1\33\14\7\1\244\1\106\1\22\1\7\1\41\11\22\1\7\1"+
    "\245\1\246\2\7\1\45\2\22\1\122\6\7\1\106\1\22\1\61\5\7\1\205\1\0\1\42\1\22"+
    "\1\0\1\153\2\0\1\61\1\43\1\0\1\61\2\7\1\57\1\163\2\7\1\152\1\0\1\2\1\22\3"+
    "\7\1\23\1\72\5\7\1\45\1\0\1\231\1\35\1\0\1\153\4\22\5\7\1\74\1\71\1\22\1\246"+
    "\1\247\1\0\1\153\2\7\1\17\1\250\6\7\1\173\1\251\1\211\2\22\1\252\1\7\1\45"+
    "\1\253\1\22\3\254\1\22\2\17\22\22\4\7\1\45\1\255\1\0\1\153\64\7\1\106\1\22"+
    "\2\7\1\17\1\256\5\7\1\106\40\22\55\7\1\212\15\7\1\21\4\22\1\17\1\22\1\256"+
    "\1\257\1\7\1\67\1\17\1\162\1\260\15\7\1\21\3\22\1\256\54\7\1\212\2\22\10\7"+
    "\1\33\6\7\5\22\1\7\1\23\2\0\2\22\1\71\1\22\1\127\2\22\1\236\3\22\1\34\1\25"+
    "\20\7\1\261\1\226\1\22\1\0\1\153\1\6\2\7\1\107\1\6\2\7\1\41\1\262\12\7\1\17"+
    "\3\33\1\263\1\264\2\22\1\265\1\7\1\134\2\7\1\17\2\7\1\266\1\7\1\212\1\7\1"+
    "\212\4\22\17\7\1\41\10\22\6\7\1\23\20\22\1\267\20\22\3\7\1\23\6\7\1\122\5"+
    "\22\3\7\1\17\2\22\3\7\1\41\6\22\3\7\1\212\4\7\1\106\1\7\1\233\5\22\23\7\1"+
    "\212\1\0\1\153\52\22\1\212\1\67\4\7\1\31\1\270\2\7\1\212\25\22\2\7\1\212\1"+
    "\22\3\7\1\21\10\22\7\7\1\262\10\22\1\271\1\70\1\134\1\6\2\7\1\106\1\112\4"+
    "\22\3\7\1\23\20\22\6\7\1\212\1\22\2\7\1\212\1\22\2\7\1\41\21\22\11\7\1\122"+
    "\66\22\1\215\6\7\1\0\1\71\3\22\1\116\1\0\2\22\1\215\5\7\1\0\1\272\2\22\3\7"+
    "\1\122\1\0\1\153\1\215\3\7\1\152\1\0\1\136\1\0\10\22\1\215\5\7\1\45\1\0\1"+
    "\273\1\22\1\0\1\153\24\22\5\7\1\45\1\0\1\22\1\0\1\153\46\22\55\7\1\17\22\22"+
    "\14\7\1\41\63\22\5\7\1\17\72\22\7\7\1\122\130\22\10\7\1\23\1\22\1\74\4\0\1"+
    "\71\1\22\1\54\1\215\1\7\14\22\1\21\153\22\1\274\1\275\2\0\1\276\1\2\3\22\1"+
    "\277\22\22\1\300\67\22\12\7\1\25\10\7\1\25\1\301\1\302\1\7\1\303\1\134\7\7"+
    "\1\31\1\304\2\25\3\7\1\305\1\162\1\33\1\67\51\7\1\212\3\7\1\67\2\7\1\200\3"+
    "\7\1\200\2\7\1\25\3\7\1\25\2\7\1\17\3\7\1\17\3\7\1\67\3\7\1\67\2\7\1\200\1"+
    "\306\6\0\1\134\3\7\1\154\1\6\1\200\1\307\1\232\1\310\1\154\1\222\1\154\2\200"+
    "\1\115\1\7\1\30\1\7\1\106\1\311\1\30\1\7\1\106\50\22\32\7\1\17\5\22\106\7"+
    "\1\23\1\22\33\7\1\212\74\22\1\114\3\22\14\0\20\22\36\0\2\22");

  /* The ZZ_CMAP_A table has 1616 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\26\1\3\1\2\6\7\4\0\1\20\3\0\1\6\2\0\1\12\1\23\1\24\1\5\1\25"+
    "\1\17\1\21\1\22\1\4\2\7\1\15\1\0\1\10\1\11\1\13\2\0\22\6\1\14\1\0\1\16\1\0"+
    "\4\6\4\0\6\7\1\27\2\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\7\6\1\0"+
    "\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6\1\0"+
    "\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\1\6\15\0\1\6\1\0\15\7\1"+
    "\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\7\7\4\0"+
    "\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7\1\6"+
    "\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7"+
    "\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6"+
    "\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0"+
    "\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1"+
    "\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0"+
    "\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6\1\0"+
    "\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0\3"+
    "\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2\7"+
    "\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7\4"+
    "\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2\6\1\0\1\6\2"+
    "\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6\2\7"+
    "\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1\0\1"+
    "\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6\4\7"+
    "\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7"+
    "\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7"+
    "\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0"+
    "\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\26\5\7\5\0\1\6\5\0\6\7\1\0"+
    "\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6\5\0"+
    "\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4\6\1\0\2\6\1"+
    "\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2"+
    "\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7"+
    "\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2"+
    "\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6\10\0\5\7\3"+
    "\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0"+
    "\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3"+
    "\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\37\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\3\35"+
    "\2\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45"+
    "\3\46\1\1\1\47\1\50\1\1\2\2\1\3\1\1"+
    "\1\51\1\52\1\0\4\53\1\1\1\3\1\1\1\51"+
    "\1\0\2\1\1\0\1\1\2\54\1\55\1\56\1\57"+
    "\1\60\3\61\1\62\1\63\1\64\3\65\1\66\1\0"+
    "\1\14\1\35\1\46\4\0\1\67\1\3\1\66\1\53"+
    "\2\0\1\3\1\66\1\0\1\66\1\0\1\61\1\65"+
    "\1\0\1\46\2\70\1\0\1\70\1\3\2\70\1\66"+
    "\1\53\2\71\1\0\1\71\1\3\2\71\1\66\3\72"+
    "\1\66\2\0\2\66\2\0\2\66\2\0\6\70\6\71"+
    "\4\0\1\72\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\30\0\60\0\110\0\140\0\170\0\220\0\250"+
    "\0\300\0\330\0\360\0\u0108\0\u0120\0\u0138\0\u0150\0\u0168"+
    "\0\u0180\0\u0198\0\u01b0\0\u01c8\0\u01e0\0\u01f8\0\u0210\0\u0228"+
    "\0\u0240\0\u0258\0\u0270\0\u0288\0\u02a0\0\u02b8\0\u02d0\0\u02e8"+
    "\0\u02e8\0\u0300\0\u0318\0\u0330\0\u0348\0\u02e8\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u0360\0\u0378\0\u02e8\0\u02e8\0\u0390\0\u03a8\0\u02e8"+
    "\0\u02e8\0\u03c0\0\u03d8\0\u02e8\0\u02e8\0\u03f0\0\u02e8\0\u02e8"+
    "\0\u02e8\0\u0408\0\u0420\0\u02e8\0\u0438\0\u02e8\0\u0450\0\u02e8"+
    "\0\u0468\0\u0480\0\u0498\0\u02e8\0\u04b0\0\u02e8\0\u04c8\0\u02e8"+
    "\0\u02e8\0\u04e0\0\u04f8\0\u02e8\0\u0510\0\u0528\0\u0540\0\u0558"+
    "\0\u02e8\0\u02e8\0\u0570\0\u0588\0\u05a0\0\u05b8\0\u05d0\0\u0570"+
    "\0\u02e8\0\u0570\0\u05e8\0\u0600\0\u0618\0\u0630\0\u0648\0\u0660"+
    "\0\u0678\0\u0648\0\u0648\0\u0690\0\u06a8\0\u0690\0\u06c0\0\u02e8"+
    "\0\u06d8\0\u02e8\0\u06f0\0\u02e8\0\u02e8\0\u0708\0\u0720\0\u0738"+
    "\0\u02e8\0\u0750\0\u0768\0\u0780\0\u0798\0\u07b0\0\u07c8\0\u07e0"+
    "\0\u07f8\0\u0810\0\u0828\0\u0840\0\u0858\0\u0588\0\u0870\0\u02e8"+
    "\0\u0888\0\u08a0\0\u08b8\0\u08d0\0\u08e8\0\u0900\0\u0918\0\u0930"+
    "\0\u0948\0\u0960\0\u0978\0\u0990\0\u09a8\0\u02e8\0\u0858\0\u09c0"+
    "\0\u09d8\0\u0888\0\u09f0\0\u08a0\0\u0a08\0\u0a20\0\u08d0\0\u08e8"+
    "\0\u0a38\0\u0a50\0\u0900\0\u0a68\0\u0918\0\u0a80\0\u0a98\0\u0930"+
    "\0\u0948\0\u0ab0\0\u02e8\0\u0ac8\0\u0ae0\0\u0af8\0\u0b10\0\u0b28"+
    "\0\u0b40\0\u0b58\0\u0b70\0\u0ab0\0\u0b88\0\u0ba0\0\u0ac8\0\u0ae0"+
    "\0\u0bb8\0\u0af8\0\u0b10\0\u0bd0\0\u0b28\0\u0b40\0\u0be8\0\u0b58"+
    "\0\u0b70\0\u0c00\0\u0c18\0\u0c30\0\u0c48\0\u0c60\0\u0c60\0\u0c78";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\40\1\41\1\42\1\43\1\44\1\40\1\45\1\40"+
    "\1\46\3\40\1\47\3\40\1\43\1\50\3\40\1\51"+
    "\2\0\1\40\1\41\1\42\1\43\1\52\1\40\1\53"+
    "\2\40\1\54\1\55\5\40\1\43\5\40\2\0\4\56"+
    "\1\57\5\56\1\60\1\61\14\56\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\62\11\40\1\43\5\40\2\0"+
    "\1\40\1\41\1\42\1\43\1\52\1\40\1\63\6\40"+
    "\1\64\1\65\1\40\1\43\5\40\2\0\1\40\1\41"+
    "\1\42\1\43\1\52\1\40\1\66\4\40\1\67\4\40"+
    "\1\43\5\40\2\0\1\40\1\41\1\42\1\43\1\52"+
    "\1\40\1\53\6\40\1\70\2\40\1\43\5\40\2\0"+
    "\1\40\1\71\1\72\1\43\1\52\1\40\1\73\11\40"+
    "\1\43\5\40\2\0\1\40\1\41\1\42\1\43\1\52"+
    "\1\40\1\66\10\40\1\74\1\43\5\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\75\11\40\1\43"+
    "\5\40\2\0\1\40\1\41\1\42\1\43\1\52\4\40"+
    "\1\76\6\40\1\43\5\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\77\11\40\1\43\5\40\2\0"+
    "\1\40\1\41\1\42\1\43\1\52\1\40\1\63\6\40"+
    "\1\64\1\40\1\100\1\43\5\40\2\0\1\101\1\41"+
    "\1\42\1\102\1\103\4\101\1\54\6\101\1\43\7\101"+
    "\1\40\1\41\1\42\1\43\1\52\1\104\1\105\11\40"+
    "\1\43\2\40\1\106\2\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\107\10\40\1\110\1\43\3\40"+
    "\1\111\1\40\2\0\1\40\1\41\1\42\1\43\1\52"+
    "\1\40\1\112\11\40\1\43\5\40\2\0\1\40\1\41"+
    "\1\42\1\43\1\52\1\40\1\113\5\40\1\114\3\40"+
    "\1\43\3\40\1\111\1\40\2\0\1\115\1\41\1\42"+
    "\1\116\1\117\4\115\1\54\1\120\3\115\1\121\1\122"+
    "\1\43\3\115\1\111\3\115\1\123\1\124\1\125\1\126"+
    "\1\127\3\123\1\130\1\131\6\123\1\43\5\123\2\132"+
    "\1\133\1\41\1\42\1\134\1\135\5\133\1\136\5\133"+
    "\1\43\7\133\1\137\1\124\1\125\1\140\1\141\3\137"+
    "\1\142\1\40\6\137\1\43\5\137\2\143\1\144\1\41"+
    "\1\42\1\43\1\145\13\144\1\43\5\144\2\146\1\40"+
    "\1\41\1\42\1\43\1\52\5\40\1\147\5\40\1\43"+
    "\5\40\2\0\1\40\1\41\1\42\1\43\1\52\1\150"+
    "\1\151\11\40\1\43\2\40\1\152\2\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\153\11\40\1\43"+
    "\5\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\63\6\40\1\64\1\40\1\154\1\43\3\40\1\155"+
    "\1\40\2\0\1\156\1\41\1\42\1\157\1\160\4\156"+
    "\1\161\6\156\1\43\7\156\1\40\1\41\1\42\1\43"+
    "\1\52\1\40\1\162\11\40\1\43\5\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\40\1\163\6\40\1\64"+
    "\2\40\1\43\5\40\2\0\1\164\1\41\1\42\1\165"+
    "\1\166\4\164\1\40\6\164\1\43\7\164\31\0\1\41"+
    "\31\0\1\43\14\0\1\43\13\0\1\167\1\170\30\0"+
    "\1\45\25\0\1\167\31\0\2\53\17\0\1\53\12\56"+
    "\2\0\20\56\1\171\5\56\2\0\14\56\6\0\2\62"+
    "\17\0\1\62\6\0\2\63\17\0\1\63\6\0\1\66"+
    "\22\0\1\71\34\0\2\73\17\0\1\73\6\0\1\75"+
    "\27\0\2\77\17\0\1\77\1\101\2\0\6\101\1\0"+
    "\6\101\1\0\10\101\2\0\1\102\5\101\1\0\6\101"+
    "\1\43\10\101\2\0\1\101\1\172\4\101\1\0\6\101"+
    "\1\0\7\101\6\0\2\105\5\0\1\105\4\0\1\105"+
    "\4\0\1\105\6\0\1\107\27\0\1\112\27\0\1\113"+
    "\21\0\1\115\2\0\6\115\2\0\3\115\3\0\3\115"+
    "\1\0\4\115\2\0\1\116\5\115\2\0\3\115\2\0"+
    "\1\43\3\115\1\0\4\115\2\0\1\115\1\173\4\115"+
    "\2\0\3\115\3\0\3\115\1\0\3\115\1\174\2\0"+
    "\7\174\1\0\3\174\1\0\11\174\1\175\2\0\15\175"+
    "\1\0\7\175\1\0\2\176\1\177\4\0\1\200\7\0"+
    "\1\177\10\0\1\124\1\176\1\177\4\0\1\200\7\0"+
    "\1\177\7\0\1\175\2\0\1\201\14\175\1\43\10\175"+
    "\2\0\1\175\1\202\13\175\1\0\7\175\1\133\2\0"+
    "\15\133\1\0\10\133\2\0\1\134\14\133\1\43\10\133"+
    "\2\0\1\133\1\203\13\133\1\0\7\133\1\136\2\0"+
    "\15\136\1\204\7\136\1\205\2\0\15\205\1\0\10\205"+
    "\2\0\1\206\14\205\1\43\10\205\2\0\1\205\1\207"+
    "\13\205\1\0\7\205\1\210\2\0\26\210\2\0\1\210"+
    "\1\211\23\210\1\212\2\0\25\212\6\0\2\151\5\0"+
    "\1\151\11\0\1\151\6\0\2\153\17\0\1\153\1\156"+
    "\2\0\6\156\1\0\6\156\1\0\10\156\2\0\1\157"+
    "\5\156\1\0\6\156\1\43\10\156\2\0\1\156\1\213"+
    "\4\156\1\0\6\156\1\0\7\156\6\0\2\162\17\0"+
    "\1\162\6\0\2\163\17\0\1\163\1\164\2\0\6\164"+
    "\1\0\6\164\1\0\10\164\2\0\1\165\5\164\1\0"+
    "\6\164\1\43\10\164\2\0\1\164\1\214\4\164\1\0"+
    "\6\164\1\0\7\164\1\167\2\0\25\167\5\170\1\215"+
    "\22\170\1\171\2\56\7\171\2\167\14\171\1\172\2\0"+
    "\6\172\1\167\6\172\1\167\7\172\1\173\2\0\6\173"+
    "\2\167\3\173\3\167\3\173\1\167\3\173\1\174\2\0"+
    "\7\174\1\216\3\174\1\0\11\174\1\217\2\0\6\217"+
    "\1\220\6\217\1\221\7\217\3\0\1\177\4\0\1\200"+
    "\7\0\1\177\7\0\1\217\2\0\1\222\5\217\1\220"+
    "\6\217\1\223\7\217\1\224\2\0\6\224\1\225\6\224"+
    "\1\226\7\224\1\203\2\0\15\203\1\167\7\203\1\204"+
    "\2\0\7\204\1\227\15\204\1\230\2\0\6\230\1\231"+
    "\6\230\1\232\10\230\2\0\1\233\5\230\1\231\6\230"+
    "\1\234\7\230\1\235\2\0\6\235\1\236\6\235\1\237"+
    "\7\235\1\240\2\0\1\210\14\240\1\210\7\240\1\241"+
    "\2\0\1\211\14\241\1\211\7\241\1\212\2\0\7\212"+
    "\1\242\15\212\1\213\2\0\6\213\1\167\6\213\1\167"+
    "\7\213\1\214\2\0\6\214\1\167\6\214\1\167\7\214"+
    "\4\170\1\243\1\215\22\170\1\217\2\0\1\220\5\217"+
    "\1\220\6\217\1\244\7\217\3\0\1\221\5\0\1\245"+
    "\6\0\1\221\12\0\1\223\5\0\1\245\6\0\1\223"+
    "\7\0\1\224\2\0\1\225\5\224\1\225\6\224\1\246"+
    "\7\224\1\167\2\0\1\226\5\167\1\247\6\167\1\226"+
    "\7\167\1\230\2\0\1\231\5\230\1\231\6\230\1\250"+
    "\7\230\3\0\1\232\5\0\1\251\6\0\1\232\12\0"+
    "\1\234\5\0\1\251\6\0\1\234\7\0\1\235\2\0"+
    "\1\236\5\235\1\236\6\235\1\252\7\235\1\167\2\0"+
    "\1\237\5\167\1\253\6\167\1\237\7\167\1\212\2\0"+
    "\1\254\6\212\1\242\4\212\1\255\1\254\7\212\1\256"+
    "\2\0\1\257\5\256\1\260\6\256\1\244\10\256\2\0"+
    "\1\260\14\256\1\245\7\256\1\261\2\0\1\262\5\261"+
    "\1\263\6\261\1\246\10\261\2\0\1\263\14\261\1\247"+
    "\7\261\1\264\2\0\1\265\5\264\1\266\6\264\1\250"+
    "\10\264\2\0\1\266\14\264\1\251\7\264\1\267\2\0"+
    "\1\270\5\267\1\271\6\267\1\252\10\267\2\0\1\271"+
    "\14\267\1\253\7\267\1\212\2\272\1\255\6\212\1\242"+
    "\5\212\1\255\7\212\1\256\2\0\15\256\1\0\7\256"+
    "\1\261\2\0\15\261\1\167\7\261\1\264\2\0\15\264"+
    "\1\0\7\264\1\267\2\0\15\267\1\167\7\267\1\0"+
    "\2\272\1\273\6\0\1\274\5\0\1\273\12\0\1\273"+
    "\6\0\1\274\5\0\1\273\7\0\1\275\2\0\7\275"+
    "\1\0\16\275\2\0\7\275\1\276\15\275\3\0\1\277"+
    "\13\0\1\300\1\277\10\0\2\272\1\300\6\0\1\274"+
    "\5\0\1\300\7\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[3216];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\37\0\2\11\4\1\4\11\2\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\3\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\2\1\1\11\4\1\2\11\6\1\1\11\1\0\10\1"+
    "\1\0\2\1\1\0\1\1\1\11\1\1\1\11\1\1"+
    "\2\11\3\1\1\11\6\1\1\0\3\1\4\0\1\11"+
    "\3\1\2\0\2\1\1\0\1\1\1\0\2\1\1\0"+
    "\1\11\2\1\1\0\10\1\1\0\10\1\1\11\2\0"+
    "\2\1\2\0\2\1\2\0\14\1\4\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[192];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 59: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 60: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 61: break;
          case 4: 
            { if ("extends".equalsIgnoreCase(yytext().toString())) { yybegin(EXTENDS); return CndTypes.EXTENDS; } 
												  	else if ("itemtype".equalsIgnoreCase(yytext().toString())) { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE; } 
    											  	else { yybegin(OPTIONS); return CndTypes.OPTION; }
            }
          case 62: break;
          case 5: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 63: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 64: break;
          case 7: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 65: break;
          case 8: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 66: break;
          case 9: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 67: break;
          case 10: 
            { return CndTypes.EQUAL;
            }
          case 68: break;
          case 11: 
            { yybegin(NAMESPACE_URI); return CndTypes.SINGLE_QUOTE;
            }
          case 69: break;
          case 12: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 70: break;
          case 13: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 71: break;
          case 14: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 72: break;
          case 15: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 73: break;
          case 16: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 74: break;
          case 17: 
            { return CndTypes.COLON;
            }
          case 75: break;
          case 18: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            }
          case 76: break;
          case 19: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 77: break;
          case 20: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 78: break;
          case 21: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            }
          case 79: break;
          case 22: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            }
          case 80: break;
          case 23: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            }
          case 81: break;
          case 24: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            }
          case 82: break;
          case 25: 
            { return CndTypes.OPTION;
            }
          case 83: break;
          case 26: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 84: break;
          case 27: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 85: break;
          case 28: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 86: break;
          case 29: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 87: break;
          case 30: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 88: break;
          case 31: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 89: break;
          case 32: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 90: break;
          case 33: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 91: break;
          case 34: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 92: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 93: break;
          case 36: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 94: break;
          case 37: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 95: break;
          case 38: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 96: break;
          case 39: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 97: break;
          case 40: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 98: break;
          case 41: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 99: break;
          case 42: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 100: break;
          case 43: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 101: break;
          case 44: 
            { return CndTypes.NODE_NAME;
            }
          case 102: break;
          case 45: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 103: break;
          case 46: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 104: break;
          case 47: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 105: break;
          case 48: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 106: break;
          case 49: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 107: break;
          case 50: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 108: break;
          case 51: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 109: break;
          case 52: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 110: break;
          case 53: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 111: break;
          case 54: 
            { return CndTypes.COMMENT;
            }
          case 112: break;
          case 55: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 113: break;
          case 56: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 114: break;
          case 57: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 115: break;
          case 58: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
