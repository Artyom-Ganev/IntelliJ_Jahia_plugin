/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NAMESPACES_OVER = 10;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_ADDENDUM = 38;
  public static final int PROPERTY_ADDENDUM_ATTR = 40;
  public static final int PROPERTY_DEFAULT_BEGIN = 42;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 44;
  public static final int PROPERTY_PLUS_BEGIN = 46;
  public static final int PROPERTY_PLUS_NAME_DONE = 48;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 50;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 52;
  public static final int PROPERTY_PLUS_COLON_DONE = 54;
  public static final int PROPERTY_PLUS_TYPE_DONE = 56;
  public static final int PROPERTY_PLUS_ADDENDUM = 58;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 60;
  public static final int EXTEND_BEGIN = 62;
  public static final int EXTEND_NAMESPACE_DONE = 64;
  public static final int EXTEND_COLON_DONE = 66;
  public static final int EXTEND_ITEM_BEGIN = 68;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19,  5,  5, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15408 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\20\1\34\1\35\2\24\1\36\11\24\1\37\21\24\1\40\1"+
    "\41\23\24\1\30\1\42\3\24\1\25\1\43\1\42\4\24\1\44\1\45\4\0\1\46\1\47\1\30"+
    "\3\24\2\50\1\30\1\51\1\52\1\0\1\53\5\24\1\54\2\0\1\55\1\56\1\57\13\24\1\60"+
    "\1\46\1\61\1\62\1\55\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70"+
    "\1\30\1\55\1\71\3\24\1\54\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76"+
    "\10\30\1\77\1\31\6\30\1\100\2\0\1\101\1\102\6\24\1\103\2\0\1\104\1\24\1\105"+
    "\1\55\2\42\1\106\1\107\1\110\2\24\1\77\1\111\1\112\1\113\1\114\1\64\1\115"+
    "\1\105\1\55\1\116\1\52\1\106\1\117\1\110\2\24\1\77\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\55\1\127\1\30\1\106\1\37\1\36\2\24\1\77\1\130\1\112\1"+
    "\46\1\131\1\132\1\30\1\105\1\55\1\43\1\30\1\106\1\107\1\110\2\24\1\77\1\130"+
    "\1\112\1\113\1\123\1\133\1\115\1\105\1\55\1\43\1\30\1\134\1\135\1\136\1\137"+
    "\1\140\1\135\1\24\1\141\1\142\1\143\1\144\1\30\1\126\1\55\1\30\1\43\1\106"+
    "\1\33\1\77\2\24\1\77\1\145\1\146\1\147\1\143\1\150\1\27\1\105\1\55\2\30\1"+
    "\151\1\33\1\77\2\24\1\77\1\145\1\112\1\147\1\143\1\150\1\34\1\105\1\55\1\152"+
    "\1\30\1\151\1\33\1\77\4\24\1\153\1\147\1\154\1\64\1\30\1\105\1\55\1\30\1\41"+
    "\1\151\1\24\1\25\1\41\2\24\1\36\1\155\1\25\1\156\1\157\1\0\1\160\1\161\1\162"+
    "\1\30\1\42\5\24\1\163\1\164\1\165\1\101\1\55\1\166\4\30\1\167\1\170\1\171"+
    "\1\42\1\172\1\173\1\163\1\174\1\175\1\176\1\55\1\177\4\30\1\132\2\30\1\200"+
    "\1\55\1\166\1\201\1\202\1\24\1\42\3\24\1\31\1\45\1\0\1\147\1\203\1\0\1\45"+
    "\3\0\1\51\1\204\7\30\5\24\1\54\1\0\1\205\1\55\1\166\1\67\1\206\1\207\1\210"+
    "\1\211\1\24\1\212\1\213\1\55\1\214\4\24\1\37\1\22\5\24\1\215\51\24\1\136\1"+
    "\25\1\136\5\24\1\136\4\24\1\136\1\25\1\136\1\24\1\25\7\24\1\136\10\24\1\216"+
    "\4\30\2\24\2\30\12\24\1\31\1\30\1\42\114\24\1\107\2\24\1\42\2\24\1\50\11\24"+
    "\1\135\1\132\1\30\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24"+
    "\1\33\1\221\1\30\6\24\1\222\3\0\1\223\1\224\1\55\1\166\3\30\1\225\1\55\1\166"+
    "\13\24\1\30\5\24\1\226\10\24\1\227\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\126\1"+
    "\55\3\24\1\227\1\31\1\30\5\24\1\116\2\0\1\57\1\200\1\55\1\166\4\30\2\24\1"+
    "\165\1\2\6\24\1\203\1\101\3\0\1\113\1\55\1\166\1\55\1\166\1\44\13\30\1\230"+
    "\5\24\1\222\1\0\1\230\1\116\1\55\1\166\1\30\1\231\1\2\1\30\1\232\3\24\1\104"+
    "\1\210\1\55\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\55\1\233\1\55"+
    "\1\71\3\24\1\227\12\30\1\234\2\0\1\235\1\236\1\30\30\24\4\0\1\101\2\30\1\100"+
    "\42\24\2\227\4\24\2\227\1\24\1\237\3\24\1\227\6\24\1\33\1\175\1\240\1\31\1"+
    "\241\1\116\1\24\1\31\1\240\1\31\1\30\1\231\3\30\1\242\1\30\1\44\1\132\1\30"+
    "\1\243\1\30\1\51\1\244\1\43\1\44\2\30\1\24\1\31\3\24\1\50\2\30\1\0\1\51\1"+
    "\245\1\0\1\246\1\30\1\247\1\41\1\155\1\250\1\32\1\251\1\24\1\252\1\253\1\254"+
    "\2\30\5\24\1\132\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\255\1\256\1\30\4"+
    "\24\1\37\1\22\7\24\1\44\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\44\72\30"+
    "\1\253\3\30\1\42\1\212\1\250\1\31\1\42\11\24\1\25\1\257\1\42\12\24\1\215\1"+
    "\253\4\24\1\227\1\42\12\24\1\25\2\30\3\24\1\50\6\30\170\24\1\227\11\30\71"+
    "\24\1\31\6\30\21\24\1\31\10\30\5\24\1\227\41\24\1\31\2\24\1\55\1\260\2\30"+
    "\5\24\1\165\1\100\1\261\3\24\1\64\12\24\1\200\3\30\1\44\1\24\1\41\14\24\1"+
    "\262\1\116\1\30\1\24\1\50\11\30\1\24\1\263\1\264\2\24\1\54\2\30\1\132\6\24"+
    "\1\116\1\30\1\265\5\24\1\222\1\0\1\51\1\30\1\55\1\166\2\0\1\265\1\52\1\55"+
    "\1\71\2\24\1\67\1\176\2\24\1\165\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\54\1"+
    "\0\1\246\1\44\1\55\1\166\2\30\1\161\1\266\5\24\1\104\1\101\1\30\1\264\1\267"+
    "\1\55\1\166\2\24\1\25\1\270\6\24\1\207\1\271\1\226\2\30\1\272\1\24\1\54\1"+
    "\273\1\30\3\274\1\30\2\25\22\30\4\24\1\54\1\275\1\55\1\166\64\24\1\116\1\30"+
    "\2\24\1\25\1\276\5\24\1\116\40\30\55\24\1\227\15\24\1\27\4\30\1\25\1\30\1"+
    "\276\1\277\1\24\1\77\1\25\1\175\1\300\15\24\1\27\3\30\1\276\54\24\1\227\2"+
    "\30\10\24\1\41\6\24\5\30\1\24\1\31\2\0\2\30\1\101\1\30\1\140\2\30\1\253\3"+
    "\30\1\43\1\33\20\24\1\301\1\243\1\30\1\55\1\166\1\42\2\24\1\117\1\42\2\24"+
    "\1\50\1\302\12\24\1\25\3\41\1\303\1\304\2\30\1\305\1\24\1\145\2\24\1\25\2"+
    "\24\1\306\1\24\1\227\1\24\1\227\4\30\17\24\1\50\10\30\6\24\1\31\20\30\1\307"+
    "\20\30\3\24\1\31\6\24\1\132\5\30\3\24\1\25\2\30\3\24\1\50\6\30\3\24\1\227"+
    "\4\24\1\116\1\24\1\250\5\30\23\24\1\227\1\55\1\166\52\30\1\227\1\77\4\24\1"+
    "\37\1\310\2\24\1\227\25\30\2\24\1\227\1\30\3\24\1\27\10\30\7\24\1\302\10\30"+
    "\1\311\1\100\1\145\1\42\2\24\1\116\1\122\4\30\3\24\1\31\20\30\6\24\1\227\1"+
    "\30\2\24\1\227\1\30\2\24\1\50\21\30\11\24\1\132\66\30\1\232\6\24\1\0\1\101"+
    "\3\30\1\126\1\55\2\30\1\232\5\24\1\0\1\312\2\30\3\24\1\132\1\55\1\166\1\232"+
    "\3\24\1\165\1\0\1\313\1\55\10\30\1\232\5\24\1\54\1\0\1\314\1\30\1\55\1\166"+
    "\42\30\1\161\1\266\72\30\1\161\1\266\56\30\1\161\1\266\4\30\5\24\1\54\1\0"+
    "\1\30\1\55\1\166\14\30\1\161\1\266\64\30\1\161\1\266\42\30\55\24\1\25\22\30"+
    "\14\24\1\50\63\30\5\24\1\25\72\30\7\24\1\132\4\30\1\161\1\266\34\30\1\161"+
    "\1\266\64\30\10\24\1\31\1\30\1\104\4\0\1\101\1\30\1\64\1\232\1\24\14\30\1"+
    "\27\153\30\1\315\1\316\2\0\1\317\1\2\3\30\1\320\22\30\1\321\67\30\12\24\1"+
    "\33\10\24\1\33\1\322\1\323\1\24\1\324\1\145\7\24\1\37\1\325\2\33\3\24\1\326"+
    "\1\175\1\41\1\77\51\24\1\227\3\24\1\77\2\24\1\215\3\24\1\215\2\24\1\33\3\24"+
    "\1\33\2\24\1\25\3\24\1\25\3\24\1\77\3\24\1\77\2\24\1\215\1\327\6\55\1\145"+
    "\3\24\1\167\1\42\1\215\1\330\1\247\1\331\1\167\1\237\1\167\2\215\1\125\1\24"+
    "\1\36\1\24\1\116\1\332\1\36\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1"+
    "\30\33\24\1\227\74\30\1\124\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1752 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\2\1\1\1\63\1\64\1\1\6\20\4\0\1\2\3\0\1\4\2\0\1\7\1\44\1\45\1\43\1"+
    "\42\1\24\1\41\1\15\1\3\1\21\1\61\6\21\1\62\1\21\1\14\1\0\1\5\1\6\1\17\2\0"+
    "\1\16\1\50\15\16\1\56\2\16\1\55\7\16\1\22\1\0\1\23\1\0\1\16\1\0\1\35\1\36"+
    "\1\40\1\33\1\34\1\53\1\46\1\10\1\26\1\16\1\52\1\37\1\25\1\30\1\31\1\12\1\16"+
    "\1\32\1\13\1\11\1\47\1\16\1\51\1\27\1\54\1\16\4\0\6\20\1\65\2\20\2\0\4\4\4"+
    "\0\1\4\2\0\1\20\7\0\1\4\4\0\1\4\5\0\17\4\1\0\2\4\4\0\4\4\16\0\5\4\7\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\0\2\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\13\4\1\0\3\4"+
    "\1\0\5\20\2\0\6\4\1\0\7\4\1\0\1\4\15\0\1\4\1\0\15\20\1\0\1\20\1\0\2\20\1\0"+
    "\2\20\1\0\1\20\3\4\5\0\5\20\6\0\1\4\4\0\3\20\5\0\3\4\5\20\12\60\4\0\2\4\1"+
    "\20\13\4\1\0\1\4\7\20\2\4\2\20\1\0\4\20\2\4\2\60\3\4\2\0\1\4\7\0\1\20\1\4"+
    "\1\20\6\4\3\20\2\0\11\4\3\20\1\4\6\0\2\60\6\4\4\20\2\4\2\0\2\20\1\4\11\20"+
    "\1\4\3\20\1\4\5\20\2\0\1\4\3\20\4\0\1\4\1\0\6\4\4\0\13\20\1\0\4\20\6\4\3\20"+
    "\1\4\2\20\1\4\7\20\2\4\2\20\2\0\2\60\1\0\3\20\1\0\10\4\2\0\2\4\2\0\6\4\1\0"+
    "\1\4\3\0\4\4\2\0\1\20\1\4\7\20\2\0\2\20\2\0\3\20\1\4\5\0\2\4\1\0\5\4\4\0\3"+
    "\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0"+
    "\1\20\7\0\4\4\1\0\1\4\7\0\2\60\2\20\3\4\1\20\2\0\1\4\1\0\2\4\1\0\3\4\2\20"+
    "\1\0\3\20\2\0\1\4\15\0\2\20\2\0\1\20\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1"+
    "\0\1\4\1\0\2\4\3\0\2\4\3\0\2\4\4\0\5\20\3\0\3\20\1\0\4\20\2\0\1\4\6\0\1\20"+
    "\4\4\1\0\5\4\3\0\1\4\7\20\1\0\2\20\5\0\2\20\3\0\2\20\1\0\3\4\1\0\2\4\5\0\3"+
    "\4\2\0\1\4\3\20\1\0\4\20\1\4\1\0\4\4\1\0\1\4\4\0\1\20\4\0\6\20\1\0\1\20\7"+
    "\0\12\57\2\0\2\20\4\0\1\4\1\20\2\4\7\20\4\0\10\4\1\20\2\60\7\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4\2"+
    "\20\1\0\2\20\1\4\2\0\5\4\1\0\1\4\1\0\6\20\2\0\2\60\2\0\4\4\2\20\13\0\1\20"+
    "\1\0\1\20\1\0\1\20\4\0\2\20\5\4\3\20\6\0\1\20\1\0\7\20\1\4\2\20\4\4\3\20\1"+
    "\4\3\20\2\4\7\20\3\4\4\20\5\4\14\20\1\4\1\20\2\60\4\20\2\0\3\4\1\0\7\4\2\0"+
    "\3\20\2\4\3\20\3\0\2\4\2\20\4\0\1\4\1\0\2\20\4\0\4\4\10\20\3\0\1\4\3\0\2\4"+
    "\1\20\5\0\3\20\2\0\1\4\1\20\1\4\5\0\6\4\2\0\5\20\3\4\3\0\10\20\5\4\2\60\3"+
    "\0\3\4\3\20\1\0\5\20\4\4\1\20\4\4\3\20\2\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\2\0\3\4\1\0\6\4\2\0\2\4\2\63\5\20\5\0\1\4\5\0\6\20\1\0\1\20\3\0\4\20\11\0"+
    "\1\4\4\0\1\4\1\0\5\4\2\0\1\4\1\0\4\4\1\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\4"+
    "\4\3\20\2\4\5\0\2\20\2\0\3\4\2\60\2\4\4\0\6\20\1\0\2\4\2\0\4\4\1\0\2\4\1\20"+
    "\3\4\1\20\4\4\1\20\4\4\2\20\6\4\2\57\6\0\4\4\2\20\4\0\1\4\1\20\4\0\1\20\5"+
    "\4\2\20\3\0\3\4\4\0\3\4\2\20\2\0\6\4\1\0\3\20\1\0\2\20\5\0\5\4\5\0\1\4\1\20"+
    "\3\4\1\0\2\4\1\0\7\4\2\0\1\20\6\0\2\4\2\0\3\4\3\0\2\4\3\0\2\4\2\0\3\20\4\0"+
    "\3\4\1\0\2\4\1\0\1\4\5\0\1\20\2\0\1\4\3\0\1\4\2\0\2\4\3\20\1\0\2\20\1\0\3"+
    "\20\2\0\1\20\2\0\5\20\1\0\2\60\1\20\4\4\10\0\5\20\3\0\6\20\2\0\3\20\2\0\4"+
    "\20\4\0\3\20\5\0\1\4\2\0\2\4\2\0\4\4\1\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4"+
    "\4\1\0\4\4\2\0\2\60\1\0\1\4\1\0\1\4\5\0\1\4\1\0\1\4\1\0\3\4\1\0\3\4\1\0\3"+
    "\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\42\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\2\21\1\22\1\23"+
    "\1\3\5\1\1\24\1\3\12\1\1\25\1\1\1\26"+
    "\1\1\1\26\2\27\1\3\1\30\1\31\1\32\1\33"+
    "\1\3\1\1\1\34\1\35\1\36\2\1\1\37\3\0"+
    "\1\40\2\0\1\41\3\0\1\42\22\0\1\25\5\0"+
    "\1\43\21\0\1\44\1\45\15\0\2\26\1\46\1\0"+
    "\1\47\11\0\1\50\10\0\1\51\4\0\1\25\7\0"+
    "\1\52\26\0\1\50\35\0\1\53\1\0\1\54\1\55"+
    "\1\0\1\56\12\0\1\57\1\60\31\0\1\61\3\0"+
    "\1\50\13\0\1\50\20\0\1\50\64\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\154\0\242\0\330\0\u010e\0\u0144\0\u017a"+
    "\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\u02f4\0\u032a"+
    "\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438\0\u046e\0\u04a4\0\u04da"+
    "\0\u0510\0\u0546\0\u057c\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a"+
    "\0\u06c0\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u072c\0\u072c"+
    "\0\u0804\0\u083a\0\u072c\0\u072c\0\u0870\0\u08a6\0\u08dc\0\u0912"+
    "\0\u0948\0\u072c\0\u097e\0\u072c\0\u072c\0\u09b4\0\u09ea\0\u0a20"+
    "\0\u0a56\0\u072c\0\u0a8c\0\u072c\0\u0798\0\u072c\0\u0ac2\0\u0af8"+
    "\0\u0b2e\0\u0b64\0\u0b9a\0\u0bd0\0\u0c06\0\u072c\0\u0c3c\0\u0c72"+
    "\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a\0\u0d80\0\u0db6\0\u0dec\0\u0e22"+
    "\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa\0\u0f30\0\u0f66\0\u0f9c\0\u072c"+
    "\0\u0fd2\0\u1008\0\u072c\0\u103e\0\u072c\0\u1074\0\u10aa\0\u10e0"+
    "\0\u072c\0\u1116\0\u114c\0\u1182\0\u11b8\0\u11ee\0\u1224\0\u08a6"+
    "\0\u072c\0\u125a\0\u0912\0\u072c\0\u1290\0\u12c6\0\u12fc\0\u072c"+
    "\0\u1332\0\u1368\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476\0\u14ac"+
    "\0\u14e2\0\u1518\0\u154e\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c"+
    "\0\u1692\0\u0e22\0\u0e22\0\u16c8\0\u16fe\0\u1734\0\u176a\0\u17a0"+
    "\0\u072c\0\u17d6\0\u180c\0\u10aa\0\u1842\0\u1878\0\u18ae\0\u18e4"+
    "\0\u191a\0\u1950\0\u1986\0\u19bc\0\u19f2\0\u1a28\0\u1a5e\0\u1a94"+
    "\0\u1aca\0\u1b00\0\u1440\0\u1476\0\u1b36\0\u1b6c\0\u1ba2\0\u1bd8"+
    "\0\u1c0e\0\u1c44\0\u1c7a\0\u1cb0\0\u1ce6\0\u1d1c\0\u1d52\0\u1d88"+
    "\0\u1dbe\0\u1df4\0\u17a0\0\u17d6\0\u1e2a\0\u1e60\0\u1e96\0\u1ecc"+
    "\0\u1f02\0\u1f38\0\u1f6e\0\u1fa4\0\u1fda\0\u2010\0\u2046\0\u072c"+
    "\0\u207c\0\u20b2\0\u20e8\0\u211e\0\u2154\0\u218a\0\u21c0\0\u21f6"+
    "\0\u072c\0\u222c\0\u2262\0\u2298\0\u22ce\0\u072c\0\u2304\0\u233a"+
    "\0\u2370\0\u23a6\0\u23dc\0\u2412\0\u2448\0\u072c\0\u247e\0\u24b4"+
    "\0\u24ea\0\u2520\0\u2556\0\u258c\0\u25c2\0\u25f8\0\u262e\0\u2664"+
    "\0\u269a\0\u26d0\0\u2706\0\u273c\0\u2772\0\u27a8\0\u27de\0\u2814"+
    "\0\u284a\0\u2880\0\u28b6\0\u28ec\0\u2922\0\u2958\0\u298e\0\u29c4"+
    "\0\u29fa\0\u2a30\0\u2a66\0\u2a9c\0\u2ad2\0\u2b08\0\u2b3e\0\u2b74"+
    "\0\u2baa\0\u2be0\0\u2c16\0\u2c4c\0\u2c82\0\u2cb8\0\u2cee\0\u2d24"+
    "\0\u2d5a\0\u2d90\0\u2dc6\0\u2dfc\0\u2e32\0\u2e68\0\u2e9e\0\u2ed4"+
    "\0\u2f0a\0\u2f40\0\u072c\0\u2f76\0\u072c\0\u2cb8\0\u2fac\0\u072c"+
    "\0\u2fe2\0\u3018\0\u304e\0\u3084\0\u30ba\0\u30f0\0\u3126\0\u315c"+
    "\0\u3192\0\u31c8\0\u072c\0\u072c\0\u31fe\0\u3234\0\u326a\0\u32a0"+
    "\0\u32d6\0\u330c\0\u3342\0\u3378\0\u33ae\0\u33e4\0\u341a\0\u3450"+
    "\0\u3486\0\u34bc\0\u34f2\0\u3528\0\u355e\0\u3594\0\u35ca\0\u3600"+
    "\0\u3636\0\u366c\0\u36a2\0\u36d8\0\u370e\0\u072c\0\u3744\0\u377a"+
    "\0\u37b0\0\u37e6\0\u381c\0\u3852\0\u3888\0\u38be\0\u38f4\0\u392a"+
    "\0\u3960\0\u3996\0\u39cc\0\u3a02\0\u3a38\0\u3a6e\0\u3aa4\0\u3ada"+
    "\0\u3b10\0\u3b46\0\u3b7c\0\u3bb2\0\u3be8\0\u3c1e\0\u3c54\0\u3c8a"+
    "\0\u3cc0\0\u3cf6\0\u3d2c\0\u3d62\0\u3d98\0\u3dce\0\u3e04\0\u3e3a"+
    "\0\u3e70\0\u3ea6\0\u3edc\0\u3f12\0\u3f48\0\u3f7e\0\u3fb4\0\u3fea"+
    "\0\u4020\0\u4056\0\u408c\0\u40c2\0\u40f8\0\u412e\0\u4164\0\u419a"+
    "\0\u41d0\0\u4206\0\u423c\0\u4272\0\u42a8\0\u42de\0\u4314\0\u434a"+
    "\0\u4380\0\u43b6\0\u43ec\0\u4422\0\u4458\0\u448e\0\u44c4\0\u44fa"+
    "\0\u4530\0\u4566\0\u459c\0\u45d2\0\u4608\0\u463e\0\u4674\0\u46aa"+
    "\0\u46e0\0\u4716\0\u474c\0\u4782\0\u47b8\0\u47ee\0\u4824\0\u485a"+
    "\0\u4890\0\u48c6\0\u48fc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\43\1\44\1\45\1\46\1\43\1\47\14\43\1\50"+
    "\3\43\1\51\5\43\1\52\4\43\1\53\1\54\20\43"+
    "\1\0\1\45\1\0\1\43\1\44\1\45\1\43\1\55"+
    "\3\43\4\55\2\43\1\55\6\43\14\55\5\43\11\55"+
    "\4\43\1\0\1\45\1\0\1\43\1\44\1\45\3\43"+
    "\1\56\54\43\1\0\1\45\1\0\1\43\1\44\1\45"+
    "\5\43\1\57\52\43\1\0\1\45\1\0\1\43\1\44"+
    "\1\45\4\43\1\60\53\43\1\0\1\45\1\0\1\43"+
    "\1\44\1\45\60\43\1\0\1\45\1\0\1\43\1\44"+
    "\1\45\1\43\1\61\3\43\4\61\2\43\1\61\6\43"+
    "\14\61\5\43\11\61\4\43\1\0\1\45\1\0\1\43"+
    "\1\44\1\45\11\43\1\62\46\43\1\0\1\45\1\0"+
    "\1\43\1\44\1\45\1\43\1\63\3\43\4\63\2\43"+
    "\1\63\6\43\14\63\5\43\11\63\4\43\1\0\1\45"+
    "\1\0\1\43\1\44\1\45\20\43\1\64\37\43\1\0"+
    "\1\45\1\0\1\43\1\44\1\45\14\43\1\65\5\43"+
    "\1\66\3\43\1\67\3\43\1\70\25\43\1\0\1\45"+
    "\1\0\1\43\1\44\1\45\1\43\1\71\3\43\4\71"+
    "\2\43\1\71\6\43\14\71\5\43\11\71\4\43\1\0"+
    "\1\45\1\0\1\43\1\44\1\45\11\43\1\72\46\43"+
    "\1\0\1\45\1\0\1\43\1\44\1\45\1\43\1\73"+
    "\3\43\4\73\2\43\1\73\6\43\14\73\5\43\11\73"+
    "\4\43\1\0\1\45\1\0\1\74\1\44\1\75\21\74"+
    "\1\76\36\74\1\0\1\45\1\0\1\43\1\44\1\45"+
    "\1\43\1\77\3\43\4\77\2\43\1\77\6\43\14\77"+
    "\5\43\11\77\4\43\1\0\1\45\1\0\1\43\1\44"+
    "\1\100\60\43\1\0\1\100\1\0\1\43\1\44\1\45"+
    "\10\43\1\101\17\43\1\102\2\43\1\103\1\104\11\43"+
    "\1\105\11\43\1\0\1\45\1\0\1\43\1\44\1\45"+
    "\42\43\1\106\15\43\1\0\1\45\1\0\1\43\1\44"+
    "\1\107\5\43\1\110\1\43\1\111\12\43\1\112\1\113"+
    "\1\43\1\114\1\115\3\43\1\116\1\117\24\43\1\0"+
    "\1\107\1\0\1\43\1\44\1\45\4\43\1\120\1\43"+
    "\1\121\7\43\1\122\31\43\1\123\3\43\4\122\1\0"+
    "\1\45\1\0\1\43\1\44\1\45\1\43\1\124\2\43"+
    "\1\125\4\124\2\43\1\124\1\43\2\126\3\43\14\124"+
    "\5\43\11\124\1\43\3\126\1\0\1\45\1\126\1\43"+
    "\1\44\1\45\1\43\1\127\3\43\4\127\2\43\1\127"+
    "\6\43\14\127\2\43\1\130\2\43\11\127\4\43\1\0"+
    "\1\45\1\0\1\43\1\44\1\131\60\43\1\0\1\131"+
    "\1\0\1\43\1\44\1\45\1\43\1\132\3\43\4\132"+
    "\2\43\1\132\6\43\14\132\5\43\11\132\4\43\1\0"+
    "\1\45\1\0\1\43\1\44\1\45\11\43\1\133\46\43"+
    "\1\0\1\45\1\0\1\43\1\44\1\45\1\43\1\134"+
    "\3\43\4\134\2\43\1\134\6\43\14\134\5\43\11\134"+
    "\4\43\1\0\1\45\1\0\1\43\1\44\1\45\42\43"+
    "\1\135\15\43\1\0\1\45\1\0\1\43\1\44\1\136"+
    "\60\43\1\0\1\136\1\0\1\43\1\44\1\45\1\43"+
    "\1\137\3\43\4\137\2\43\1\137\6\43\14\137\5\43"+
    "\11\137\4\43\1\0\1\45\1\0\1\43\1\44\1\45"+
    "\1\43\1\140\3\43\4\140\2\43\1\140\6\43\14\140"+
    "\5\43\11\140\4\43\1\0\1\45\1\0\1\43\1\44"+
    "\1\45\11\43\1\141\46\43\1\0\1\45\1\0\1\43"+
    "\1\44\1\45\1\43\1\142\3\43\4\142\2\43\1\142"+
    "\6\43\14\142\5\43\11\142\4\43\1\0\1\45\1\0"+
    "\1\43\1\44\1\45\26\43\1\143\1\43\1\144\27\43"+
    "\1\0\1\45\70\0\1\44\66\0\1\45\61\0\1\45"+
    "\4\0\1\145\73\0\1\146\103\0\1\147\42\0\1\55"+
    "\3\0\4\55\2\0\1\55\6\0\14\55\5\0\11\55"+
    "\11\0\1\150\4\0\1\151\54\0\1\150\12\0\1\152"+
    "\56\0\1\153\14\0\1\154\44\0\1\153\5\0\1\61"+
    "\3\0\4\61\2\0\1\61\6\0\14\61\5\0\11\61"+
    "\13\0\1\63\3\0\4\63\2\0\1\63\1\0\2\63"+
    "\3\0\14\63\5\0\11\63\1\0\3\63\2\0\1\63"+
    "\26\0\1\155\71\0\1\156\71\0\1\157\33\0\1\71"+
    "\3\0\4\71\2\0\1\71\6\0\14\71\5\0\11\71"+
    "\13\0\1\73\3\0\4\73\2\0\1\73\1\0\2\73"+
    "\3\0\14\73\5\0\11\73\1\0\3\73\2\0\1\73"+
    "\4\0\1\77\3\0\5\77\1\0\1\77\1\0\2\77"+
    "\3\0\14\77\5\0\11\77\1\0\3\77\2\0\1\77"+
    "\2\0\1\100\41\0\1\160\17\0\1\100\12\0\1\161"+
    "\111\0\1\162\61\0\1\163\65\0\1\164\70\0\1\165"+
    "\33\0\1\107\2\0\1\166\1\167\55\0\1\107\27\0"+
    "\1\170\71\0\1\171\70\0\1\172\11\0\1\173\46\0"+
    "\1\174\30\0\1\175\35\0\1\176\64\0\1\177\104\0"+
    "\1\200\47\0\1\201\34\0\1\202\1\0\5\202\1\203"+
    "\56\202\32\0\1\204\54\0\1\122\35\0\4\122\40\0"+
    "\1\205\34\0\1\124\3\0\4\124\1\206\1\0\1\124"+
    "\1\0\2\126\2\0\1\207\14\124\5\0\11\124\1\0"+
    "\3\126\2\0\1\126\1\210\1\0\64\210\4\0\1\126"+
    "\3\0\4\126\2\0\1\126\1\0\2\126\2\0\1\207"+
    "\14\126\5\0\11\126\1\0\3\126\2\0\1\126\4\0"+
    "\1\127\3\0\5\127\1\0\1\127\1\0\2\127\3\0"+
    "\14\127\5\0\11\127\1\0\3\127\2\0\1\127\2\0"+
    "\1\131\41\0\1\211\17\0\1\131\5\0\1\132\3\0"+
    "\4\132\2\0\1\132\6\0\14\132\5\0\11\132\13\0"+
    "\1\134\3\0\4\134\2\0\1\134\1\0\2\134\3\0"+
    "\14\134\5\0\11\134\1\0\3\134\2\0\1\134\2\0"+
    "\1\136\3\0\1\212\26\0\1\213\26\0\1\136\5\0"+
    "\1\214\3\0\4\214\1\215\1\0\1\214\6\0\14\214"+
    "\5\0\11\214\13\0\1\140\3\0\4\140\2\0\1\140"+
    "\6\0\14\140\5\0\11\140\13\0\1\142\3\0\4\142"+
    "\2\0\1\142\1\0\2\142\3\0\14\142\5\0\11\142"+
    "\1\0\3\142\2\0\1\142\12\0\1\216\107\0\1\217"+
    "\31\0\1\145\1\0\64\145\34\0\1\220\42\0\1\221"+
    "\65\0\1\222\103\0\1\223\71\0\1\224\45\0\1\225"+
    "\104\0\1\226\44\0\1\227\105\0\1\230\64\0\1\231"+
    "\72\0\1\232\32\0\1\233\61\0\1\233\3\0\1\234"+
    "\61\0\1\234\34\0\1\235\60\0\1\236\2\0\1\237"+
    "\64\0\1\240\74\0\1\241\61\0\1\242\114\0\1\243"+
    "\56\0\1\244\52\0\1\245\36\0\1\246\105\0\1\247"+
    "\103\0\1\250\55\0\1\251\32\0\1\252\3\0\4\252"+
    "\2\0\1\252\6\0\14\252\5\0\11\252\11\0\1\207"+
    "\1\0\1\126\3\0\4\126\2\0\1\126\1\0\2\126"+
    "\3\0\14\126\5\0\11\126\1\0\3\126\1\0\1\207"+
    "\1\126\1\210\1\0\5\210\1\253\56\210\2\0\1\254"+
    "\61\0\1\254\50\0\1\255\22\0\1\256\3\0\4\256"+
    "\2\0\1\256\6\0\14\256\5\0\11\256\20\0\1\257"+
    "\127\0\1\260\37\0\1\261\74\0\1\262\43\0\1\263"+
    "\101\0\1\264\73\0\1\265\42\0\1\266\102\0\1\267"+
    "\73\0\1\270\70\0\1\271\74\0\1\270\71\0\1\272"+
    "\46\0\1\273\57\0\1\274\51\0\1\275\107\0\1\276"+
    "\43\0\1\277\110\0\1\300\61\0\1\301\104\0\1\302"+
    "\47\0\1\303\65\0\1\304\47\0\1\305\106\0\1\306"+
    "\44\0\1\250\56\0\1\252\3\0\4\252\2\0\1\252"+
    "\1\0\2\252\3\0\14\252\5\0\11\252\1\0\3\252"+
    "\2\0\1\252\11\0\1\307\60\0\1\256\3\0\4\256"+
    "\2\0\1\256\1\0\2\256\3\0\14\256\5\0\11\256"+
    "\1\0\3\256\2\0\1\256\26\0\1\310\74\0\1\311"+
    "\41\0\1\312\104\0\1\313\50\0\1\314\1\315\101\0"+
    "\1\316\67\0\1\317\65\0\1\320\63\0\1\321\71\0"+
    "\1\322\63\0\1\323\67\0\1\243\66\0\1\324\64\0"+
    "\1\325\66\0\1\326\56\0\1\327\66\0\1\330\75\0"+
    "\1\331\56\0\1\332\75\0\1\333\36\0\1\334\105\0"+
    "\1\335\65\0\1\336\103\0\1\337\72\0\1\340\44\0"+
    "\1\341\46\0\1\315\54\0\1\342\117\0\1\343\65\0"+
    "\1\344\76\0\1\345\54\0\1\346\64\0\1\347\63\0"+
    "\1\350\73\0\1\351\36\0\1\352\66\0\1\353\107\0"+
    "\1\354\70\0\1\355\101\0\1\356\44\0\1\357\41\0"+
    "\1\360\117\0\1\361\55\0\1\362\74\0\1\363\40\0"+
    "\1\364\66\0\1\365\55\0\1\366\120\0\1\367\67\0"+
    "\1\370\51\0\1\371\71\0\1\270\110\0\1\372\66\0"+
    "\1\301\22\0\1\373\105\0\1\324\73\0\1\374\61\0"+
    "\1\375\43\0\1\376\113\0\1\377\62\0\1\u0100\52\0"+
    "\1\u0101\35\0\4\u0101\35\0\1\u0102\46\0\1\u0103\63\0"+
    "\1\u0103\110\0\1\u0104\33\0\1\365\3\0\1\u0105\55\0"+
    "\1\365\4\0\1\u0106\4\0\4\u0106\1\0\2\u0106\2\0"+
    "\1\u0106\3\0\15\u0106\4\0\11\u0106\2\0\2\u0106\42\0"+
    "\1\u0107\37\0\1\u0108\56\0\1\371\6\0\1\u0109\20\0"+
    "\1\u010a\5\0\1\u010b\23\0\1\371\35\0\1\u010c\65\0"+
    "\1\u010d\65\0\1\301\37\0\1\u010e\113\0\1\u010f\57\0"+
    "\1\u0110\74\0\1\351\45\0\1\u0111\104\0\1\u0112\33\0"+
    "\1\u0104\3\0\1\u0113\55\0\1\u0104\35\0\1\u0114\65\0"+
    "\1\u0115\57\0\1\u0116\47\0\1\u0117\107\0\1\u0118\66\0"+
    "\1\301\62\0\1\u0119\64\0\1\u011a\76\0\1\u011b\46\0"+
    "\1\301\35\0\4\301\40\0\1\u011c\57\0\1\u011d\76\0"+
    "\1\u011e\56\0\1\u011f\70\0\1\u0120\62\0\1\301\45\0"+
    "\1\301\65\0\1\u0121\65\0\1\u0122\65\0\1\u0123\64\0"+
    "\1\u0124\103\0\1\u0125\67\0\1\u0126\43\0\1\u0127\113\0"+
    "\1\u0128\66\0\1\u0129\41\0\1\u012a\114\0\1\u012b\65\0"+
    "\1\u012c\40\0\1\u012d\105\0\1\u012e\64\0\1\u012f\67\0"+
    "\1\u0130\65\0\1\u0131\65\0\1\u0132\100\0\1\u0133\52\0"+
    "\1\u0134\60\0\1\u0135\75\0\1\u0136\52\0\1\u0137\66\0"+
    "\1\301\75\0\1\270\41\0\1\270\102\0\1\u0138\41\0"+
    "\1\u0137\7\0\1\u0139\25\0\1\u013a\23\0\1\u0137\14\0"+
    "\1\u013b\100\0\1\u013c\74\0\1\u013d\41\0\1\u013e\114\0"+
    "\1\u013f\36\0\1\u0140\76\0\1\u0141\115\0\1\u0142\47\0"+
    "\1\u0143\63\0\1\u0144\67\0\1\u0145\77\0\1\u0146\53\0"+
    "\1\u0147\63\0\1\u0148\64\0\1\u0149\47\0\1\u014a\74\0"+
    "\1\u014b\75\0\1\u014c\64\0\1\u014d\45\0\1\u014e\130\0"+
    "\1\u014f\60\0\1\u0150\72\0\1\u0151\33\0\1\u0152\75\0"+
    "\1\u0153\45\0\1\u0154\110\0\1\u0155\70\0\1\u0156\61\0"+
    "\1\u0157\100\0\1\u0158\52\0\1\u0159\37\0\1\u015a\70\0"+
    "\1\u015b\124\0\1\u015c\24\0\1\u015d\107\0\1\u015e\103\0"+
    "\1\u015f\30\0\1\u0160\13\0\1\u0161\11\0\1\u0162\12\0"+
    "\1\u0163\67\0\1\u0164\40\0\1\u0165\72\0\1\u0166\55\0"+
    "\1\u0160\75\0\1\u0167\56\0\1\u0168\73\0\1\u0169\64\0"+
    "\1\u016a\100\0\1\u016b\30\0\1\u016c\113\0\1\u016b\65\0"+
    "\1\u016d\65\0\1\u016e\62\0\1\u016f\65\0\1\u0170\65\0"+
    "\1\u0171\65\0\1\u0172\40\0\1\u0172\124\0\1\u0173\57\0"+
    "\1\u0174\50\0\1\270\73\0\1\u0175\45\0\1\u0176\106\0"+
    "\1\u0177\111\0\1\u0178\63\0\1\u016f\46\0\1\u0179\62\0"+
    "\1\u017a\67\0\1\u017b\61\0\1\u017c\46\0\1\u017d\62\0"+
    "\1\u017e\70\0\1\u017f\41\0\1\u0180\44\0\1\u0181\70\0"+
    "\1\u0182\77\0\1\u016e\55\0\1\u0183\41\0\1\u016e\52\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[18738];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\42\0\1\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\7\1\1\11\21\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\22\0\1\1\5\0\1\11\21\0\2\1\15\0"+
    "\3\1\1\0\1\1\11\0\1\11\10\0\1\11\4\0"+
    "\1\11\7\0\1\11\26\0\1\1\35\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\12\0\2\11\31\0\1\11"+
    "\3\0\1\1\13\0\1\1\20\0\1\1\64\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[387];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 50: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 51: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 52: break;
          case 4: 
            { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
            }
          case 53: break;
          case 5: 
            { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
            }
          case 54: break;
          case 6: 
            { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
            }
          case 55: break;
          case 7: 
            { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
            }
          case 56: break;
          case 8: 
            { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
            }
          case 57: break;
          case 9: 
            { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 58: break;
          case 10: 
            { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 59: break;
          case 11: 
            { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 60: break;
          case 12: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
            }
          case 61: break;
          case 13: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
            }
          case 62: break;
          case 14: 
            { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
            }
          case 63: break;
          case 15: 
            { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
            }
          case 64: break;
          case 16: 
            { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
            }
          case 65: break;
          case 17: 
            { yybegin(NODE_TYPE_INHERITANCE);
            }
          case 66: break;
          case 18: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
            }
          case 67: break;
          case 19: 
            { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
            }
          case 68: break;
          case 20: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 69: break;
          case 21: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 70: break;
          case 22: 
            { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
            }
          case 71: break;
          case 23: 
            { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
            }
          case 72: break;
          case 24: 
            { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 73: break;
          case 25: 
            { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 74: break;
          case 26: 
            { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 75: break;
          case 27: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 76: break;
          case 28: 
            { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 77: break;
          case 29: 
            { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 78: break;
          case 30: 
            { yybegin(YYINITIAL); return CndTypes.NODE_TYPE_NAME;
            }
          case 79: break;
          case 31: 
            { yybegin(YYINITIAL); return CndTypes.COMMENT;
            }
          case 80: break;
          case 32: 
            { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
            }
          case 81: break;
          case 33: 
            { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
            }
          case 82: break;
          case 34: 
            { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 83: break;
          case 35: 
            { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 84: break;
          case 36: 
            { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
            }
          case 85: break;
          case 37: 
            { yybegin(PROPERTY_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 86: break;
          case 38: 
            { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 87: break;
          case 39: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 88: break;
          case 40: 
            { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE;
            }
          case 89: break;
          case 41: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 90: break;
          case 42: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
            }
          case 91: break;
          case 43: 
            { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
            }
          case 92: break;
          case 44: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
            }
          case 93: break;
          case 45: 
            { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
            }
          case 94: break;
          case 46: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
            }
          case 95: break;
          case 47: 
            { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
            }
          case 96: break;
          case 48: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
            }
          case 97: break;
          case 49: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
            }
          case 98: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
