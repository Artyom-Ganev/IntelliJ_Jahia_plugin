/* The following code was generated by JFlex 1.4.3 on 25/09/16 23:16 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 25/09/16 23:16 from the specification file
 * <tt>E:/Projects/Smile/IntelliJ_Jahia_plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int EXTEND_COLON_DONE = 66;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int EXTEND_BEGIN = 62;
  public static final int NAMESPACES_OVER = 10;
  public static final int PROPERTY_PLUS_NAME_DONE = 48;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 60;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 50;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int EXTEND_ITEM_BEGIN = 70;
  public static final int PROPERTY_ADDENDUM_ATTR = 40;
  public static final int EXTEND_DONE = 68;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 52;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int PROPERTY_PLUS_TYPE_DONE = 56;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int EXTEND_NAMESPACE_DONE = 64;
  public static final int PROPERTY_PLUS_COLON_DONE = 54;
  public static final int PROPERTY_DEFAULT_BEGIN = 42;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_ADDENDUM = 38;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int PROPERTY_PLUS_BEGIN = 46;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 44;
  public static final int PROPERTY_PLUS_ADDENDUM = 58;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 31, 31, 
    32, 32, 33, 33, 34, 34, 35, 35
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\1\1\0\1\3\1\2\16\21\4\0\1\3\3\0"+
    "\1\5\2\0\1\10\1\45\1\46\1\44\1\43\1\25\1\42\1\16"+
    "\1\4\1\61\1\50\1\62\1\63\2\65\2\22\1\51\1\22\1\15"+
    "\1\0\1\6\1\7\1\20\2\0\1\17\1\66\15\17\1\70\2\17"+
    "\1\67\1\64\6\17\1\23\1\0\1\24\1\0\1\17\1\0\1\36"+
    "\1\37\1\41\1\34\1\35\1\53\1\60\1\11\1\27\1\17\1\54"+
    "\1\40\1\26\1\31\1\32\1\13\1\17\1\33\1\14\1\12\1\52"+
    "\1\17\1\56\1\30\1\47\1\55\4\0\41\21\2\0\4\5\4\0"+
    "\1\5\2\0\1\21\7\0\1\5\4\0\1\5\5\0\27\5\1\0"+
    "\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0"+
    "\1\5\21\0\160\21\5\5\1\0\2\5\2\0\4\5\10\0\1\5"+
    "\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5"+
    "\1\0\5\21\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5"+
    "\7\0\1\5\1\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21"+
    "\1\0\1\21\10\0\33\5\5\0\3\5\15\0\5\21\6\0\1\5"+
    "\4\0\13\21\5\0\53\5\25\21\12\57\4\0\2\5\1\21\143\5"+
    "\1\0\1\5\10\21\1\0\6\21\2\5\2\21\1\0\4\21\2\5"+
    "\12\57\3\5\2\0\1\5\17\0\1\21\1\5\1\21\36\5\33\21"+
    "\2\0\131\5\13\21\1\5\16\0\12\57\41\5\11\21\2\5\4\0"+
    "\1\5\5\0\26\5\4\21\1\5\11\21\1\5\3\21\1\5\5\21"+
    "\22\0\31\5\3\21\104\0\1\5\1\0\13\5\67\0\33\21\1\0"+
    "\4\21\66\5\3\21\1\5\22\21\1\5\7\21\12\5\2\21\2\0"+
    "\12\57\1\0\7\5\1\0\7\5\1\0\3\21\1\0\10\5\2\0"+
    "\2\5\2\0\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0"+
    "\1\21\1\5\7\21\2\0\2\21\2\0\3\21\1\5\10\0\1\21"+
    "\4\0\2\5\1\0\3\5\2\21\2\0\12\57\4\5\7\0\1\5"+
    "\5\0\3\21\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\2\5\1\0\2\5\2\0\1\21\1\0\5\21"+
    "\4\0\2\21\2\0\3\21\3\0\1\21\7\0\4\5\1\0\1\5"+
    "\7\0\12\57\2\21\3\5\1\21\13\0\3\21\1\0\11\5\1\0"+
    "\3\5\1\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0"+
    "\1\21\1\5\10\21\1\0\3\21\1\0\3\21\2\0\1\5\17\0"+
    "\2\5\2\21\2\0\12\57\1\0\1\5\17\0\3\21\1\0\10\5"+
    "\2\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5"+
    "\2\0\1\21\1\5\7\21\2\0\2\21\2\0\3\21\10\0\2\21"+
    "\4\0\2\5\1\0\3\5\2\21\2\0\12\57\1\0\1\5\20\0"+
    "\1\21\1\5\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5"+
    "\1\0\1\5\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5"+
    "\4\0\5\21\3\0\3\21\1\0\4\21\2\0\1\5\6\0\1\21"+
    "\16\0\12\57\11\0\1\5\7\0\3\21\1\0\10\5\1\0\3\5"+
    "\1\0\27\5\1\0\12\5\1\0\5\5\3\0\1\5\7\21\1\0"+
    "\3\21\1\0\4\21\7\0\2\21\1\0\2\5\6\0\2\5\2\21"+
    "\2\0\12\57\22\0\2\21\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\2\0\1\21\1\5\7\21\1\0\3\21"+
    "\1\0\4\21\7\0\2\21\7\0\1\5\1\0\2\5\2\21\2\0"+
    "\12\57\1\0\2\5\17\0\2\21\1\0\10\5\1\0\3\5\1\0"+
    "\51\5\2\0\1\5\7\21\1\0\3\21\1\0\4\21\1\5\10\0"+
    "\1\21\10\0\2\5\2\21\2\0\12\57\12\0\6\5\2\0\2\21"+
    "\1\0\22\5\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5"+
    "\3\0\1\21\4\0\6\21\1\0\1\21\1\0\10\21\22\0\2\21"+
    "\15\0\60\5\1\21\2\5\7\21\4\0\10\5\10\21\1\0\12\57"+
    "\47\0\2\5\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5"+
    "\6\0\4\5\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5"+
    "\2\0\2\5\1\0\4\5\1\21\2\5\6\21\1\0\2\21\1\5"+
    "\2\0\5\5\1\0\1\5\1\0\6\21\2\0\12\57\2\0\4\5"+
    "\40\0\1\5\27\0\2\21\6\0\12\57\13\0\1\21\1\0\1\21"+
    "\1\0\1\21\4\0\2\21\10\5\1\0\44\5\4\0\24\21\1\0"+
    "\2\21\5\5\13\21\1\0\44\21\11\0\1\21\71\0\53\5\24\21"+
    "\1\5\12\57\6\0\6\5\4\21\4\5\3\21\1\5\3\21\2\5"+
    "\7\21\3\5\4\21\15\5\14\21\1\5\1\21\12\57\4\21\2\0"+
    "\46\5\1\0\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0"+
    "\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0"+
    "\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0"+
    "\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0"+
    "\3\21\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0"+
    "\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\21"+
    "\13\0\22\5\3\21\13\0\22\5\2\21\14\0\15\5\1\0\3\5"+
    "\1\0\2\21\14\0\64\5\40\21\3\0\1\5\3\0\2\5\1\21"+
    "\2\0\12\57\41\0\3\21\2\0\12\57\6\0\130\5\10\0\51\5"+
    "\1\21\1\5\5\0\106\5\12\0\35\5\3\0\14\21\4\0\14\21"+
    "\12\0\12\57\36\5\2\0\5\5\13\0\54\5\4\0\21\21\7\5"+
    "\2\21\6\0\12\57\46\0\27\5\5\21\4\0\65\5\12\21\1\0"+
    "\35\21\2\0\1\21\12\57\6\0\12\57\15\0\1\5\130\0\5\21"+
    "\57\5\21\21\7\5\4\0\12\57\21\0\11\21\14\0\3\21\36\5"+
    "\15\21\2\5\12\57\54\5\16\21\14\0\44\5\24\21\10\0\12\57"+
    "\3\0\3\5\12\57\44\5\122\0\3\21\1\0\25\21\4\5\1\21"+
    "\4\5\3\21\2\5\11\0\300\5\47\21\25\0\4\21\u0116\5\2\0"+
    "\6\5\2\0\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0"+
    "\1\5\1\0\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0"+
    "\1\5\3\0\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0"+
    "\15\5\5\0\3\5\1\0\7\5\16\0\5\21\32\0\5\21\20\0"+
    "\2\5\23\0\1\5\13\0\5\21\5\0\6\21\1\0\1\5\15\0"+
    "\1\5\20\0\15\5\3\0\33\5\25\0\15\21\4\0\1\21\3\0"+
    "\14\21\21\0\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0"+
    "\5\5\6\0\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0"+
    "\13\5\2\0\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0"+
    "\57\5\1\0\57\5\1\0\205\5\6\0\4\5\3\21\2\5\14\0"+
    "\46\5\1\0\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0"+
    "\1\21\27\5\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\21"+
    "\57\0\1\5\u01d5\0\3\5\31\0\11\5\6\21\1\0\5\5\2\0"+
    "\5\5\4\0\126\5\2\0\2\21\2\0\3\5\1\0\132\5\1\0"+
    "\4\5\5\0\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0"+
    "\u19b6\5\112\0\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0"+
    "\20\5\12\57\2\5\24\0\57\5\1\21\4\0\12\21\1\0\31\5"+
    "\7\0\1\21\120\5\2\21\45\0\11\5\2\0\147\5\2\0\4\5"+
    "\1\0\4\5\14\0\13\5\115\0\12\5\1\21\3\5\1\21\4\5"+
    "\1\21\27\5\5\21\20\0\1\5\7\0\64\5\14\0\2\21\62\5"+
    "\21\21\13\0\12\57\6\0\22\21\6\5\3\0\1\5\4\0\12\57"+
    "\34\5\10\21\2\0\27\5\15\21\14\0\35\5\3\0\4\21\57\5"+
    "\16\21\16\0\1\5\12\57\46\0\51\5\16\21\11\0\3\5\1\21"+
    "\10\5\2\21\2\0\12\57\6\0\27\5\3\0\1\5\1\21\4\0"+
    "\60\5\1\21\1\5\3\21\2\5\2\21\5\5\2\21\1\5\1\21"+
    "\1\5\30\0\3\5\2\0\13\5\5\21\2\0\3\5\2\21\12\0"+
    "\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0"+
    "\43\5\10\21\1\0\2\21\2\0\12\57\6\0\u2ba4\5\14\0\27\5"+
    "\4\0\61\5\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5"+
    "\5\0\1\5\1\21\12\5\1\0\15\5\1\0\5\5\1\0\1\5"+
    "\1\0\2\5\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5"+
    "\2\0\66\5\50\0\15\5\3\0\20\21\20\0\7\21\14\0\2\5"+
    "\30\0\3\5\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\21"+
    "\4\0\1\5\13\0\12\57\7\0\32\5\4\0\1\5\1\0\32\5"+
    "\13\0\131\5\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5"+
    "\3\0\2\5\3\0\2\5\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\25\0\1\1\16\0\1\2\2\3\1\4\1\2\1\5"+
    "\1\6\2\2\1\7\1\10\1\11\3\2\1\12\1\13"+
    "\1\14\1\15\1\16\3\2\1\17\1\20\1\21\3\22"+
    "\1\23\1\24\1\4\5\2\1\25\1\26\1\4\12\2"+
    "\3\1\1\27\2\1\1\30\1\2\1\30\2\31\1\4"+
    "\1\32\1\33\1\34\1\35\1\4\1\2\1\36\1\37"+
    "\1\40\1\4\1\41\3\2\1\42\3\0\1\43\2\0"+
    "\1\44\3\0\1\4\1\45\7\0\1\4\17\0\1\1"+
    "\1\46\5\1\3\0\1\47\24\0\1\50\1\51\16\0"+
    "\2\1\1\52\2\1\2\30\1\53\1\0\1\54\13\0"+
    "\1\55\2\0\1\56\10\0\1\57\5\0\1\1\1\60"+
    "\1\1\10\0\1\61\22\0\1\1\1\62\11\0\1\63"+
    "\1\64\1\65\14\0\1\1\2\0\1\66\7\0\1\67"+
    "\11\0\2\1\2\0\1\70\1\71\1\0\1\72\12\0"+
    "\1\1\1\0\1\73\1\74\11\0\1\1\10\0\3\1"+
    "\1\0\1\63\6\0\1\1\10\0\1\1\1\75\3\0"+
    "\1\76\3\0\2\1\7\0\1\1\1\63\6\0\1\1"+
    "\6\0\1\1\1\77\5\0\1\1\3\0\1\76\1\0"+
    "\1\1\5\0\1\1\5\0\1\1\5\0\1\1\3\0"+
    "\1\76\1\0\1\1\5\0\1\1\5\0\1\1\5\0"+
    "\1\1\1\0\1\77\3\0\1\76\2\1\4\0\1\1"+
    "\7\0\1\1\10\0\1\1\7\0\1\1\6\0\1\62"+
    "\43\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\71\0\162\0\253\0\344\0\u011d\0\u0156\0\u018f"+
    "\0\u01c8\0\u0201\0\u023a\0\u0273\0\u02ac\0\u02e5\0\u031e\0\u0357"+
    "\0\u0390\0\u03c9\0\u0402\0\u043b\0\u0474\0\u04ad\0\u04e6\0\u051f"+
    "\0\u0558\0\u0591\0\u05ca\0\u0603\0\u063c\0\u0675\0\u06ae\0\u06e7"+
    "\0\u0720\0\u0759\0\u0792\0\u07cb\0\u0804\0\u0804\0\u083d\0\u0876"+
    "\0\u08af\0\u0804\0\u0804\0\u08e8\0\u0921\0\u0804\0\u0804\0\u095a"+
    "\0\u0993\0\u09cc\0\u0a05\0\u0a3e\0\u0804\0\u0a77\0\u0804\0\u0804"+
    "\0\u0ab0\0\u0ae9\0\u0b22\0\u0b5b\0\u0804\0\u0b94\0\u0804\0\u083d"+
    "\0\u0bcd\0\u0804\0\u0c06\0\u0c3f\0\u0c78\0\u0cb1\0\u0cea\0\u0d23"+
    "\0\u0d5c\0\u0804\0\u0d95\0\u0dce\0\u0e07\0\u0e40\0\u0e79\0\u0eb2"+
    "\0\u0eeb\0\u0f24\0\u0f5d\0\u0f96\0\u0fcf\0\u1008\0\u1041\0\u107a"+
    "\0\u10b3\0\u10ec\0\u1125\0\u115e\0\u1197\0\u11d0\0\u1209\0\u1242"+
    "\0\u0804\0\u127b\0\u12b4\0\u0804\0\u12ed\0\u0804\0\u1326\0\u135f"+
    "\0\u1398\0\u0804\0\u13d1\0\u140a\0\u0804\0\u1443\0\u147c\0\u14b5"+
    "\0\u14ee\0\u1527\0\u1560\0\u0993\0\u0804\0\u1599\0\u0a05\0\u0804"+
    "\0\u15d2\0\u160b\0\u1644\0\u0bcd\0\u0804\0\u167d\0\u16b6\0\u16ef"+
    "\0\u1728\0\u1761\0\u179a\0\u17d3\0\u0d95\0\u180c\0\u1845\0\u187e"+
    "\0\u18b7\0\u18f0\0\u1929\0\u1962\0\u199b\0\u19d4\0\u1a0d\0\u1a46"+
    "\0\u1a7f\0\u1ab8\0\u1af1\0\u1b2a\0\u1b63\0\u1b63\0\u1b9c\0\u1bd5"+
    "\0\u1c0e\0\u1c47\0\u1c80\0\u1cb9\0\u1cf2\0\u1d2b\0\u0804\0\u1d64"+
    "\0\u1d9d\0\u135f\0\u1dd6\0\u1e0f\0\u1e48\0\u1e81\0\u1eba\0\u1ef3"+
    "\0\u1f2c\0\u1f65\0\u1f9e\0\u1fd7\0\u2010\0\u2049\0\u2082\0\u20bb"+
    "\0\u20f4\0\u212d\0\u2166\0\u180c\0\u1845\0\u219f\0\u21d8\0\u2211"+
    "\0\u224a\0\u2283\0\u22bc\0\u22f5\0\u232e\0\u2367\0\u23a0\0\u23d9"+
    "\0\u2412\0\u244b\0\u2484\0\u24bd\0\u24f6\0\u1c0e\0\u252f\0\u2568"+
    "\0\u25a1\0\u1d2b\0\u1d64\0\u25da\0\u2613\0\u264c\0\u2685\0\u26be"+
    "\0\u26f7\0\u2730\0\u2769\0\u27a2\0\u27db\0\u2814\0\u284d\0\u2886"+
    "\0\u0804\0\u28bf\0\u28f8\0\u0804\0\u2931\0\u296a\0\u29a3\0\u29dc"+
    "\0\u2a15\0\u2a4e\0\u2a87\0\u2ac0\0\u0804\0\u2af9\0\u2b32\0\u2b6b"+
    "\0\u2ba4\0\u2bdd\0\u2c16\0\u1041\0\u2c4f\0\u2c88\0\u2cc1\0\u2cfa"+
    "\0\u2d33\0\u2d6c\0\u2da5\0\u2dde\0\u2e17\0\u0804\0\u2e50\0\u2e89"+
    "\0\u2ec2\0\u2efb\0\u2f34\0\u2f6d\0\u2fa6\0\u2fdf\0\u3018\0\u3051"+
    "\0\u308a\0\u30c3\0\u30fc\0\u3135\0\u316e\0\u31a7\0\u31e0\0\u3219"+
    "\0\u3252\0\u1041\0\u328b\0\u32c4\0\u32fd\0\u3336\0\u336f\0\u33a8"+
    "\0\u33e1\0\u341a\0\u3453\0\u348c\0\u0804\0\u0804\0\u34c5\0\u34fe"+
    "\0\u3537\0\u3570\0\u35a9\0\u35e2\0\u361b\0\u3654\0\u368d\0\u36c6"+
    "\0\u36ff\0\u3738\0\u3771\0\u37aa\0\u37e3\0\u0804\0\u381c\0\u3855"+
    "\0\u388e\0\u38c7\0\u3900\0\u348c\0\u3939\0\u0804\0\u3972\0\u39ab"+
    "\0\u39e4\0\u3a1d\0\u3a56\0\u3a8f\0\u3ac8\0\u3b01\0\u3b3a\0\u3b73"+
    "\0\u3bac\0\u3be5\0\u3c1e\0\u0804\0\u388e\0\u3c57\0\u0804\0\u3c90"+
    "\0\u3cc9\0\u3d02\0\u3d3b\0\u3d74\0\u3dad\0\u3de6\0\u3e1f\0\u3e58"+
    "\0\u3e91\0\u3eca\0\u3f03\0\u0804\0\u0804\0\u3f3c\0\u3f75\0\u3fae"+
    "\0\u3fe7\0\u4020\0\u4059\0\u4092\0\u40cb\0\u4104\0\u413d\0\u4176"+
    "\0\u41af\0\u41e8\0\u4221\0\u425a\0\u4293\0\u42cc\0\u4305\0\u433e"+
    "\0\u4377\0\u43b0\0\u43e9\0\u4422\0\u445b\0\u4494\0\u44cd\0\u4506"+
    "\0\u453f\0\u4578\0\u45b1\0\u45ea\0\u4623\0\u465c\0\u4695\0\u46ce"+
    "\0\u4707\0\u4740\0\u4779\0\u47b2\0\u0804\0\u47eb\0\u4824\0\u485d"+
    "\0\u4896\0\u48cf\0\u4908\0\u4941\0\u497a\0\u49b3\0\u49ec\0\u4a25"+
    "\0\u4a5e\0\u4896\0\u4a97\0\u4ad0\0\u4b09\0\u4b42\0\u0804\0\u4b7b"+
    "\0\u4bb4\0\u4bed\0\u4c26\0\u4c5f\0\u4c98\0\u4cd1\0\u4d0a\0\u4d43"+
    "\0\u4d7c\0\u4db5\0\u4dee\0\u4e27\0\u4e60\0\u4e99\0\u4ed2\0\u4f0b"+
    "\0\u4f44\0\u4f7d\0\u4fb6\0\u4fef\0\u5028\0\u5061\0\u509a\0\u50d3"+
    "\0\u510c\0\u5145\0\u517e\0\u51b7\0\u51f0\0\u5229\0\u5262\0\u529b"+
    "\0\u52d4\0\u530d\0\u5346\0\u537f\0\u53b8\0\u53f1\0\u542a\0\u5463"+
    "\0\u549c\0\u54d5\0\u550e\0\u5547\0\u5580\0\u55b9\0\u55f2\0\u562b"+
    "\0\u5664\0\u569d\0\u56d6\0\u570f\0\u5748\0\u5781\0\u57ba\0\u57f3"+
    "\0\u582c\0\u5865\0\u589e\0\u58d7\0\u5910\0\u5949\0\u5982\0\u59bb"+
    "\0\u59f4\0\u5a2d\0\u5a66\0\u5a9f\0\u5ad8\0\u0804\0\u5b11\0\u5b4a"+
    "\0\u5b83\0\u0804\0\u5bbc\0\u5bf5\0\u5c2e\0\u5c67\0\u5ca0\0\u5cd9"+
    "\0\u5d12\0\u5d4b\0\u5d84\0\u5dbd\0\u5df6\0\u5e2f\0\u5e68\0\u5ea1"+
    "\0\u5eda\0\u5f13\0\u5f4c\0\u5f85\0\u5fbe\0\u5ff7\0\u6030\0\u6069"+
    "\0\u60a2\0\u60db\0\u6114\0\u614d\0\u6186\0\u61bf\0\u61f8\0\u6231"+
    "\0\u626a\0\u62a3\0\u62dc\0\u6315\0\u634e\0\u6387\0\u63c0\0\u63f9"+
    "\0\u1b63\0\u6432\0\u646b\0\u64a4\0\u64dd\0\u6516\0\u654f\0\u6588"+
    "\0\u65c1\0\u65fa\0\u6633\0\u666c\0\u66a5\0\u66de\0\u6717\0\u6750"+
    "\0\u6789\0\u67c2\0\u67fb\0\u6834\0\u686d\0\u68a6\0\u68df\0\u6918"+
    "\0\u6951\0\u698a\0\u69c3\0\u69fc\0\u6a35\0\u6a6e\0\u6aa7\0\u6ae0"+
    "\0\u6b19\0\u6b52\0\u6b8b\0\u6bc4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\45\1\46\1\47\1\50\1\51\1\45\1\52\14\45"+
    "\1\53\3\45\1\54\5\45\1\55\4\45\1\56\1\57"+
    "\26\45\1\46\1\47\1\50\1\45\1\60\3\45\4\60"+
    "\2\45\1\60\6\45\14\60\5\45\1\60\2\45\5\60"+
    "\1\45\1\60\3\45\1\60\1\45\3\60\1\45\1\46"+
    "\1\47\1\50\3\45\1\61\62\45\1\46\1\47\1\50"+
    "\5\45\1\62\60\45\1\46\1\47\1\50\4\45\1\63"+
    "\61\45\1\46\1\47\1\50\66\45\1\46\1\47\1\50"+
    "\1\45\1\64\3\45\4\64\2\45\1\64\6\45\14\64"+
    "\5\45\1\64\2\45\5\64\1\45\1\64\3\45\1\64"+
    "\1\45\3\64\1\45\1\46\1\47\1\50\11\45\1\65"+
    "\54\45\1\46\1\47\1\50\1\45\1\66\3\45\4\66"+
    "\2\45\1\66\6\45\14\66\5\45\1\66\2\45\5\66"+
    "\1\45\1\66\3\45\1\66\1\45\3\66\1\45\1\46"+
    "\1\47\1\50\20\45\1\67\45\45\1\46\1\47\1\50"+
    "\14\45\1\70\5\45\1\71\3\45\1\72\3\45\1\73"+
    "\33\45\1\46\1\47\1\50\1\45\1\74\3\45\4\74"+
    "\2\45\1\74\6\45\14\74\5\45\1\74\2\45\5\74"+
    "\1\45\1\74\3\45\1\74\1\45\3\74\1\45\1\46"+
    "\1\47\1\50\11\45\1\75\54\45\1\46\1\47\1\50"+
    "\1\45\1\76\3\45\4\76\2\45\1\76\6\45\14\76"+
    "\5\45\1\76\2\45\5\76\1\45\1\76\3\45\1\76"+
    "\1\45\3\76\1\77\1\46\1\100\1\101\21\77\1\102"+
    "\43\77\1\45\1\46\1\47\1\50\1\45\1\103\3\45"+
    "\4\103\2\45\1\103\6\45\14\103\5\45\1\103\2\45"+
    "\5\103\1\45\1\103\3\45\1\103\1\45\3\103\1\45"+
    "\1\46\1\47\1\104\66\45\1\46\1\47\1\50\10\45"+
    "\1\105\17\45\1\106\2\45\1\107\1\110\15\45\1\111"+
    "\13\45\1\46\1\47\1\50\42\45\1\112\23\45\1\46"+
    "\1\47\1\113\66\45\1\46\1\47\1\114\5\45\1\115"+
    "\1\45\1\116\1\117\11\45\1\120\1\121\1\45\1\122"+
    "\1\123\3\45\1\124\1\125\13\45\1\126\15\45\1\127"+
    "\1\46\1\47\5\127\1\130\1\127\1\131\7\127\1\132"+
    "\6\127\1\133\16\127\2\132\1\127\1\134\3\127\1\132"+
    "\1\127\3\132\1\127\1\132\3\127\1\45\1\46\1\47"+
    "\1\50\1\45\1\135\2\45\1\136\4\135\2\45\1\135"+
    "\1\45\2\137\3\45\14\135\5\45\1\135\2\137\5\135"+
    "\1\137\1\135\3\137\1\135\1\137\3\135\1\45\1\46"+
    "\1\47\1\50\1\45\1\140\3\45\4\140\2\45\1\140"+
    "\6\45\14\140\2\45\1\141\2\45\1\140\2\45\5\140"+
    "\1\45\1\140\3\45\1\140\1\45\3\140\1\45\1\46"+
    "\1\47\1\142\66\45\1\46\1\47\1\50\1\45\1\143"+
    "\3\45\4\143\2\45\1\143\6\45\14\143\5\45\1\143"+
    "\2\45\5\143\1\45\1\143\3\45\1\143\1\45\3\143"+
    "\1\45\1\46\1\47\1\50\11\45\1\144\54\45\1\46"+
    "\1\47\1\50\1\45\1\145\3\45\4\145\2\45\1\145"+
    "\6\45\14\145\5\45\1\145\2\45\5\145\1\45\1\145"+
    "\3\45\1\145\1\45\3\145\1\45\1\46\1\47\1\50"+
    "\42\45\1\146\23\45\1\46\1\47\1\147\66\45\1\46"+
    "\1\47\1\50\1\45\1\150\3\45\4\150\2\45\1\150"+
    "\6\45\14\150\5\45\1\150\2\45\5\150\1\45\1\150"+
    "\3\45\1\150\1\45\3\150\1\45\1\46\1\47\1\50"+
    "\1\45\1\151\3\45\4\151\2\45\1\151\6\45\14\151"+
    "\5\45\1\151\2\45\5\151\1\45\1\151\3\45\1\151"+
    "\1\45\3\151\1\45\1\46\1\47\1\50\11\45\1\152"+
    "\54\45\1\46\1\47\1\50\1\45\1\153\3\45\4\153"+
    "\2\45\1\153\6\45\14\153\5\45\1\153\2\45\5\153"+
    "\1\45\1\153\3\45\1\153\1\45\3\153\1\45\1\46"+
    "\1\47\1\154\21\45\1\155\44\45\1\46\1\47\1\50"+
    "\26\45\1\156\1\45\1\157\3\45\1\160\30\45\72\0"+
    "\1\46\72\0\1\50\71\0\1\161\76\0\1\162\106\0"+
    "\1\163\45\0\1\60\3\0\4\60\2\0\1\60\6\0"+
    "\14\60\5\0\1\60\2\0\5\60\1\0\1\60\3\0"+
    "\1\60\1\0\3\60\3\0\1\164\4\0\1\165\72\0"+
    "\1\166\61\0\1\167\14\0\1\170\55\0\1\64\3\0"+
    "\4\64\2\0\1\64\6\0\14\64\5\0\1\64\2\0"+
    "\5\64\1\0\1\64\3\0\1\64\1\0\3\64\5\0"+
    "\1\66\3\0\4\66\2\0\1\66\1\0\2\66\3\0"+
    "\14\66\5\0\22\66\27\0\1\171\74\0\1\172\74\0"+
    "\1\173\36\0\1\74\3\0\4\74\2\0\1\74\6\0"+
    "\14\74\5\0\1\74\2\0\5\74\1\0\1\74\3\0"+
    "\1\74\1\0\3\74\5\0\1\76\3\0\4\76\2\0"+
    "\1\76\1\0\2\76\3\0\14\76\5\0\22\76\3\0"+
    "\1\174\21\0\1\102\50\0\1\103\3\0\5\103\1\0"+
    "\1\103\1\0\2\103\3\0\14\103\5\0\22\103\3\0"+
    "\1\104\41\0\1\175\35\0\1\176\110\0\1\177\3\0"+
    "\1\200\61\0\1\201\2\0\1\202\70\0\1\203\73\0"+
    "\1\204\36\0\1\205\3\0\1\206\64\0\1\114\2\0"+
    "\1\207\111\0\1\210\74\0\1\211\67\0\1\212\74\0"+
    "\1\213\13\0\1\214\47\0\1\215\16\0\1\216\52\0"+
    "\1\217\67\0\1\220\70\0\1\221\20\0\1\222\50\0"+
    "\1\223\74\0\1\224\32\0\1\127\2\0\66\127\1\225"+
    "\2\0\5\225\1\226\11\225\1\227\25\225\2\227\5\225"+
    "\1\227\1\225\3\227\1\225\1\227\3\225\1\127\2\0"+
    "\30\127\1\230\36\127\2\0\13\127\1\231\3\127\1\132"+
    "\25\127\2\132\5\127\1\132\1\127\3\132\1\127\1\132"+
    "\4\127\2\0\27\127\1\232\37\127\2\0\33\127\1\233"+
    "\32\127\5\0\1\135\3\0\4\135\1\234\1\0\1\135"+
    "\1\0\2\137\2\0\1\235\14\135\5\0\1\135\2\137"+
    "\5\135\1\137\1\135\3\137\1\135\1\137\3\135\1\236"+
    "\2\0\66\236\5\0\1\137\3\0\4\137\2\0\1\137"+
    "\1\0\2\137\2\0\1\235\14\137\5\0\22\137\5\0"+
    "\1\140\3\0\5\140\1\0\1\140\1\0\2\140\3\0"+
    "\14\140\5\0\22\140\3\0\1\142\41\0\1\237\30\0"+
    "\1\143\3\0\4\143\2\0\1\143\6\0\14\143\5\0"+
    "\1\143\2\0\5\143\1\0\1\143\3\0\1\143\1\0"+
    "\3\143\5\0\1\145\3\0\4\145\2\0\1\145\1\0"+
    "\2\145\3\0\14\145\5\0\22\145\3\0\1\147\3\0"+
    "\1\240\26\0\1\241\37\0\1\242\3\0\4\242\1\243"+
    "\1\0\1\242\6\0\14\242\5\0\1\242\2\0\5\242"+
    "\1\0\1\242\3\0\1\242\1\0\3\242\5\0\1\151"+
    "\3\0\4\151\2\0\1\151\6\0\14\151\5\0\1\151"+
    "\2\0\5\151\1\0\1\151\3\0\1\151\1\0\3\151"+
    "\5\0\1\153\3\0\4\153\2\0\1\153\1\0\2\153"+
    "\3\0\14\153\5\0\22\153\3\0\1\154\21\0\1\155"+
    "\56\0\1\244\112\0\1\245\71\0\1\246\32\0\1\161"+
    "\2\0\66\161\35\0\1\247\45\0\1\250\70\0\1\251"+
    "\106\0\1\252\74\0\1\253\50\0\1\254\107\0\1\255"+
    "\107\0\1\256\30\0\1\257\107\0\1\260\71\0\1\261"+
    "\67\0\1\262\75\0\1\263\35\0\1\264\70\0\1\265"+
    "\121\0\1\266\63\0\1\267\2\0\1\270\71\0\1\271"+
    "\66\0\1\272\77\0\1\273\64\0\1\274\105\0\1\275"+
    "\72\0\1\276\56\0\1\277\65\0\1\300\44\0\1\301"+
    "\110\0\1\302\77\0\1\303\27\0\1\225\2\0\5\225"+
    "\1\226\61\225\2\0\5\225\1\226\11\225\1\304\25\225"+
    "\2\304\5\225\1\304\1\225\3\304\1\225\1\304\3\225"+
    "\1\127\2\0\47\127\1\305\17\127\2\0\17\127\1\306"+
    "\25\127\2\306\5\127\1\306\1\127\3\306\1\127\1\306"+
    "\4\127\2\0\53\127\1\307\13\127\2\0\35\127\1\310"+
    "\30\127\5\0\1\311\3\0\4\311\2\0\1\311\6\0"+
    "\14\311\5\0\1\311\2\0\5\311\1\0\1\311\3\0"+
    "\1\311\1\0\3\311\3\0\1\235\1\0\1\137\3\0"+
    "\4\137\2\0\1\137\1\0\2\137\3\0\14\137\5\0"+
    "\22\137\1\236\2\0\5\236\1\312\60\236\3\0\1\313"+
    "\137\0\1\314\23\0\1\315\3\0\4\315\2\0\1\315"+
    "\6\0\14\315\5\0\1\315\2\0\5\315\1\0\1\315"+
    "\3\0\1\315\1\0\3\315\12\0\1\316\131\0\1\317"+
    "\64\0\1\320\47\0\1\321\77\0\1\322\46\0\1\323"+
    "\104\0\1\324\76\0\1\325\45\0\1\326\105\0\1\327"+
    "\100\0\1\330\66\0\1\331\71\0\1\332\72\0\1\333"+
    "\110\0\1\334\64\0\1\335\50\0\1\336\62\0\1\337"+
    "\54\0\1\340\70\0\1\341\112\0\1\342\46\0\1\343"+
    "\113\0\1\344\64\0\1\345\111\0\1\346\50\0\1\347"+
    "\76\0\1\350\62\0\1\351\52\0\1\352\111\0\1\271"+
    "\33\0\1\225\2\0\5\225\1\226\11\225\1\353\25\225"+
    "\2\353\5\225\1\353\1\225\3\353\1\225\1\353\3\225"+
    "\1\127\2\0\32\127\1\354\34\127\2\0\42\127\1\355"+
    "\24\127\2\0\11\127\1\305\54\127\5\0\1\311\3\0"+
    "\4\311\2\0\1\311\1\0\2\311\3\0\14\311\5\0"+
    "\22\311\12\0\1\356\63\0\1\315\3\0\4\315\2\0"+
    "\1\315\1\0\2\315\3\0\14\315\5\0\22\315\27\0"+
    "\1\357\77\0\1\360\64\0\1\361\50\0\1\362\107\0"+
    "\1\363\53\0\1\364\1\365\104\0\1\366\72\0\1\367"+
    "\70\0\1\370\66\0\1\371\77\0\1\372\63\0\1\373"+
    "\72\0\1\374\66\0\1\375\72\0\1\275\71\0\1\376"+
    "\67\0\1\377\71\0\1\u0100\70\0\1\u0101\61\0\1\u0102"+
    "\71\0\1\u0103\100\0\1\u0104\61\0\1\u0105\106\0\1\u0106"+
    "\62\0\1\u0107\41\0\1\u0108\56\0\1\225\2\0\5\225"+
    "\1\226\11\225\1\u0109\25\225\2\u0109\5\225\1\u0109\1\225"+
    "\3\u0109\1\225\1\u0109\3\225\1\127\2\0\43\127\1\u010a"+
    "\22\127\32\0\1\u010b\70\0\1\u010c\110\0\1\u010d\70\0"+
    "\1\u010e\65\0\1\u010f\55\0\1\u0110\51\0\1\365\57\0"+
    "\1\u0111\122\0\1\u0112\70\0\1\u0113\112\0\1\u0114\45\0"+
    "\1\u0115\102\0\1\u0116\57\0\1\u0117\67\0\1\u0118\66\0"+
    "\1\u0119\76\0\1\u011a\66\0\1\u011b\43\0\1\u011c\71\0"+
    "\1\u011b\112\0\1\u011d\73\0\1\u011e\103\0\1\u011f\72\0"+
    "\1\u0120\46\0\1\u0121\44\0\1\u0122\61\0\1\225\2\0"+
    "\5\225\1\226\31\225\1\u0123\26\225\41\0\1\u0124\60\0"+
    "\1\u0125\77\0\1\u010e\42\0\1\u0126\71\0\1\u0127\71\0"+
    "\1\u0128\60\0\1\u0129\123\0\1\u012a\72\0\1\u012b\32\0"+
    "\1\u012c\21\0\1\u012d\74\0\1\u012e\112\0\1\u012f\64\0"+
    "\1\345\33\0\1\u0130\116\0\1\u0131\62\0\1\376\72\0"+
    "\1\u0132\46\0\1\u0133\116\0\1\u0134\65\0\1\u0135\70\0"+
    "\1\u0136\55\0\1\u0137\25\0\2\u0137\5\0\1\u0137\1\0"+
    "\3\u0137\1\0\1\u0137\3\0\1\225\2\0\5\225\1\226"+
    "\37\225\1\u0138\10\225\1\u0139\7\225\33\0\1\u013a\51\0"+
    "\1\u0126\111\0\1\u013b\36\0\1\u0128\3\0\1\u013c\65\0"+
    "\1\u013d\4\0\4\u013d\1\0\2\u013d\2\0\1\u013d\3\0"+
    "\15\u013d\4\0\10\u013d\1\0\11\u013d\40\0\1\u013e\42\0"+
    "\1\u013f\61\0\1\u012d\6\0\1\u0140\20\0\1\u0141\5\0"+
    "\1\u0142\64\0\1\u0143\70\0\1\u0144\70\0\1\345\42\0"+
    "\1\u0145\116\0\1\u0146\62\0\1\u0147\74\0\1\u0148\73\0"+
    "\1\u011a\50\0\1\u0149\52\0\1\225\2\0\5\225\1\226"+
    "\37\225\1\u014a\10\225\2\u014a\7\225\2\0\5\225\1\226"+
    "\11\225\1\u014a\25\225\2\u014a\10\225\2\u014a\1\225\1\u014a"+
    "\3\225\35\0\1\u014b\36\0\1\u013b\3\0\1\u014c\116\0"+
    "\1\u014d\70\0\1\u014e\62\0\1\u014f\52\0\1\u0150\112\0"+
    "\1\u0151\71\0\1\345\44\0\1\u0152\20\0\1\u0153\67\0"+
    "\1\u0154\101\0\1\u0155\36\0\1\u0156\103\0\1\345\25\0"+
    "\2\345\5\0\1\345\1\0\3\345\1\0\1\345\3\0"+
    "\1\225\2\0\5\225\1\226\31\225\1\u0157\26\225\36\0"+
    "\1\u0158\62\0\1\u0159\101\0\1\u015a\61\0\1\u015b\73\0"+
    "\1\u015c\105\0\1\u015d\50\0\1\345\50\0\1\345\70\0"+
    "\1\u015e\66\0\1\u015f\60\0\1\225\2\0\5\225\1\226"+
    "\37\225\1\u0160\10\225\1\u0161\1\u0160\1\u0162\5\225\12\0"+
    "\1\u0163\70\0\1\u0164\67\0\1\u0165\106\0\1\u0166\72\0"+
    "\1\u0167\70\0\1\u0168\46\0\1\u0169\135\0\1\u016a\14\0"+
    "\1\225\2\0\5\225\1\226\11\225\1\u016b\25\225\2\u016b"+
    "\7\225\3\u016b\1\225\1\u016b\4\225\2\0\5\225\1\226"+
    "\11\225\1\u016b\25\225\2\u016b\10\225\2\u016b\1\225\1\u016b"+
    "\4\225\2\0\5\225\1\226\37\225\1\u016b\10\225\1\u016b"+
    "\7\225\35\0\1\u016c\71\0\1\u016d\44\0\1\u016e\117\0"+
    "\1\u016f\70\0\1\u0170\41\0\1\u0171\72\0\1\u0172\111\0"+
    "\1\u0173\33\0\1\225\2\0\5\225\1\226\53\225\1\u0174"+
    "\4\225\34\0\1\u0175\67\0\1\u0176\72\0\1\u0177\70\0"+
    "\1\u0178\70\0\1\u0179\65\0\1\u017a\110\0\1\u017b\65\0"+
    "\1\u017c\21\0\1\225\2\0\5\225\1\226\37\225\1\u017d"+
    "\10\225\1\u017d\1\u017e\6\225\35\0\1\u017f\63\0\1\u0180"+
    "\100\0\1\u0181\33\0\1\u0182\21\0\1\u0183\117\0\1\u0184"+
    "\42\0\1\345\120\0\1\u0185\12\0\1\225\2\0\5\225"+
    "\1\226\11\225\1\u0186\25\225\2\u0186\7\225\3\u0186\1\225"+
    "\1\u0186\4\225\2\0\5\225\1\226\37\225\1\u0186\10\225"+
    "\3\u0186\5\225\36\0\1\u0187\44\0\1\u0187\105\0\1\u0188"+
    "\44\0\1\u0183\7\0\1\u0189\25\0\1\u018a\11\0\1\u018b"+
    "\52\0\1\u018c\65\0\1\u018d\36\0\1\225\2\0\5\225"+
    "\1\226\4\225\1\u018e\53\225\14\0\1\u018f\103\0\1\u0190"+
    "\77\0\1\u0191\61\0\1\u0192\72\0\1\u0193\72\0\1\u0194"+
    "\35\0\1\225\2\0\5\225\1\226\37\225\1\u0195\10\225"+
    "\3\u0195\1\225\1\u0195\3\225\12\0\1\u0196\117\0\1\u0197"+
    "\41\0\1\u0198\116\0\1\u0199\57\0\1\u019a\75\0\1\u019b"+
    "\34\0\1\225\2\0\5\225\1\226\11\225\1\u019c\25\225"+
    "\2\u019c\7\225\3\u019c\1\225\1\u019c\3\225\23\0\1\u019d"+
    "\121\0\1\u019e\51\0\1\u019f\70\0\1\u01a0\110\0\1\u01a1"+
    "\23\0\1\345\60\0\1\225\2\0\5\225\1\226\4\225"+
    "\1\u01a2\53\225\33\0\1\u01a3\5\0\1\u01a4\64\0\1\u01a5"+
    "\113\0\1\u01a6\33\0\1\u01a7\102\0\1\u0194\33\0\1\225"+
    "\2\0\5\225\1\226\37\225\1\u01a8\10\225\3\u01a8\1\225"+
    "\1\u01a8\3\225\35\0\1\u01a9\65\0\1\u01aa\71\0\1\u01ab"+
    "\67\0\1\u01ac\111\0\1\u01ad\15\0\1\225\2\0\5\225"+
    "\1\226\11\225\1\u01ae\25\225\2\u01ae\7\225\3\u01ae\1\225"+
    "\1\u01ae\3\225\14\0\1\u01af\126\0\1\u01b0\41\0\1\u01b1"+
    "\100\0\1\u01b2\67\0\1\u01b3\36\0\1\225\2\0\5\225"+
    "\1\226\5\225\1\u01b4\52\225\32\0\1\u01b5\67\0\1\u01b6"+
    "\51\0\1\u01b7\125\0\1\u01b8\61\0\1\u01b9\30\0\1\225"+
    "\2\0\5\225\1\226\11\225\1\u01ba\25\225\2\u01ba\7\225"+
    "\3\u01ba\1\225\1\u01ba\3\225\52\0\1\u01bb\30\0\1\u01bc"+
    "\125\0\1\u01bd\44\0\1\u01be\101\0\1\u01bf\34\0\1\225"+
    "\2\0\5\225\1\226\11\225\1\u01c0\25\225\2\u01c0\7\225"+
    "\3\u01c0\1\225\1\u01c0\3\225\33\0\1\u01c1\70\0\1\u01c2"+
    "\50\0\1\u01c3\113\0\1\u01c4\67\0\1\u01c5\33\0\1\225"+
    "\2\0\5\225\1\226\11\225\1\u01c6\25\225\2\u01c6\7\225"+
    "\3\u01c6\1\225\1\u01c6\3\225\41\0\1\u01c7\76\0\1\u01c8"+
    "\56\0\1\u01c9\105\0\1\u01ca\51\0\1\u01cb\35\0\1\225"+
    "\2\0\5\225\1\226\32\225\1\u01cc\25\225\35\0\1\u01cd"+
    "\57\0\1\u01ce\1\u01cf\52\0\1\u01d0\73\0\1\u01d1\102\0"+
    "\1\u01d2\44\0\1\225\2\0\5\225\1\226\37\225\1\u01d3"+
    "\10\225\1\u01d3\1\u01d4\6\225\66\0\1\u01d5\55\0\1\u01d6"+
    "\25\0\1\u01d7\112\0\1\u01d8\36\0\1\225\2\0\5\225"+
    "\1\226\11\225\1\u01d9\25\225\2\u01d9\7\225\3\u01d9\1\225"+
    "\1\u01d9\4\225\2\0\5\225\1\226\37\225\1\u01d9\10\225"+
    "\3\u01d9\5\225\52\0\1\u01da\56\0\1\u01db\43\0\1\u01dc"+
    "\13\0\1\u01dd\11\0\1\u01de\11\0\1\u01df\104\0\1\u01e0"+
    "\1\0\1\225\2\0\5\225\1\226\4\225\1\u01e1\53\225"+
    "\31\0\1\u01e2\75\0\1\u01e3\70\0\1\u01e4\60\0\1\u01dc"+
    "\74\0\1\u01e5\3\0\1\u01e6\61\0\1\u01e7\2\0\1\u01e8"+
    "\73\0\1\u01e9\33\0\1\225\2\0\5\225\1\226\37\225"+
    "\1\u01ea\10\225\3\u01ea\1\225\1\u01ea\3\225\34\0\1\u01eb"+
    "\114\0\1\u01ec\70\0\1\u01ed\41\0\1\u01ee\51\0\1\u01ef"+
    "\116\0\1\u01ed\70\0\1\u01f0\70\0\1\u01f1\30\0\1\225"+
    "\2\0\5\225\1\226\11\225\1\u01f2\25\225\2\u01f2\7\225"+
    "\3\u01f2\1\225\1\u01f2\3\225\40\0\1\u01f3\54\0\1\u01ce"+
    "\101\0\1\u01f4\45\0\1\u01f5\113\0\1\u01f6\67\0\1\u01f7"+
    "\71\0\1\u01f8\33\0\1\225\2\0\5\225\1\u01f9\60\225"+
    "\35\0\1\u01ec\43\0\1\u01fa\115\0\1\u01fb\113\0\1\u01fc"+
    "\45\0\1\u01fd\74\0\1\u01fe\53\0\1\u01d2\1\u01ff\74\0"+
    "\1\u0200\71\0\1\u0201\71\0\1\u01f4\47\0\1\u0202\104\0"+
    "\1\u0203\54\0\1\u0204\111\0\1\u0205\125\0\1\u0206\27\0"+
    "\1\u0207\114\0\1\u0208\64\0\1\u01f4\57\0\1\u0209\60\0"+
    "\1\u020a\74\0\1\u01e8\71\0\1\u020b\72\0\1\u020c\70\0"+
    "\1\u020d\42\0\1\u020e\112\0\1\u020f\47\0\1\u0210\72\0"+
    "\1\u0211\120\0\2\u0212\12\0\1\u0212\21\0\1\u0213\65\0"+
    "\1\u0214\35\0\2\u0212\12\0\1\u0212\24\0\1\u0215\40\0"+
    "\1\u0216\57\0\2\u0217\1\u0218\11\0\1\u0217\45\0\1\u0219"+
    "\73\0\1\u021a\42\0\1\u01cb\31\0\2\u0217\12\0\1\u0217"+
    "\22\0\1\u01cb\132\0\1\u021b\56\0\1\u021c\65\0\1\u01cb"+
    "\47\0\1\u021b\54\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[27645];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\25\0\1\1\16\0\2\11\3\1\2\11\2\1\2\11"+
    "\5\1\1\11\1\1\2\11\4\1\1\11\1\1\1\11"+
    "\2\1\1\11\7\1\1\11\26\1\1\11\2\1\1\11"+
    "\1\1\1\11\3\1\1\11\2\1\1\11\4\1\3\0"+
    "\1\11\2\0\1\11\3\0\1\1\1\11\7\0\1\1"+
    "\17\0\7\1\3\0\1\11\24\0\2\1\16\0\10\1"+
    "\1\0\1\1\13\0\1\11\2\0\1\11\10\0\1\11"+
    "\5\0\3\1\10\0\1\11\22\0\2\1\11\0\1\1"+
    "\2\11\14\0\1\1\2\0\1\11\7\0\1\11\11\0"+
    "\2\1\2\0\1\11\1\1\1\0\1\11\12\0\1\1"+
    "\1\0\2\11\11\0\1\1\10\0\3\1\1\0\1\1"+
    "\6\0\1\1\10\0\1\1\1\11\3\0\1\1\3\0"+
    "\2\1\7\0\1\1\1\11\6\0\1\1\6\0\2\1"+
    "\5\0\1\1\3\0\1\1\1\0\1\1\5\0\1\1"+
    "\5\0\1\1\5\0\1\1\3\0\1\1\1\0\1\1"+
    "\5\0\1\1\5\0\1\1\5\0\1\1\1\0\1\11"+
    "\3\0\1\11\2\1\4\0\1\1\7\0\1\1\10\0"+
    "\1\1\7\0\1\1\6\0\1\1\43\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[540];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2274) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 36: 
          { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
          }
        case 64: break;
        case 28: 
          { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 65: break;
        case 16: 
          { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
          }
        case 66: break;
        case 26: 
          { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 67: break;
        case 58: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
          }
        case 68: break;
        case 8: 
          { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
          }
        case 69: break;
        case 3: 
          { yybegin(YYINITIAL); return CndTypes.CRLF;
          }
        case 70: break;
        case 9: 
          { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
          }
        case 71: break;
        case 60: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 72: break;
        case 35: 
          { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
          }
        case 73: break;
        case 10: 
          { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 74: break;
        case 59: 
          { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
          }
        case 75: break;
        case 13: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
          }
        case 76: break;
        case 4: 
          { return TokenType.WHITE_SPACE;
          }
        case 77: break;
        case 18: 
          { yybegin(NODE_TYPE_INHERITANCE);
          }
        case 78: break;
        case 6: 
          { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
          }
        case 79: break;
        case 44: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 80: break;
        case 1: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_CHOICELIST;
          }
        case 81: break;
        case 37: 
          { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 82: break;
        case 55: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_BOOLEAN;
          }
        case 83: break;
        case 17: 
          { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
          }
        case 84: break;
        case 45: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_DATE;
          }
        case 85: break;
        case 11: 
          { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 86: break;
        case 29: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 87: break;
        case 33: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
          }
        case 88: break;
        case 12: 
          { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 89: break;
        case 20: 
          { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
          }
        case 90: break;
        case 54: 
          { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
          }
        case 91: break;
        case 15: 
          { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
          }
        case 92: break;
        case 52: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_DOUBLE;
          }
        case 93: break;
        case 23: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_LONG;
          }
        case 94: break;
        case 43: 
          { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 95: break;
        case 7: 
          { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
          }
        case 96: break;
        case 24: 
          { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
          }
        case 97: break;
        case 47: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 98: break;
        case 38: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_TEXT;
          }
        case 99: break;
        case 32: 
          { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 100: break;
        case 57: 
          { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
          }
        case 101: break;
        case 34: 
          { yybegin(YYINITIAL); return CndTypes.COMMENT;
          }
        case 102: break;
        case 53: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_BINARY;
          }
        case 103: break;
        case 63: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_STRING_CHOICELIST;
          }
        case 104: break;
        case 41: 
          { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
          }
        case 105: break;
        case 2: 
          { return TokenType.BAD_CHARACTER;
          }
        case 106: break;
        case 25: 
          { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
          }
        case 107: break;
        case 27: 
          { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 108: break;
        case 14: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
          }
        case 109: break;
        case 19: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
          }
        case 110: break;
        case 51: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_STRING_TEXT;
          }
        case 111: break;
        case 40: 
          { yybegin(PROPERTY_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 112: break;
        case 21: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 113: break;
        case 56: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
          }
        case 114: break;
        case 50: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DATE;
          }
        case 115: break;
        case 31: 
          { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 116: break;
        case 61: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
          }
        case 117: break;
        case 62: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_WEAKREFERENCE;
          }
        case 118: break;
        case 39: 
          { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 119: break;
        case 48: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_BOOLEAN;
          }
        case 120: break;
        case 22: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return TokenType.WHITE_SPACE;
          }
        case 121: break;
        case 5: 
          { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
          }
        case 122: break;
        case 49: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
          }
        case 123: break;
        case 46: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE_LONG;
          }
        case 124: break;
        case 42: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DOUBLE;
          }
        case 125: break;
        case 30: 
          { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 126: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
