/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int SUPER_TYPES = 10;
  public static final int SUPER_TYPES_NAME = 12;
  public static final int OPTIONS = 14;
  public static final int EXTENDS = 16;
  public static final int EXTEND_NAMESPACE = 18;
  public static final int EXTEND = 20;
  public static final int ITEMTYPE = 22;
  public static final int PROPERTY = 24;
  public static final int PROPERTY_TYPE = 26;
  public static final int PROPERTY_MASK_OPTION_NAME = 28;
  public static final int PROPERTY_MASK = 30;
  public static final int PROPERTY_MASK_OPTION = 32;
  public static final int PROPERTY_DEFAULT = 34;
  public static final int PROPERTY_DEFAULT_VALUE = 36;
  public static final int PROPERTY_ATTRIBUTES = 38;
  public static final int PROPERTY_CONSTRAINT = 40;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 42;
  public static final int NODE = 44;
  public static final int NODE_NAMESPACE = 46;
  public static final int NODE_NODETYPE = 48;
  public static final int NODE_DEFAULT = 50;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 52;
  public static final int NODE_DEFAULT_VALUE = 54;
  public static final int NODE_ATTRIBUTES = 56;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\15\1\33\1\34\2\21\1\35\11\21"+
    "\1\36\21\21\1\37\1\40\23\21\1\27\1\41\3\21\1\22\1\42\1\41\4\21\1\43\1\44\4"+
    "\0\1\45\1\46\1\27\3\21\2\47\1\27\1\50\1\51\1\0\1\52\5\21\1\53\3\0\1\54\1\55"+
    "\13\21\1\56\1\45\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\21\3\0\1\64\12\21\1\65"+
    "\1\0\1\66\1\27\1\0\1\67\3\21\1\53\1\70\1\20\2\21\1\65\1\71\1\72\1\73\2\27"+
    "\3\21\1\74\10\27\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\21\1\101\2\0\1\102\1"+
    "\21\1\103\1\0\2\41\1\104\1\105\1\106\2\21\1\75\1\107\1\110\1\111\1\112\1\62"+
    "\1\113\1\103\1\0\1\114\1\51\1\104\1\115\1\106\2\21\1\75\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\21\1\75\1\126\1"+
    "\110\1\45\1\127\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\21\1\75"+
    "\1\126\1\110\1\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133"+
    "\1\134\1\135\1\132\1\21\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1"+
    "\104\1\32\1\75\2\21\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27"+
    "\1\146\1\32\1\75\2\21\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1"+
    "\147\1\27\1\146\1\32\1\75\4\21\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27"+
    "\1\40\1\146\1\21\1\22\1\40\2\21\1\35\1\152\1\22\1\153\1\154\1\0\2\27\1\155"+
    "\1\27\1\41\5\21\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1"+
    "\41\1\165\1\166\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1"+
    "\0\1\161\1\173\1\174\1\21\1\41\3\21\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0"+
    "\1\50\1\176\7\27\5\21\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203"+
    "\1\21\1\204\1\205\1\0\1\171\4\21\1\36\1\17\5\21\1\206\51\21\1\133\1\22\1\133"+
    "\5\21\1\133\4\21\1\133\1\22\1\133\1\21\1\22\7\21\1\133\10\21\1\207\4\27\2"+
    "\21\2\27\12\21\1\30\1\27\1\41\114\21\1\105\2\21\1\41\2\21\1\47\11\21\1\132"+
    "\1\130\1\27\1\21\1\32\1\210\1\27\2\21\1\210\1\27\2\21\1\211\1\27\1\21\1\32"+
    "\1\212\1\27\6\21\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\21"+
    "\1\27\5\21\1\217\10\21\1\220\1\27\3\21\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\21"+
    "\1\220\1\30\1\27\5\21\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\21\1\160\1\2\6"+
    "\21\1\175\1\77\3\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\21\1\213\1"+
    "\0\1\221\1\114\1\0\1\161\1\27\1\222\1\2\1\27\1\223\3\21\1\102\1\202\1\0\1"+
    "\67\4\21\1\65\1\0\1\2\1\27\4\21\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\21\1\220"+
    "\12\27\1\225\2\0\1\226\1\227\1\27\30\21\4\0\1\77\2\27\1\76\42\21\2\220\4\21"+
    "\2\220\1\21\1\230\3\21\1\220\6\21\1\32\1\170\1\231\1\30\1\232\1\114\1\21\1"+
    "\30\1\231\1\30\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50"+
    "\1\235\1\42\1\43\2\27\1\21\1\30\3\21\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1"+
    "\27\1\240\1\40\1\152\1\241\1\31\1\242\1\21\1\243\1\244\1\245\2\27\5\21\1\130"+
    "\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\246\1\247\1\27\4\21\1\36\1\17\7\21"+
    "\1\43\1\27\1\62\2\21\1\22\1\27\10\22\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1"+
    "\204\1\241\1\30\1\41\11\21\1\22\1\250\1\41\12\21\1\206\1\244\4\21\1\220\1"+
    "\41\12\21\1\22\2\27\3\21\1\47\6\27\170\21\1\220\11\27\71\21\1\30\6\27\21\21"+
    "\1\30\10\27\5\21\1\220\41\21\1\30\2\21\1\0\1\247\2\27\5\21\1\160\1\76\1\251"+
    "\3\21\1\62\12\21\1\161\3\27\1\43\1\21\1\40\14\21\1\252\1\114\1\27\1\21\1\47"+
    "\11\27\1\21\1\253\1\254\2\21\1\53\2\27\1\130\6\21\1\114\1\27\1\67\5\21\1\213"+
    "\1\0\1\50\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\21\1\65\1\171\2\21\1\160"+
    "\1\0\1\2\1\27\3\21\1\30\1\100\5\21\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\21"+
    "\1\102\1\77\1\27\1\254\1\255\1\0\1\161\2\21\1\22\1\256\6\21\1\201\1\257\1"+
    "\217\2\27\1\260\1\21\1\53\1\261\1\27\3\262\1\27\2\22\22\27\4\21\1\53\1\263"+
    "\1\0\1\161\64\21\1\114\1\27\2\21\1\22\1\264\5\21\1\114\40\27\55\21\1\220\15"+
    "\21\1\26\4\27\1\22\1\27\1\264\1\265\1\21\1\75\1\22\1\170\1\266\15\21\1\26"+
    "\3\27\1\264\54\21\1\220\2\27\10\21\1\40\6\21\5\27\1\21\1\30\2\0\2\27\1\77"+
    "\1\27\1\135\2\27\1\244\3\27\1\42\1\32\20\21\1\267\1\234\1\27\1\0\1\161\1\41"+
    "\2\21\1\115\1\41\2\21\1\47\1\270\12\21\1\22\3\40\1\271\1\272\2\27\1\273\1"+
    "\21\1\142\2\21\1\22\2\21\1\274\1\21\1\220\1\21\1\220\4\27\17\21\1\47\10\27"+
    "\6\21\1\30\20\27\1\275\20\27\3\21\1\30\6\21\1\130\5\27\3\21\1\22\2\27\3\21"+
    "\1\47\6\27\3\21\1\220\4\21\1\114\1\21\1\241\5\27\23\21\1\220\1\0\1\161\52"+
    "\27\1\220\1\75\4\21\1\36\1\276\2\21\1\220\25\27\2\21\1\220\1\27\3\21\1\26"+
    "\10\27\7\21\1\270\10\27\1\277\1\76\1\142\1\41\2\21\1\114\1\120\4\27\3\21\1"+
    "\30\20\27\6\21\1\220\1\27\2\21\1\220\1\27\2\21\1\47\21\27\11\21\1\130\66\27"+
    "\1\223\6\21\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\21\1\0\1\300\2\27\3\21\1"+
    "\130\1\0\1\161\1\223\3\21\1\160\1\0\1\144\1\0\10\27\1\223\5\21\1\53\1\0\1"+
    "\301\1\27\1\0\1\161\24\27\5\21\1\53\1\0\1\27\1\0\1\161\46\27\55\21\1\22\22"+
    "\27\14\21\1\47\63\27\5\21\1\22\72\27\7\21\1\130\130\27\10\21\1\30\1\27\1\102"+
    "\4\0\1\77\1\27\1\62\1\223\1\21\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2"+
    "\3\27\1\305\22\27\1\306\67\27\12\21\1\32\10\21\1\32\1\307\1\310\1\21\1\311"+
    "\1\142\7\21\1\36\1\312\2\32\3\21\1\313\1\170\1\40\1\75\51\21\1\220\3\21\1"+
    "\75\2\21\1\206\3\21\1\206\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\75"+
    "\3\21\1\75\2\21\1\206\1\314\6\0\1\142\3\21\1\162\1\41\1\206\1\315\1\240\1"+
    "\316\1\162\1\230\1\162\2\206\1\123\1\21\1\35\1\21\1\114\1\317\1\35\1\21\1"+
    "\114\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\220\74\27\1\122\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\55\1\3\1\2\6\7\4\0\1\50\3\0\1\6\2\0\1\33\1\52\1\53\1\5\1\54"+
    "\1\47\1\51\1\37\1\4\12\41\1\36\1\0\1\31\1\32\1\44\2\0\1\14\1\15\1\21\1\23"+
    "\1\24\2\40\1\34\1\42\2\40\1\25\1\10\1\13\1\22\1\35\1\26\1\20\1\43\1\17\1\27"+
    "\2\40\1\12\1\30\1\40\1\45\1\0\1\46\1\0\1\40\1\12\1\30\1\40\4\0\6\7\1\56\2"+
    "\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\2\11\15\6\1\16\2\6"+
    "\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6\1\0\1\6"+
    "\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15"+
    "\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\7\7"+
    "\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6\7\0\1\7"+
    "\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6"+
    "\3\7\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7"+
    "\1\6\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6"+
    "\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2"+
    "\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6"+
    "\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0\1\7\1\6"+
    "\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3"+
    "\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0"+
    "\2\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1"+
    "\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2\6\1\0\1"+
    "\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6\1\0\3\6"+
    "\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1\0\1\7\1"+
    "\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6\7\7\3\6"+
    "\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0"+
    "\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0"+
    "\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6"+
    "\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\55\5\7\5\0\1\6\5\0\6\7"+
    "\1\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6\2\0\4\6"+
    "\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4\6\1\0\2"+
    "\6\1\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3"+
    "\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0"+
    "\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1"+
    "\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6\10\0\5"+
    "\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6"+
    "\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1"+
    "\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\5\15\1\16\1\17\1\20\5\21\1\22\1\23\2\24"+
    "\1\25\4\1\1\26\1\27\1\30\3\31\2\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\3\42\1\1"+
    "\1\43\1\1\2\2\1\3\1\1\1\44\1\45\1\0"+
    "\4\46\1\1\1\3\1\1\1\44\1\0\1\47\1\1"+
    "\2\50\1\51\1\52\1\53\1\54\3\55\1\56\1\57"+
    "\1\60\3\61\1\62\7\0\1\10\4\15\4\21\4\0"+
    "\1\31\1\42\4\0\1\63\1\3\1\62\1\46\2\0"+
    "\1\3\1\62\1\0\1\55\1\61\7\0\1\10\4\15"+
    "\4\21\4\0\1\42\2\64\1\0\1\64\1\3\2\64"+
    "\1\62\1\46\2\65\1\0\1\65\1\3\2\65\1\62"+
    "\1\47\1\62\6\0\1\10\4\15\4\21\6\0\2\62"+
    "\2\0\2\62\2\0\1\66\5\0\1\10\1\0\1\66"+
    "\3\15\1\66\3\21\1\67\3\0\6\64\6\65\7\0"+
    "\3\15\3\21\10\0\1\70\1\0\2\15\2\21\3\0"+
    "\1\71\1\0\1\72\1\15\1\21\1\0\1\47\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\57\0\136\0\215\0\274\0\353\0\u011a\0\u0149"+
    "\0\u0178\0\u01a7\0\u01d6\0\u0205\0\u0234\0\u0263\0\u0292\0\u02c1"+
    "\0\u02f0\0\u031f\0\u034e\0\u037d\0\u03ac\0\u03db\0\u040a\0\u0439"+
    "\0\u0468\0\u0497\0\u04c6\0\u04f5\0\u0524\0\u0553\0\u0553\0\u0582"+
    "\0\u05b1\0\u05e0\0\u060f\0\u063e\0\u066d\0\u069c\0\u06cb\0\u06fa"+
    "\0\u0553\0\u0553\0\u0553\0\u0553\0\u0729\0\u0758\0\u0553\0\u0553"+
    "\0\u0787\0\u0553\0\u07b6\0\u07e5\0\u0814\0\u0843\0\u0872\0\u08a1"+
    "\0\u0553\0\u0553\0\u0553\0\u08d0\0\u08ff\0\u092e\0\u095d\0\u098c"+
    "\0\u0553\0\u0553\0\u0553\0\u09bb\0\u09ea\0\u0a19\0\u0a48\0\u0a77"+
    "\0\u0aa6\0\u0553\0\u0ad5\0\u0553\0\u0b04\0\u0b33\0\u0b62\0\u0553"+
    "\0\u0b91\0\u0553\0\u0bc0\0\u0553\0\u0553\0\u0bef\0\u0c1e\0\u0553"+
    "\0\u0c4d\0\u0c7c\0\u0cab\0\u0cda\0\u0553\0\u0d09\0\u0d38\0\u0d67"+
    "\0\u0d96\0\u0dc5\0\u0d09\0\u0553\0\u0d09\0\u0df4\0\u0e23\0\u0e52"+
    "\0\u0e81\0\u0eb0\0\u0edf\0\u0f0e\0\u0eb0\0\u0eb0\0\u0f3d\0\u0f6c"+
    "\0\u0553\0\u0f9b\0\u0553\0\u0fca\0\u0553\0\u0553\0\u0ff9\0\u1028"+
    "\0\u1057\0\u0553\0\u1086\0\u10b5\0\u10e4\0\u1113\0\u1142\0\u1171"+
    "\0\u11a0\0\u11cf\0\u11fe\0\u122d\0\u125c\0\u128b\0\u12ba\0\u12e9"+
    "\0\u1318\0\u1347\0\u1376\0\u13a5\0\u13d4\0\u1403\0\u1432\0\u1461"+
    "\0\u1490\0\u14bf\0\u14ee\0\u151d\0\u154c\0\u157b\0\u15aa\0\u15d9"+
    "\0\u0d38\0\u1608\0\u0553\0\u1637\0\u1666\0\u1695\0\u16c4\0\u16f3"+
    "\0\u1722\0\u1751\0\u1780\0\u17af\0\u17de\0\u180d\0\u183c\0\u186b"+
    "\0\u189a\0\u18c9\0\u18f8\0\u1927\0\u1956\0\u1985\0\u19b4\0\u19e3"+
    "\0\u1a12\0\u1a41\0\u1a70\0\u1a9f\0\u1ace\0\u1afd\0\u1b2c\0\u1b5b"+
    "\0\u1b8a\0\u0553\0\u15d9\0\u1bb9\0\u1be8\0\u1637\0\u1c17\0\u1666"+
    "\0\u1c46\0\u1c75\0\u16c4\0\u16f3\0\u1ca4\0\u1cd3\0\u1722\0\u1d02"+
    "\0\u1751\0\u1d31\0\u1d60\0\u1d8f\0\u0553\0\u1dbe\0\u1ded\0\u1e1c"+
    "\0\u1e4b\0\u1e7a\0\u1ea9\0\u1ed8\0\u1f07\0\u1f36\0\u1f65\0\u1f94"+
    "\0\u1fc3\0\u1ff2\0\u2021\0\u2050\0\u207f\0\u20ae\0\u20dd\0\u210c"+
    "\0\u213b\0\u216a\0\u2199\0\u21c8\0\u21f7\0\u2226\0\u2255\0\u2284"+
    "\0\u1d8f\0\u22b3\0\u0553\0\u22e2\0\u2311\0\u2340\0\u236f\0\u239e"+
    "\0\u23cd\0\u23fc\0\u07e5\0\u242b\0\u245a\0\u2489\0\u08d0\0\u24b8"+
    "\0\u24e7\0\u2516\0\u0553\0\u2545\0\u2574\0\u25a3\0\u25d2\0\u213b"+
    "\0\u216a\0\u2601\0\u2199\0\u21c8\0\u2630\0\u21f7\0\u2226\0\u265f"+
    "\0\u2255\0\u2284\0\u268e\0\u26bd\0\u26ec\0\u271b\0\u274a\0\u2779"+
    "\0\u27a8\0\u27d7\0\u2806\0\u2835\0\u2864\0\u2893\0\u28c2\0\u28f1"+
    "\0\u2920\0\u294f\0\u297e\0\u29ad\0\u29dc\0\u2a0b\0\u2a3a\0\u0553"+
    "\0\u2a69\0\u2a98\0\u2ac7\0\u2af6\0\u2b25\0\u2b54\0\u2b83\0\u2bb2"+
    "\0\u0553\0\u2be1\0\u2a69\0\u2c10\0\u2c3f\0\u2c6e\0\u2c9d\0\u2c9d"+
    "\0\u2ccc";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\40\1\41\1\42\3\36\1\43\1\44"+
    "\1\36\1\45\1\46\5\36\1\47\1\36\1\50\4\36"+
    "\1\51\10\36\1\44\2\36\1\52\2\36\1\41\1\53"+
    "\2\36\1\54\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\56\1\36\21\56\1\36\1\57\1\60\1\61"+
    "\1\56\2\36\1\56\1\36\2\56\1\62\3\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\1\36"+
    "\1\63\1\36\21\63\3\36\2\63\2\36\1\63\1\36"+
    "\2\63\4\36\1\41\4\36\2\0\1\36\1\37\1\40"+
    "\1\41\1\55\1\36\1\64\1\36\1\65\2\64\1\66"+
    "\1\67\5\64\1\70\6\64\3\36\2\64\1\71\1\36"+
    "\1\64\1\36\2\64\1\72\1\36\1\73\1\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\1\36"+
    "\1\74\1\36\1\75\2\74\1\76\1\77\5\74\1\100"+
    "\6\74\3\36\2\74\2\36\1\74\1\36\2\74\4\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\3\36\1\43\2\36\1\45\1\46\5\36\1\47\13\36"+
    "\1\101\10\36\1\102\1\41\4\36\2\0\1\36\1\103"+
    "\1\104\1\41\1\55\1\36\1\105\1\36\21\105\3\36"+
    "\2\105\2\36\1\105\1\36\2\105\4\36\1\41\4\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\3\36\1\106"+
    "\2\36\1\107\1\110\5\36\1\111\25\36\1\41\4\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\25\36\1\112"+
    "\15\36\1\41\4\36\2\0\1\36\1\37\1\40\1\41"+
    "\1\55\1\36\1\113\1\36\21\113\3\36\2\113\2\36"+
    "\1\113\1\36\2\113\4\36\1\41\4\36\2\0\1\36"+
    "\1\37\1\40\1\41\1\55\1\36\1\64\1\36\21\64"+
    "\3\36\2\64\1\71\1\36\1\64\1\36\2\64\3\36"+
    "\1\114\1\41\4\36\2\0\1\115\1\37\1\40\1\116"+
    "\1\117\25\115\1\57\15\115\1\41\6\115\1\36\1\37"+
    "\1\40\1\41\1\55\1\120\1\121\1\36\21\121\3\36"+
    "\2\121\2\36\1\121\1\36\2\121\4\36\1\41\1\36"+
    "\1\122\2\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\123\1\36\21\123\3\36\2\123\2\36\1\123"+
    "\1\36\2\123\3\36\1\124\1\41\2\36\1\125\1\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\1\36\1\126"+
    "\1\36\21\126\3\36\2\126\2\36\1\126\1\36\2\126"+
    "\4\36\1\41\4\36\2\0\1\36\1\37\1\40\1\41"+
    "\1\55\1\36\1\127\1\36\21\127\3\36\2\127\2\36"+
    "\1\127\1\36\2\127\1\36\1\130\2\36\1\41\2\36"+
    "\1\125\1\36\2\0\1\131\1\37\1\40\1\132\1\133"+
    "\25\131\1\57\1\134\12\131\1\73\1\135\1\41\2\131"+
    "\1\125\3\131\1\136\1\137\1\140\1\141\1\142\24\136"+
    "\1\143\1\144\15\136\1\41\4\136\2\145\1\146\1\37"+
    "\1\40\1\147\1\150\26\146\1\151\14\146\1\41\6\146"+
    "\1\152\1\137\1\140\1\153\1\154\24\152\1\155\1\36"+
    "\15\152\1\41\4\152\2\156\1\157\1\37\1\40\54\157"+
    "\1\36\1\37\1\40\1\41\1\55\26\36\1\160\14\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\161\1\162\1\36\21\162\3\36\2\162\2\36\1\162"+
    "\1\36\2\162\4\36\1\41\1\36\1\163\2\36\2\0"+
    "\1\36\1\37\1\40\1\41\1\55\1\36\1\164\1\36"+
    "\21\164\3\36\2\164\2\36\1\164\1\36\2\164\4\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\64\1\36\21\64\3\36\2\64\1\71\1\36"+
    "\1\64\1\36\2\64\3\36\1\165\1\41\2\36\1\166"+
    "\1\36\2\0\1\167\1\37\1\40\1\170\1\171\25\167"+
    "\1\172\15\167\1\41\6\167\1\36\1\37\1\40\1\41"+
    "\1\55\1\36\1\173\1\36\21\173\3\36\2\173\2\36"+
    "\1\173\1\36\2\173\4\36\1\41\4\36\2\0\1\36"+
    "\1\37\1\40\1\41\1\55\1\36\1\174\1\36\21\174"+
    "\3\36\2\174\1\71\1\36\1\174\1\36\2\174\4\36"+
    "\1\41\4\36\2\0\1\175\1\37\1\40\1\176\1\177"+
    "\25\175\1\36\15\175\1\41\6\175\60\0\1\37\60\0"+
    "\1\41\44\0\1\41\12\0\1\200\1\201\62\0\1\202"+
    "\30\0\1\202\33\0\1\203\61\0\1\204\51\0\1\205"+
    "\61\0\1\206\50\0\1\207\50\0\1\200\60\0\23\56"+
    "\3\0\2\56\2\0\4\56\12\0\1\56\6\0\11\56"+
    "\1\210\11\56\3\0\2\56\2\0\4\56\12\0\1\56"+
    "\6\0\23\63\3\0\2\63\2\0\4\63\12\0\1\63"+
    "\6\0\23\64\3\0\2\64\2\0\4\64\12\0\1\64"+
    "\6\0\3\64\1\211\17\64\3\0\2\64\2\0\2\64"+
    "\1\211\1\64\12\0\1\64\6\0\14\64\1\212\6\64"+
    "\3\0\2\64\2\0\4\64\12\0\1\64\6\0\7\64"+
    "\1\213\13\64\3\0\2\64\2\0\4\64\12\0\1\64"+
    "\6\0\12\64\1\214\10\64\3\0\2\64\2\0\4\64"+
    "\12\0\1\64\6\0\23\74\3\0\2\74\2\0\4\74"+
    "\12\0\1\74\6\0\3\74\1\215\17\74\3\0\2\74"+
    "\2\0\2\74\1\215\1\74\12\0\1\74\6\0\14\74"+
    "\1\216\6\74\3\0\2\74\2\0\4\74\12\0\1\74"+
    "\6\0\7\74\1\217\13\74\3\0\2\74\2\0\4\74"+
    "\12\0\1\74\6\0\12\74\1\220\10\74\3\0\2\74"+
    "\2\0\4\74\12\0\1\74\1\0\1\103\63\0\23\105"+
    "\3\0\2\105\2\0\4\105\12\0\1\105\11\0\1\221"+
    "\30\0\1\221\36\0\1\222\51\0\1\223\61\0\1\224"+
    "\44\0\23\113\3\0\2\113\2\0\4\113\12\0\1\113"+
    "\1\115\2\0\27\115\1\0\15\115\1\0\7\115\2\0"+
    "\1\116\26\115\1\0\15\115\1\41\7\115\2\0\1\115"+
    "\1\225\25\115\1\0\15\115\1\0\6\115\6\0\23\121"+
    "\3\0\10\121\12\0\1\121\6\0\1\123\1\0\21\123"+
    "\3\0\2\123\2\0\1\123\1\0\2\123\21\0\1\126"+
    "\1\0\21\126\3\0\2\126\2\0\1\126\1\0\2\126"+
    "\21\0\1\127\1\0\21\127\3\0\2\127\2\0\1\127"+
    "\1\0\2\127\13\0\1\131\2\0\27\131\2\0\12\131"+
    "\3\0\2\131\1\0\4\131\2\0\1\132\26\131\2\0"+
    "\12\131\2\0\1\41\2\131\1\0\4\131\2\0\1\131"+
    "\1\226\25\131\2\0\12\131\3\0\2\131\1\0\3\131"+
    "\1\227\2\0\30\227\1\0\12\227\1\0\10\227\1\230"+
    "\2\0\45\230\1\0\6\230\1\0\2\231\1\232\25\0"+
    "\1\233\16\0\1\232\7\0\1\137\1\231\1\232\25\0"+
    "\1\233\16\0\1\232\6\0\1\230\2\0\1\234\44\230"+
    "\1\41\7\230\2\0\1\230\1\235\43\230\1\0\6\230"+
    "\1\146\2\0\45\146\1\0\7\146\2\0\1\147\44\146"+
    "\1\41\7\146\2\0\1\146\1\236\43\146\1\0\6\146"+
    "\1\151\2\0\45\151\1\237\6\151\1\240\2\0\45\240"+
    "\1\0\7\240\2\0\1\241\44\240\1\41\7\240\2\0"+
    "\1\240\1\242\43\240\1\0\6\240\1\157\2\0\54\157"+
    "\1\243\2\0\54\243\6\0\23\162\3\0\3\162\1\0"+
    "\4\162\12\0\1\162\6\0\23\164\3\0\2\164\2\0"+
    "\4\164\12\0\1\164\1\167\2\0\27\167\1\0\15\167"+
    "\1\0\7\167\2\0\1\170\26\167\1\0\15\167\1\41"+
    "\7\167\2\0\1\167\1\244\25\167\1\0\15\167\1\0"+
    "\6\167\6\0\23\173\3\0\2\173\2\0\4\173\12\0"+
    "\1\173\6\0\23\174\3\0\2\174\2\0\4\174\12\0"+
    "\1\174\1\175\2\0\27\175\1\0\15\175\1\0\7\175"+
    "\2\0\1\176\26\175\1\0\15\175\1\41\7\175\2\0"+
    "\1\175\1\245\25\175\1\0\15\175\1\0\6\175\1\200"+
    "\2\0\54\200\5\201\1\246\51\201\12\0\1\247\70\0"+
    "\1\250\60\0\1\251\46\0\1\252\24\0\1\252\36\0"+
    "\1\253\52\0\1\254\45\0\11\56\1\255\11\56\3\0"+
    "\2\56\2\0\4\56\12\0\1\56\6\0\4\64\1\256"+
    "\16\64\3\0\2\64\2\0\4\64\12\0\1\64\6\0"+
    "\20\64\1\257\2\64\3\0\2\64\2\0\4\64\12\0"+
    "\1\64\6\0\10\64\1\260\12\64\3\0\2\64\2\0"+
    "\3\64\1\260\12\0\1\64\6\0\15\64\1\261\5\64"+
    "\3\0\2\64\2\0\4\64\12\0\1\64\6\0\4\74"+
    "\1\262\16\74\3\0\2\74\2\0\4\74\12\0\1\74"+
    "\6\0\20\74\1\263\2\74\3\0\2\74\2\0\4\74"+
    "\12\0\1\74\6\0\10\74\1\264\12\74\3\0\2\74"+
    "\2\0\3\74\1\264\12\0\1\74\6\0\15\74\1\265"+
    "\5\74\3\0\2\74\2\0\4\74\12\0\1\74\12\0"+
    "\1\266\72\0\1\267\46\0\1\270\24\0\1\270\36\0"+
    "\1\271\33\0\1\225\2\0\27\225\1\200\15\225\1\200"+
    "\6\225\1\226\2\0\27\226\2\200\12\226\3\200\2\226"+
    "\1\200\3\226\1\227\2\0\30\227\1\272\12\227\1\0"+
    "\10\227\1\273\2\0\27\273\1\274\15\273\1\275\6\273"+
    "\3\0\1\232\25\0\1\233\16\0\1\232\6\0\1\273"+
    "\2\0\1\276\26\273\1\274\15\273\1\277\6\273\1\300"+
    "\2\0\27\300\1\301\15\300\1\302\6\300\1\236\2\0"+
    "\45\236\1\200\6\236\1\237\2\0\30\237\1\303\23\237"+
    "\1\304\2\0\27\304\1\305\15\304\1\306\7\304\2\0"+
    "\1\307\26\304\1\305\15\304\1\310\6\304\1\311\2\0"+
    "\27\311\1\312\15\311\1\313\6\311\1\243\2\0\30\243"+
    "\1\314\23\243\1\244\2\0\27\244\1\200\15\244\1\200"+
    "\6\244\1\245\2\0\27\245\1\200\15\245\1\200\6\245"+
    "\4\201\1\315\1\246\51\201\11\0\1\316\30\0\1\316"+
    "\24\0\1\317\75\0\1\320\46\0\1\321\63\0\1\322"+
    "\56\0\1\323\40\0\23\56\3\0\1\56\1\324\2\0"+
    "\4\56\12\0\1\56\6\0\3\64\1\325\17\64\3\0"+
    "\2\64\2\0\2\64\1\325\1\64\12\0\1\64\6\0"+
    "\21\64\1\326\1\64\3\0\2\64\2\0\4\64\12\0"+
    "\1\64\6\0\11\64\1\327\11\64\3\0\2\64\2\0"+
    "\4\64\12\0\1\64\6\0\16\64\1\330\4\64\3\0"+
    "\2\64\2\0\4\64\12\0\1\64\6\0\3\74\1\331"+
    "\17\74\3\0\2\74\2\0\2\74\1\331\1\74\12\0"+
    "\1\74\6\0\21\74\1\332\1\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\6\0\11\74\1\333\11\74\3\0"+
    "\2\74\2\0\4\74\12\0\1\74\6\0\16\74\1\334"+
    "\4\74\3\0\2\74\2\0\4\74\12\0\1\74\11\0"+
    "\1\335\30\0\1\335\43\0\1\336\46\0\1\337\63\0"+
    "\1\340\32\0\1\273\2\0\1\274\26\273\1\274\15\273"+
    "\1\341\6\273\3\0\1\275\26\0\1\342\15\0\1\275"+
    "\11\0\1\277\26\0\1\342\15\0\1\277\6\0\1\300"+
    "\2\0\1\301\26\300\1\301\15\300\1\343\6\300\1\200"+
    "\2\0\1\302\26\200\1\344\15\200\1\302\6\200\1\304"+
    "\2\0\1\305\26\304\1\305\15\304\1\345\6\304\3\0"+
    "\1\306\26\0\1\346\15\0\1\306\11\0\1\310\26\0"+
    "\1\346\15\0\1\310\6\0\1\311\2\0\1\312\26\311"+
    "\1\312\15\311\1\347\6\311\1\200\2\0\1\313\26\200"+
    "\1\350\15\200\1\313\6\200\1\243\2\0\1\351\27\243"+
    "\1\314\13\243\1\352\1\351\6\243\13\0\1\353\62\0"+
    "\1\354\63\0\1\355\52\0\1\356\56\0\1\357\51\0"+
    "\1\360\51\0\10\56\1\361\12\56\3\0\2\56\1\362"+
    "\1\0\3\56\1\361\12\0\1\56\6\0\5\64\1\363"+
    "\15\64\3\0\2\64\2\0\4\64\12\0\1\64\6\0"+
    "\16\64\1\364\4\64\3\0\2\64\2\0\4\64\12\0"+
    "\1\64\6\0\12\64\1\365\10\64\3\0\2\64\2\0"+
    "\4\64\12\0\1\64\6\0\12\64\1\366\10\64\3\0"+
    "\2\64\2\0\4\64\12\0\1\64\6\0\5\74\1\367"+
    "\15\74\3\0\2\74\2\0\4\74\12\0\1\74\6\0"+
    "\16\74\1\370\4\74\3\0\2\74\2\0\4\74\12\0"+
    "\1\74\6\0\12\74\1\371\10\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\6\0\12\74\1\372\10\74\3\0"+
    "\2\74\2\0\4\74\12\0\1\74\13\0\1\373\67\0"+
    "\1\374\52\0\1\375\56\0\1\376\36\0\1\377\2\0"+
    "\1\u0100\26\377\1\u0101\15\377\1\341\7\377\2\0\1\u0101"+
    "\44\377\1\342\6\377\1\u0102\2\0\1\u0103\26\u0102\1\u0104"+
    "\15\u0102\1\343\7\u0102\2\0\1\u0104\44\u0102\1\344\6\u0102"+
    "\1\u0105\2\0\1\u0106\26\u0105\1\u0107\15\u0105\1\345\7\u0105"+
    "\2\0\1\u0107\44\u0105\1\346\6\u0105\1\u0108\2\0\1\u0109"+
    "\26\u0108\1\u010a\15\u0108\1\347\7\u0108\2\0\1\u010a\44\u0108"+
    "\1\350\6\u0108\1\243\2\u010b\1\352\27\243\1\314\14\243"+
    "\1\352\6\243\30\0\1\u010c\46\0\1\u010d\52\0\1\u010e"+
    "\56\0\1\u010f\65\0\1\u0110\41\0\23\56\3\0\2\56"+
    "\1\362\1\0\4\56\12\0\1\56\4\0\1\u0111\60\0"+
    "\12\64\1\u0112\10\64\3\0\2\64\2\0\4\64\12\0"+
    "\1\64\6\0\6\64\1\u0113\14\64\3\0\2\64\2\0"+
    "\4\64\12\0\1\64\6\0\6\64\1\u0114\14\64\3\0"+
    "\2\64\2\0\4\64\12\0\1\64\6\0\12\74\1\u0115"+
    "\10\74\3\0\2\74\2\0\4\74\12\0\1\74\6\0"+
    "\6\74\1\u0116\14\74\3\0\2\74\2\0\4\74\12\0"+
    "\1\74\6\0\6\74\1\u0117\14\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\20\0\1\u0118\52\0\1\u0119\56\0"+
    "\1\u011a\42\0\1\377\2\0\45\377\1\0\6\377\1\u0102"+
    "\2\0\45\u0102\1\200\6\u0102\1\u0105\2\0\45\u0105\1\0"+
    "\6\u0105\1\u0108\2\0\45\u0108\1\200\6\u0108\1\0\2\u010b"+
    "\1\u011b\27\0\1\u011c\14\0\1\u011b\43\0\1\u011d\51\0"+
    "\1\353\47\0\1\u011e\52\0\1\u011f\57\0\1\u0120\24\0"+
    "\1\u0120\17\0\1\u0121\60\0\22\64\1\363\3\0\2\64"+
    "\2\0\4\64\12\0\1\64\6\0\13\64\1\u0122\7\64"+
    "\3\0\2\64\2\0\4\64\12\0\1\64\6\0\7\64"+
    "\1\u0123\13\64\3\0\2\64\2\0\4\64\12\0\1\64"+
    "\6\0\22\74\1\367\3\0\2\74\2\0\4\74\12\0"+
    "\1\74\6\0\13\74\1\u0124\7\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\6\0\7\74\1\u0125\13\74\3\0"+
    "\2\74\2\0\4\74\12\0\1\74\30\0\1\373\47\0"+
    "\1\u0126\52\0\1\u0127\44\0\1\u011b\27\0\1\u011c\14\0"+
    "\1\u011b\6\0\1\u0128\2\0\30\u0128\1\0\23\u0128\24\0"+
    "\1\u0129\51\0\1\353\64\0\1\u012a\35\0\1\u012b\3\0"+
    "\1\u012b\1\0\4\u012b\1\0\12\u012b\3\0\2\u012b\1\0"+
    "\5\u012b\5\0\1\u012b\13\0\11\64\1\363\11\64\3\0"+
    "\2\64\2\0\4\64\12\0\1\64\6\0\17\64\1\u012c"+
    "\3\64\3\0\2\64\2\0\4\64\12\0\1\64\6\0"+
    "\11\74\1\367\11\74\3\0\2\74\2\0\4\74\12\0"+
    "\1\74\6\0\17\74\1\u012d\3\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\17\0\1\373\64\0\1\u012e\31\0"+
    "\1\u0128\2\0\30\u0128\1\u012f\23\u0128\24\0\1\353\40\0"+
    "\16\64\1\363\4\64\3\0\2\64\2\0\4\64\12\0"+
    "\1\64\6\0\16\74\1\367\4\74\3\0\2\74\2\0"+
    "\4\74\12\0\1\74\24\0\1\373\35\0\1\u0130\43\0"+
    "\1\u0131\1\u0130\7\0\2\u010b\1\u0131\27\0\1\u011c\14\0"+
    "\1\u0131\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[11515];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\2\11\11\1\4\11\2\1\2\11\1\1\1\11"+
    "\6\1\3\11\5\1\3\11\6\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\2\11\2\1\1\11"+
    "\4\1\1\11\6\1\1\11\1\0\10\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\2\11\3\1\1\11\6\1"+
    "\7\0\11\1\4\0\2\1\4\0\1\11\3\1\2\0"+
    "\2\1\1\0\2\1\7\0\11\1\4\0\1\11\2\1"+
    "\1\0\10\1\1\0\6\1\1\11\6\0\11\1\6\0"+
    "\2\1\2\0\2\1\2\0\1\11\5\0\1\1\1\0"+
    "\10\1\1\11\3\0\14\1\7\0\6\1\10\0\1\11"+
    "\1\0\4\1\3\0\1\11\1\0\3\1\1\0\1\1"+
    "\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[305];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 59: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 60: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 61: break;
          case 4: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 62: break;
          case 5: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 63: break;
          case 6: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 64: break;
          case 7: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 65: break;
          case 8: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 66: break;
          case 9: 
            { return CndTypes.EQUAL;
            }
          case 67: break;
          case 10: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 68: break;
          case 11: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 69: break;
          case 12: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 70: break;
          case 13: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 71: break;
          case 14: 
            { return CndTypes.COLON;
            }
          case 72: break;
          case 15: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 73: break;
          case 16: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 74: break;
          case 17: 
            { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
            }
          case 75: break;
          case 18: 
            { yybegin(SUPER_TYPES_NAME); return CndTypes.COLON;
            }
          case 76: break;
          case 19: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
            }
          case 77: break;
          case 20: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            }
          case 78: break;
          case 21: 
            { yybegin(SUPER_TYPES); return CndTypes.NODE_TYPE_NAME;
            }
          case 79: break;
          case 22: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 80: break;
          case 23: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 81: break;
          case 24: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 82: break;
          case 25: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 83: break;
          case 26: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 84: break;
          case 27: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 85: break;
          case 28: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 86: break;
          case 29: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 87: break;
          case 30: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 88: break;
          case 31: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 89: break;
          case 32: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 90: break;
          case 33: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 91: break;
          case 34: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 92: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 93: break;
          case 36: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 94: break;
          case 37: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 95: break;
          case 38: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 96: break;
          case 39: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 97: break;
          case 40: 
            { return CndTypes.NODE_NAME;
            }
          case 98: break;
          case 41: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 99: break;
          case 42: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 100: break;
          case 43: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 101: break;
          case 44: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 102: break;
          case 45: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 103: break;
          case 46: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 104: break;
          case 47: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 105: break;
          case 48: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 106: break;
          case 49: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 107: break;
          case 50: 
            { return CndTypes.COMMENT;
            }
          case 108: break;
          case 51: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 109: break;
          case 52: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 110: break;
          case 53: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 111: break;
          case 54: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 112: break;
          case 55: 
            { return CndTypes.OPTION;
            }
          case 113: break;
          case 56: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            }
          case 114: break;
          case 57: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            }
          case 115: break;
          case 58: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
