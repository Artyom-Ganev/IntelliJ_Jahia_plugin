/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int SUPER_TYPES = 10;
  public static final int OPTIONS = 12;
  public static final int EXTENDS = 14;
  public static final int EXTEND_NAMESPACE = 16;
  public static final int EXTEND = 18;
  public static final int ITEMTYPE = 20;
  public static final int PROPERTY = 22;
  public static final int PROPERTY_TYPE = 24;
  public static final int PROPERTY_MASK_OPTION_NAME = 26;
  public static final int PROPERTY_MASK_OPTION = 28;
  public static final int PROPERTY_DEFAULT = 30;
  public static final int PROPERTY_DEFAULT_VALUE = 32;
  public static final int PROPERTY_ATTRIBUTES = 34;
  public static final int PROPERTY_CONSTRAINT = 36;
  public static final int NODE = 38;
  public static final int NODE_NAMESPACE = 40;
  public static final int NODE_NODETYPE = 42;
  public static final int NODE_DEFAULT = 44;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 46;
  public static final int NODE_DEFAULT_VALUE = 48;
  public static final int NODE_ATTRIBUTES = 50;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15488 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\33\1\34\1\35\2\21\1\36\11\21"+
    "\1\37\21\21\1\40\1\41\23\21\1\27\1\42\3\21\1\22\1\43\1\42\4\21\1\44\1\45\4"+
    "\0\1\46\1\47\1\27\3\21\2\50\1\27\1\51\1\52\1\0\1\53\5\21\1\54\2\0\1\55\1\56"+
    "\1\57\13\21\1\60\1\46\1\61\1\62\1\55\1\63\1\27\1\64\1\65\3\21\3\0\1\66\12"+
    "\21\1\67\1\0\1\70\1\27\1\55\1\71\3\21\1\54\1\72\1\20\2\21\1\67\1\73\1\74\1"+
    "\75\2\27\3\21\1\76\10\27\1\77\1\30\6\27\1\100\2\0\1\101\1\102\6\21\1\103\2"+
    "\0\1\104\1\21\1\105\1\55\2\42\1\106\1\107\1\110\2\21\1\77\1\111\1\112\1\113"+
    "\1\114\1\64\1\115\1\105\1\55\1\116\1\52\1\106\1\117\1\110\2\21\1\77\1\120"+
    "\1\121\1\122\1\123\1\124\1\125\1\126\1\55\1\127\1\27\1\106\1\37\1\36\2\21"+
    "\1\77\1\130\1\112\1\46\1\131\1\132\1\27\1\105\1\55\1\43\1\27\1\106\1\107\1"+
    "\110\2\21\1\77\1\130\1\112\1\113\1\123\1\133\1\115\1\105\1\55\1\43\1\27\1"+
    "\134\1\135\1\136\1\137\1\140\1\135\1\21\1\141\1\142\1\143\1\144\1\27\1\126"+
    "\1\55\1\27\1\43\1\106\1\32\1\77\2\21\1\77\1\145\1\146\1\147\1\143\1\150\1"+
    "\26\1\105\1\55\2\27\1\151\1\32\1\77\2\21\1\77\1\145\1\112\1\147\1\143\1\150"+
    "\1\34\1\105\1\55\1\152\1\27\1\151\1\32\1\77\4\21\1\153\1\147\1\154\1\64\1"+
    "\27\1\105\1\55\1\27\1\41\1\151\1\21\1\22\1\41\2\21\1\36\1\155\1\22\1\156\1"+
    "\157\1\0\1\160\1\161\1\162\1\27\1\42\5\21\1\163\1\164\1\165\1\101\1\55\1\166"+
    "\4\27\1\167\1\170\1\171\1\42\1\172\1\173\1\163\1\174\1\175\1\176\1\55\1\177"+
    "\4\27\1\132\2\27\1\200\1\55\1\166\1\201\1\202\1\21\1\42\3\21\1\30\1\45\1\0"+
    "\1\147\1\203\1\0\1\45\3\0\1\51\1\204\7\27\5\21\1\54\1\0\1\205\1\55\1\166\1"+
    "\67\1\206\1\207\1\210\1\211\1\21\1\212\1\213\1\55\1\214\4\21\1\37\1\17\5\21"+
    "\1\215\51\21\1\136\1\22\1\136\5\21\1\136\4\21\1\136\1\22\1\136\1\21\1\22\7"+
    "\21\1\136\10\21\1\216\4\27\2\21\2\27\12\21\1\30\1\27\1\42\114\21\1\107\2\21"+
    "\1\217\2\21\1\50\11\21\1\135\1\132\1\27\1\21\1\32\1\220\1\27\2\21\1\220\1"+
    "\27\2\21\1\221\1\27\1\21\1\32\1\222\1\27\6\21\1\223\3\0\1\224\1\225\1\55\1"+
    "\166\3\27\1\226\1\55\1\166\13\21\1\27\5\21\1\227\10\21\1\230\1\27\3\21\1\30"+
    "\1\0\1\2\1\0\1\2\1\126\1\55\3\21\1\230\1\30\1\27\5\21\1\116\2\0\1\57\1\200"+
    "\1\55\1\166\4\27\2\21\1\165\1\2\6\21\1\203\1\101\3\0\1\113\1\55\1\166\1\55"+
    "\1\166\1\44\13\27\1\231\5\21\1\223\1\0\1\231\1\116\1\55\1\166\1\27\1\232\1"+
    "\2\1\27\1\233\3\21\1\104\1\210\1\55\1\71\4\21\1\67\1\0\1\2\1\27\4\21\1\223"+
    "\2\0\1\27\1\55\1\234\1\55\1\71\3\21\1\230\12\27\1\235\2\0\1\236\1\237\1\27"+
    "\30\21\4\0\1\101\2\27\1\100\42\21\2\230\4\21\2\230\1\21\1\240\3\21\1\230\6"+
    "\21\1\32\1\175\1\241\1\30\1\242\1\116\1\21\1\30\1\241\1\30\1\243\1\244\3\27"+
    "\1\245\1\27\1\44\1\132\1\27\1\246\1\247\1\51\1\250\1\43\1\44\2\27\1\21\1\30"+
    "\3\21\1\50\2\27\1\0\1\51\1\251\1\0\1\252\1\27\1\253\1\41\1\155\1\254\1\31"+
    "\1\255\1\21\1\256\1\257\1\260\2\27\5\21\1\132\116\27\5\21\1\22\5\21\1\22\20"+
    "\21\1\30\1\261\1\262\1\27\4\21\1\37\1\17\7\21\1\44\1\27\1\64\2\21\1\22\1\27"+
    "\10\22\4\0\5\27\1\44\72\27\1\263\3\27\1\42\1\212\1\254\1\30\1\42\11\21\1\22"+
    "\1\264\1\42\12\21\1\215\1\257\4\21\1\230\1\42\12\21\1\22\2\27\3\21\1\50\6"+
    "\27\170\21\1\230\11\27\71\21\1\30\6\27\21\21\1\30\10\27\5\21\1\230\41\21\1"+
    "\30\2\21\1\55\1\265\2\27\5\21\1\165\1\100\1\266\3\21\1\64\12\21\1\200\3\27"+
    "\1\44\1\21\1\41\14\21\1\267\1\116\1\27\1\21\1\50\11\27\1\21\1\270\1\271\2"+
    "\21\1\54\2\27\1\132\6\21\1\116\1\27\1\272\5\21\1\223\1\0\1\51\1\27\1\55\1"+
    "\166\2\0\1\272\1\52\1\55\1\71\2\21\1\67\1\176\2\21\1\165\1\0\1\2\1\27\3\21"+
    "\1\30\1\102\5\21\1\54\1\0\1\252\1\44\1\55\1\166\2\27\1\161\1\273\5\21\1\104"+
    "\1\101\1\27\1\271\1\274\1\55\1\166\2\21\1\22\1\275\6\21\1\207\1\276\1\227"+
    "\2\27\1\277\1\21\1\54\1\300\1\27\3\301\1\27\2\22\22\27\4\21\1\54\1\302\1\55"+
    "\1\166\64\21\1\116\1\27\2\21\1\22\1\303\5\21\1\116\40\27\55\21\1\230\15\21"+
    "\1\26\4\27\1\22\1\27\1\303\1\304\1\21\1\77\1\22\1\175\1\305\15\21\1\26\3\27"+
    "\1\303\54\21\1\230\2\27\10\21\1\41\6\21\5\27\1\21\1\30\2\0\2\27\1\101\1\27"+
    "\1\140\2\27\1\257\3\27\1\43\1\32\20\21\1\306\1\246\1\27\1\55\1\166\1\42\2"+
    "\21\1\117\1\42\2\21\1\50\1\307\12\21\1\22\3\41\1\310\1\311\2\27\1\312\1\21"+
    "\1\145\2\21\1\22\2\21\1\313\1\21\1\230\1\21\1\230\4\27\17\21\1\50\10\27\6"+
    "\21\1\30\20\27\1\314\20\27\3\21\1\30\6\21\1\132\5\27\3\21\1\22\2\27\3\21\1"+
    "\50\6\27\3\21\1\230\4\21\1\116\1\21\1\254\5\27\23\21\1\230\1\55\1\166\52\27"+
    "\1\230\1\77\4\21\1\37\1\315\2\21\1\230\25\27\2\21\1\230\1\27\3\21\1\26\10"+
    "\27\7\21\1\307\10\27\1\316\1\100\1\145\1\42\2\21\1\116\1\122\4\27\3\21\1\30"+
    "\20\27\6\21\1\230\1\27\2\21\1\230\1\27\2\21\1\50\21\27\11\21\1\132\66\27\1"+
    "\233\6\21\1\0\1\101\3\27\1\126\1\55\2\27\1\233\5\21\1\0\1\317\2\27\3\21\1"+
    "\132\1\55\1\166\1\233\3\21\1\165\1\0\1\320\1\55\10\27\1\233\5\21\1\54\1\0"+
    "\1\321\1\27\1\55\1\166\42\27\1\161\1\273\72\27\1\161\1\273\56\27\1\161\1\273"+
    "\4\27\5\21\1\54\1\0\1\27\1\55\1\166\14\27\1\161\1\273\64\27\1\161\1\273\42"+
    "\27\55\21\1\22\22\27\14\21\1\50\63\27\5\21\1\22\72\27\7\21\1\132\4\27\1\161"+
    "\1\273\34\27\1\161\1\273\64\27\10\21\1\30\1\27\1\104\4\0\1\101\1\27\1\64\1"+
    "\233\1\21\14\27\1\26\153\27\1\322\1\323\2\0\1\324\1\2\3\27\1\325\22\27\1\326"+
    "\67\27\12\21\1\32\10\21\1\32\1\327\1\330\1\21\1\331\1\145\7\21\1\37\1\332"+
    "\2\32\3\21\1\333\1\175\1\41\1\77\51\21\1\230\3\21\1\77\2\21\1\215\3\21\1\215"+
    "\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\77\3\21\1\77\2\21\1\215\1"+
    "\334\6\55\1\145\3\21\1\167\1\42\1\215\1\335\1\253\1\336\1\167\1\240\1\167"+
    "\2\215\1\125\1\21\1\36\1\21\1\116\1\337\1\36\1\21\1\116\50\27\32\21\1\22\5"+
    "\27\106\21\1\30\1\27\33\21\1\230\74\27\1\124\3\27\14\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1792 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\72\1\3\1\2\6\7\4\0\1\46\3\0\1\6\2\0\1\40\1\65\1\66\1\5\1\71"+
    "\1\53\1\55\1\45\1\4\1\62\1\32\6\62\1\33\1\62\1\54\1\0\1\51\1\37\1\52\2\0\1"+
    "\14\1\15\1\21\1\23\1\24\1\36\1\50\1\35\1\57\1\56\1\61\1\25\1\10\1\13\1\22"+
    "\1\31\1\26\1\20\1\60\1\17\1\27\1\47\1\42\1\12\1\30\1\34\1\63\1\0\1\64\1\0"+
    "\1\56\1\12\1\30\1\34\4\0\6\7\1\70\2\7\1\67\1\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6"+
    "\4\0\1\6\5\0\17\6\1\0\2\11\15\6\1\16\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6"+
    "\1\0\5\6\1\0\2\6\2\0\4\6\10\0\1\6\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6"+
    "\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7"+
    "\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0\3\6\5\7\12\44\4\0\2\6\1\7\13\6\1"+
    "\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\44\3\6\2\0\1\6\7\0\1\7\1\6\1\7\6\6\3\7\2"+
    "\0\11\6\3\7\1\6\6\0\2\44\6\6\4\7\2\6\2\0\2\7\1\6\11\7\1\6\3\7\1\6\5\7\2\0"+
    "\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7\1\6\2\7\1\6\7\7\2\6\2\7"+
    "\2\0\2\44\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6\3\0\4\6\2\0\1\7\1\6\7\7"+
    "\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2\6\1\0\2\6\1\0\2\6\1\0\2"+
    "\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6\1\0\1\6\7\0\2\44\2\7\3"+
    "\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\15\0\2\7\2\0\1\7\1\6\1"+
    "\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4\0\5\7\3\0"+
    "\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0\2\7\3\0\2"+
    "\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1\6\4\0\1\7"+
    "\4\0\6\7\1\0\1\7\7\0\12\43\2\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\1\7\2\44\7"+
    "\0\2\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0"+
    "\2\6\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\44\2\0\4\6\2\7"+
    "\13\0\1\7\1\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7"+
    "\1\6\3\7\2\6\7\7\3\6\4\7\5\6\14\7\1\6\1\7\2\44\4\7\2\0\3\6\1\0\7\6\2\0\3\7"+
    "\1\67\11\6\3\7\3\0\2\6\2\7\4\0\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1"+
    "\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\44\3\0\3\6\3"+
    "\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0"+
    "\6\6\2\0\2\6\13\67\5\7\2\72\5\7\1\67\4\0\1\6\12\0\1\67\2\0\6\7\1\0\1\7\3\0"+
    "\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\1\41\3\6\1\0\3\6\2\0\4\6\5\0\5\6"+
    "\4\0\1\6\4\0\4\6\3\7\2\6\4\0\1\67\4\0\3\6\1\0\2\7\2\0\3\6\2\44\2\6\4\0\6\7"+
    "\1\0\2\6\2\0\4\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\4\6\2\7\6\6\2\43\6\0\4\6\2\7"+
    "\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5"+
    "\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0"+
    "\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1"+
    "\0\2\7\1\0\3\7\2\0\1\7\2\0\5\7\1\0\2\44\1\7\4\6\10\0\5\7\3\0\6\7\2\0\3\7\2"+
    "\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6\1\0\1\6\1\0\6\6\2\0\5\6\1\0"+
    "\4\6\1\0\4\6\2\0\2\44\1\0\1\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0\3\6\1\0\3\6\1\0"+
    "\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\32\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\2\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\4\1\1\23\1\24"+
    "\1\25\5\1\1\26\1\27\14\1\1\30\1\31\1\32"+
    "\13\1\2\33\1\11\1\1\1\34\14\1\1\35\1\1"+
    "\1\36\4\37\15\1\2\40\2\41\1\42\1\43\1\44"+
    "\1\45\5\1\1\46\1\1\1\47\1\50\6\1\1\51"+
    "\7\0\1\10\53\0\1\33\25\0\3\37\24\0\1\40"+
    "\31\0\1\10\30\0\1\52\24\0\1\33\32\0\2\37"+
    "\56\0\1\51\6\0\1\10\13\0\1\53\6\0\1\52"+
    "\12\0\1\54\2\0\1\54\13\0\1\55\21\0\2\37"+
    "\6\0\1\56\30\0\1\57\11\0\1\60\2\0\1\61"+
    "\5\0\1\10\1\0\1\62\16\0\1\53\50\0\2\37"+
    "\60\0\1\63\45\0\2\37\37\0\1\64\36\0\1\55"+
    "\4\0\2\37\10\0\1\56\14\0\1\65\1\0\1\66"+
    "\13\0\1\54\14\0\2\37\24\0\1\54\12\0\1\55"+
    "\13\0\1\56\237\0\1\55\1\56";

  private static int [] zzUnpackAction() {
    int [] result = new int[992];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\73\0\166\0\261\0\354\0\u0127\0\u0162\0\u019d"+
    "\0\u01d8\0\u0213\0\u024e\0\u0289\0\u02c4\0\u02ff\0\u033a\0\u0375"+
    "\0\u03b0\0\u03eb\0\u0426\0\u0461\0\u049c\0\u04d7\0\u0512\0\u054d"+
    "\0\u0588\0\u05c3\0\u05fe\0\u05fe\0\u0639\0\u0674\0\u06af\0\u06ea"+
    "\0\u0725\0\u0760\0\u079b\0\u07d6\0\u0811\0\u05fe\0\u05fe\0\u05fe"+
    "\0\u05fe\0\u084c\0\u0887\0\u08c2\0\u05fe\0\u05fe\0\u05fe\0\u08fd"+
    "\0\u0938\0\u05fe\0\u05fe\0\u05fe\0\u0973\0\u05fe\0\u09ae\0\u09e9"+
    "\0\u0a24\0\u0a5f\0\u05fe\0\u0a9a\0\u05fe\0\u0ad5\0\u0b10\0\u0b4b"+
    "\0\u0b86\0\u0bc1\0\u0bfc\0\u05fe\0\u0c37\0\u0c72\0\u0cad\0\u0ce8"+
    "\0\u0d23\0\u0d5e\0\u0d99\0\u0dd4\0\u0e0f\0\u0e4a\0\u0e85\0\u0ec0"+
    "\0\u05fe\0\u05fe\0\u05fe\0\u0efb\0\u0f36\0\u0f71\0\u0fac\0\u0fe7"+
    "\0\u1022\0\u105d\0\u1098\0\u10d3\0\u110e\0\u1149\0\u1184\0\u11bf"+
    "\0\u1184\0\u11fa\0\u05fe\0\u1235\0\u1270\0\u12ab\0\u12e6\0\u1321"+
    "\0\u135c\0\u1397\0\u13d2\0\u140d\0\u1448\0\u1483\0\u14be\0\u05fe"+
    "\0\u14f9\0\u05fe\0\u1534\0\u156f\0\u15aa\0\u15e5\0\u1620\0\u165b"+
    "\0\u1696\0\u16d1\0\u170c\0\u1747\0\u1782\0\u17bd\0\u17f8\0\u1833"+
    "\0\u186e\0\u18a9\0\u18e4\0\u191f\0\u195a\0\u05fe\0\u1995\0\u05fe"+
    "\0\u19d0\0\u05fe\0\u05fe\0\u1a0b\0\u1a46\0\u1a81\0\u1abc\0\u1af7"+
    "\0\u05fe\0\u1b32\0\u1b6d\0\u1ba8\0\u1be3\0\u1c1e\0\u1c59\0\u1c94"+
    "\0\u1ccf\0\u1d0a\0\u1d45\0\u1d80\0\u1dbb\0\u1df6\0\u1e31\0\u1e6c"+
    "\0\u1ea7\0\u1ee2\0\u1f1d\0\u1f58\0\u1f93\0\u1fce\0\u2009\0\u2044"+
    "\0\u207f\0\u20ba\0\u20f5\0\u2130\0\u216b\0\u21a6\0\u21e1\0\u221c"+
    "\0\u2257\0\u2292\0\u22cd\0\u2308\0\u2343\0\u237e\0\u23b9\0\u23f4"+
    "\0\u242f\0\u246a\0\u24a5\0\u24e0\0\u251b\0\u2556\0\u2591\0\u25cc"+
    "\0\u2607\0\u2642\0\u267d\0\u26b8\0\u26f3\0\u272e\0\u2769\0\u27a4"+
    "\0\u27df\0\u281a\0\u2855\0\u2890\0\u28cb\0\u2906\0\u2941\0\u297c"+
    "\0\u29b7\0\u29f2\0\u2a2d\0\u2a68\0\u2aa3\0\u2ade\0\u2b19\0\u2b54"+
    "\0\u2b8f\0\u2bca\0\u2c05\0\u2c40\0\u2c7b\0\u2cb6\0\u2cf1\0\u2d2c"+
    "\0\u2d67\0\u2da2\0\u2ddd\0\u2e18\0\u2e53\0\u2e8e\0\u2ec9\0\u2f04"+
    "\0\u2f3f\0\u2f7a\0\u2fb5\0\u2ff0\0\u302b\0\u3066\0\u30a1\0\u30dc"+
    "\0\u3117\0\u3152\0\u318d\0\u31c8\0\u3203\0\u323e\0\u3279\0\u32b4"+
    "\0\u32ef\0\u332a\0\u3365\0\u33a0\0\u33db\0\u3416\0\u3451\0\u348c"+
    "\0\u34c7\0\u3502\0\u353d\0\u3578\0\u35b3\0\u35ee\0\u3629\0\u3664"+
    "\0\u369f\0\u36da\0\u3715\0\u3750\0\u378b\0\u37c6\0\u3801\0\u383c"+
    "\0\u3877\0\u38b2\0\u38ed\0\u3928\0\u3963\0\u399e\0\u39d9\0\u3a14"+
    "\0\u3a4f\0\u3a8a\0\u3ac5\0\u3b00\0\u3b3b\0\u3b76\0\u3bb1\0\u3bec"+
    "\0\u3c27\0\u3c62\0\u3c9d\0\u3cd8\0\u3d13\0\u3d4e\0\u3d89\0\u3dc4"+
    "\0\u3dff\0\u3e3a\0\u3e75\0\u3eb0\0\u3eeb\0\u3f26\0\u05fe\0\u3f61"+
    "\0\u3f9c\0\u3fd7\0\u4012\0\u404d\0\u4088\0\u40c3\0\u40fe\0\u4139"+
    "\0\u4174\0\u41af\0\u41ea\0\u4225\0\u4260\0\u429b\0\u42d6\0\u4311"+
    "\0\u434c\0\u4387\0\u43c2\0\u05fe\0\u43fd\0\u4438\0\u4473\0\u44ae"+
    "\0\u44e9\0\u4524\0\u455f\0\u459a\0\u45d5\0\u4610\0\u464b\0\u4686"+
    "\0\u46c1\0\u46fc\0\u4737\0\u4772\0\u47ad\0\u47e8\0\u4823\0\u485e"+
    "\0\u4899\0\u48d4\0\u490f\0\u494a\0\u4985\0\u49c0\0\u49fb\0\u4a36"+
    "\0\u4a71\0\u4aac\0\u4ae7\0\u4b22\0\u4b5d\0\u4b98\0\u4bd3\0\u4c0e"+
    "\0\u4c49\0\u4c84\0\u4cbf\0\u4cfa\0\u4d35\0\u4d70\0\u4dab\0\u4de6"+
    "\0\u4e21\0\u4e5c\0\u4e97\0\u4ed2\0\u4f0d\0\u4f48\0\u4f83\0\u4fbe"+
    "\0\u4ff9\0\u5034\0\u506f\0\u50aa\0\u50e5\0\u5120\0\u515b\0\u5196"+
    "\0\u51d1\0\u520c\0\u5247\0\u5282\0\u52bd\0\u52f8\0\u5333\0\u536e"+
    "\0\u53a9\0\u53e4\0\u541f\0\u545a\0\u5495\0\u54d0\0\u05fe\0\u550b"+
    "\0\u5546\0\u5581\0\u55bc\0\u55f7\0\u5632\0\u566d\0\u56a8\0\u56e3"+
    "\0\u571e\0\u5759\0\u5794\0\u57cf\0\u580a\0\u5845\0\u5880\0\u58bb"+
    "\0\u58f6\0\u5931\0\u596c\0\u59a7\0\u59e2\0\u5a1d\0\u5a58\0\u5a93"+
    "\0\u5ace\0\u5b09\0\u5b44\0\u5b7f\0\u5bba\0\u5bf5\0\u5c30\0\u5c6b"+
    "\0\u5ca6\0\u5ce1\0\u5d1c\0\u5d57\0\u5d92\0\u5dcd\0\u05fe\0\u5e08"+
    "\0\u5e43\0\u5e7e\0\u5eb9\0\u5ef4\0\u5f2f\0\u5f6a\0\u5fa5\0\u5fe0"+
    "\0\u601b\0\u6056\0\u05fe\0\u6091\0\u60cc\0\u6107\0\u6142\0\u617d"+
    "\0\u61b8\0\u61f3\0\u622e\0\u6269\0\u62a4\0\u62df\0\u631a\0\u6355"+
    "\0\u6390\0\u63cb\0\u6406\0\u6441\0\u647c\0\u64b7\0\u64f2\0\u652d"+
    "\0\u6568\0\u65a3\0\u65de\0\u6619\0\u05fe\0\u6654\0\u668f\0\u66ca"+
    "\0\u6705\0\u6740\0\u677b\0\u67b6\0\u67f1\0\u682c\0\u6867\0\u68a2"+
    "\0\u68dd\0\u6918\0\u6953\0\u698e\0\u69c9\0\u6a04\0\u6a3f\0\u6a7a"+
    "\0\u6ab5\0\u6af0\0\u6b2b\0\u6b66\0\u6ba1\0\u05fe\0\u6bdc\0\u6c17"+
    "\0\u6c52\0\u6c8d\0\u6cc8\0\u6d03\0\u6d3e\0\u6d79\0\u6db4\0\u05fe"+
    "\0\u6def\0\u6e2a\0\u05fe\0\u6e65\0\u6ea0\0\u6edb\0\u6f16\0\u6f51"+
    "\0\u6f8c\0\u6fc7\0\u05fe\0\u7002\0\u703d\0\u7078\0\u70b3\0\u70ee"+
    "\0\u7129\0\u7164\0\u719f\0\u71da\0\u7215\0\u7250\0\u728b\0\u72c6"+
    "\0\u7301\0\u05fe\0\u733c\0\u7377\0\u73b2\0\u73ed\0\u7428\0\u7463"+
    "\0\u749e\0\u74d9\0\u7514\0\u754f\0\u758a\0\u75c5\0\u7600\0\u763b"+
    "\0\u7676\0\u76b1\0\u76ec\0\u7727\0\u7762\0\u779d\0\u77d8\0\u7813"+
    "\0\u784e\0\u7889\0\u78c4\0\u78ff\0\u793a\0\u7975\0\u79b0\0\u79eb"+
    "\0\u7a26\0\u7a61\0\u7a9c\0\u7ad7\0\u7b12\0\u7b4d\0\u7b88\0\u7bc3"+
    "\0\u7bfe\0\u7c39\0\u7c74\0\u7caf\0\u7cea\0\u7d25\0\u7d60\0\u7d9b"+
    "\0\u7dd6\0\u7e11\0\u7e4c\0\u7e87\0\u7ec2\0\u7efd\0\u7f38\0\u7f73"+
    "\0\u7fae\0\u7fe9\0\u8024\0\u805f\0\u809a\0\u80d5\0\u8110\0\u814b"+
    "\0\u8186\0\u81c1\0\u81fc\0\u8237\0\u8272\0\u82ad\0\u82e8\0\u8323"+
    "\0\u835e\0\u8399\0\u83d4\0\u840f\0\u844a\0\u8485\0\u84c0\0\u84fb"+
    "\0\u8536\0\u8571\0\u85ac\0\u85e7\0\u8622\0\u865d\0\u8698\0\u86d3"+
    "\0\u870e\0\u8749\0\u8784\0\u87bf\0\u05fe\0\u87fa\0\u8835\0\u8870"+
    "\0\u88ab\0\u88e6\0\u8921\0\u895c\0\u8997\0\u89d2\0\u8a0d\0\u8a48"+
    "\0\u8a83\0\u8abe\0\u8af9\0\u8b34\0\u8b6f\0\u8baa\0\u8be5\0\u8c20"+
    "\0\u8c5b\0\u8c96\0\u8cd1\0\u8d0c\0\u8d47\0\u8d82\0\u8dbd\0\u8df8"+
    "\0\u8e33\0\u8e6e\0\u8ea9\0\u8ee4\0\u8f1f\0\u1321\0\u8f5a\0\u8f95"+
    "\0\u8fd0\0\u900b\0\u9046\0\u9081\0\u90bc\0\u90f7\0\u9132\0\u916d"+
    "\0\u91a8\0\u91e3\0\u921e\0\u9259\0\u9294\0\u92cf\0\u930a\0\u170c"+
    "\0\u9345\0\u9380\0\u93bb\0\u93f6\0\u9431\0\u946c\0\u94a7\0\u94e2"+
    "\0\u951d\0\u9558\0\u9593\0\u95ce\0\u9609\0\u9644\0\u967f\0\u96ba"+
    "\0\u96f5\0\u9730\0\u976b\0\u05fe\0\u97a6\0\u97e1\0\u981c\0\u9857"+
    "\0\u9892\0\u98cd\0\u9908\0\u9943\0\u997e\0\u99b9\0\u99f4\0\u9a2f"+
    "\0\u9a6a\0\u9aa5\0\u9ae0\0\u9b1b\0\u9b56\0\u9b91\0\u9bcc\0\u9c07"+
    "\0\u9c42\0\u9c7d\0\u9cb8\0\u9cf3\0\u9d2e\0\u9d69\0\u9da4\0\u9ddf"+
    "\0\u9e1a\0\u9e55\0\u9e90\0\u9ecb\0\u9f06\0\u9f41\0\u9f7c\0\u9fb7"+
    "\0\u9ff2\0\ua02d\0\ua068\0\ua0a3\0\ua0de\0\ua119\0\ua154\0\ua18f"+
    "\0\ua1ca\0\ua205\0\ua240\0\ua27b\0\ua2b6\0\ua2f1\0\ua32c\0\ua367"+
    "\0\ua3a2\0\ua3dd\0\ua418\0\ua453\0\ua48e\0\ua4c9\0\u05fe\0\ua504"+
    "\0\u97a6\0\ua53f\0\ua57a\0\ua5b5\0\ua5f0\0\ua62b\0\ua666\0\ua6a1"+
    "\0\ua6dc\0\ua717\0\ua752\0\ua78d\0\u9b56\0\ua7c8\0\ua803\0\ua83e"+
    "\0\ua879\0\ua8b4\0\ua8ef\0\ua92a\0\ua965\0\ua9a0\0\ua9db\0\uaa16"+
    "\0\uaa51\0\uaa8c\0\uaac7\0\uab02\0\uab3d\0\uab78\0\uabb3\0\uabee"+
    "\0\uac29\0\uac64\0\uac9f\0\uacda\0\uad15\0\uad50\0\uad8b\0\uadc6"+
    "\0\uae01\0\uae3c\0\uae77\0\uaeb2\0\uaeed\0\uaf28\0\uaf63\0\uaf9e"+
    "\0\uafd9\0\ub014\0\ub04f\0\ub08a\0\ub0c5\0\ub100\0\ub13b\0\ub176"+
    "\0\ub1b1\0\ub1ec\0\ua965\0\ub227\0\ub262\0\ub29d\0\ub2d8\0\ub313"+
    "\0\ub34e\0\ub389\0\ub3c4\0\ub3ff\0\ub43a\0\ub475\0\uac9f\0\ub4b0"+
    "\0\ub4eb\0\ub526\0\ub561\0\ub59c\0\ub5d7\0\ub612\0\ub64d\0\ub688"+
    "\0\ub6c3\0\ub6fe\0\ub739\0\ub774\0\ub7af\0\ub7ea\0\ub825\0\ub860"+
    "\0\ub89b\0\ub8d6\0\ub911\0\ub94c\0\ub987\0\ub9c2\0\ub9fd\0\uba38"+
    "\0\uba73\0\ubaae\0\ubae9\0\ubb24\0\ubb5f\0\ubb9a\0\ubbd5\0\ubc10"+
    "\0\ubc4b\0\ubc86\0\ubcc1\0\ubcfc\0\ubd37\0\ubd72\0\ubdad\0\ubde8"+
    "\0\ube23\0\ube5e\0\ube99\0\ubed4\0\ubf0f\0\ubf4a\0\ubf85\0\ubfc0"+
    "\0\ubffb\0\uc036\0\uc071\0\uc0ac\0\uc0e7\0\uc122\0\uc15d\0\uc198"+
    "\0\uc1d3\0\uc20e\0\uc249\0\uc284\0\uc2bf\0\uc2fa\0\uc335\0\uc370"+
    "\0\uc3ab\0\uc3e6\0\uc421\0\uc45c\0\uc497\0\uc4d2\0\uc50d\0\uc548"+
    "\0\uc583\0\uc5be\0\uc5f9\0\uc634\0\uc66f\0\uc6aa\0\uc6e5\0\uc720"+
    "\0\uc75b\0\uc796\0\uc7d1\0\uc80c\0\uc847\0\uc882\0\uc8bd\0\uc8f8"+
    "\0\uc933\0\uc96e\0\uc9a9\0\uc9e4\0\uca1f\0\uca5a\0\uca95\0\ucad0"+
    "\0\ucb0b\0\ucb46\0\ucb81\0\ucbbc\0\ucbf7\0\ucc32\0\ucc6d\0\ucca8"+
    "\0\ucce3\0\ucd1e\0\ucd59\0\ucd94\0\ucdcf\0\uce0a\0\uce45\0\uce80"+
    "\0\ucebb\0\ucef6\0\ucf31\0\ucf6c\0\ucfa7\0\ucfe2\0\ud01d\0\ud058"+
    "\0\ud093\0\ud0ce\0\ud109\0\ud144\0\ud17f\0\ud1ba\0\ud1f5\0\ud230"+
    "\0\ud26b\0\ud2a6\0\ud2e1\0\ud31c\0\ud357\0\ud392\0\ud3cd\0\ud408"+
    "\0\ud443\0\ud47e\0\ud4b9\0\ud4f4\0\ud52f\0\ud56a\0\ud5a5\0\ud5e0"+
    "\0\ud61b\0\ud656\0\ud691\0\ud6cc\0\ud707\0\ud742\0\ud77d\0\ud7b8"+
    "\0\ud7f3\0\ud82e\0\ud869\0\ud8a4\0\ud8df\0\ud91a\0\ud742\0\ud82e";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[992];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\33\1\34\1\35\1\36\1\37\3\33\1\40\1\41"+
    "\1\33\1\42\1\43\5\33\1\44\1\33\1\45\21\33"+
    "\1\36\2\33\1\46\3\33\1\47\1\33\1\41\3\33"+
    "\1\50\4\33\1\0\1\51\1\0\1\33\1\34\1\35"+
    "\1\36\1\52\1\33\1\53\1\33\22\53\2\33\1\53"+
    "\1\54\1\53\1\55\1\56\2\53\3\33\1\36\2\53"+
    "\1\33\1\57\3\33\4\53\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\60\1\33"+
    "\22\60\2\33\3\60\2\33\2\60\3\33\1\36\2\60"+
    "\5\33\4\60\6\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\61\1\33\22\61\2\33"+
    "\3\61\2\33\2\61\3\33\1\36\2\61\1\33\1\62"+
    "\1\33\1\63\1\33\4\61\2\33\1\64\3\33\1\0"+
    "\1\33\1\0\1\33\1\34\1\35\1\36\1\52\1\33"+
    "\1\65\1\33\22\65\2\33\3\65\2\33\2\65\3\33"+
    "\1\36\2\65\5\33\4\65\6\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\61\1\33"+
    "\22\61\2\33\3\61\2\33\2\61\3\33\1\36\2\61"+
    "\2\33\1\66\1\63\1\33\4\61\6\33\1\0\1\33"+
    "\1\0\1\33\1\34\1\35\1\36\1\52\3\33\1\67"+
    "\2\33\1\70\1\71\5\33\1\72\23\33\1\36\21\33"+
    "\1\0\1\33\1\0\1\33\1\34\1\35\1\36\1\52"+
    "\32\33\1\73\6\33\1\36\21\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\74\1\33"+
    "\22\74\2\33\3\74\2\33\2\74\3\33\1\36\2\74"+
    "\5\33\4\74\6\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\61\1\33\22\61\2\33"+
    "\3\61\2\33\2\61\3\33\1\36\2\61\2\33\1\75"+
    "\1\63\1\33\4\61\6\33\1\0\1\33\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\3\33\1\76\10\33\1\77"+
    "\1\100\1\101\1\33\1\102\11\33\1\55\6\33\1\36"+
    "\21\33\1\0\1\33\1\0\1\33\1\34\1\35\1\36"+
    "\1\52\1\33\1\103\1\33\22\103\2\33\3\103\2\33"+
    "\2\103\3\33\1\36\2\103\5\33\4\103\3\33\1\104"+
    "\2\33\1\0\1\33\1\0\1\33\1\34\1\35\1\36"+
    "\1\52\6\33\1\105\1\33\1\106\1\107\1\110\1\111"+
    "\1\112\1\33\1\113\1\33\1\114\1\33\1\115\1\33"+
    "\1\116\4\33\1\117\3\33\1\120\3\33\1\36\4\33"+
    "\1\121\4\33\1\107\2\33\1\122\2\33\1\123\1\33"+
    "\1\0\1\33\1\0\1\33\1\34\1\35\1\36\1\52"+
    "\3\33\1\124\2\33\1\125\1\126\1\33\1\127\1\130"+
    "\1\131\1\132\3\33\1\133\1\33\1\134\6\33\1\135"+
    "\3\33\1\136\3\33\1\36\11\33\1\127\7\33\1\0"+
    "\1\33\1\0\1\137\1\34\1\35\1\137\1\140\32\137"+
    "\1\141\1\142\12\137\1\143\10\137\1\64\1\137\1\123"+
    "\4\137\1\33\1\34\1\35\1\36\1\52\3\33\1\144"+
    "\1\145\1\33\1\146\1\147\1\150\1\151\2\33\1\152"+
    "\1\153\3\33\1\154\2\33\1\155\3\33\1\156\1\157"+
    "\1\160\6\33\1\36\1\161\1\33\1\162\5\33\1\145"+
    "\1\151\7\33\1\0\1\33\1\0\1\163\1\34\1\35"+
    "\1\36\1\164\4\163\1\165\14\163\1\166\17\163\1\36"+
    "\10\163\1\165\7\163\1\33\1\0\1\163\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\3\33\1\167\1\170\1\33"+
    "\1\171\1\172\1\173\1\174\2\33\1\175\1\176\3\33"+
    "\1\177\2\33\1\200\3\33\1\201\1\202\7\33\1\36"+
    "\1\203\1\33\1\162\5\33\1\170\1\174\7\33\1\0"+
    "\1\33\1\0\1\204\1\34\1\35\1\36\1\205\41\204"+
    "\1\36\20\204\1\33\1\0\1\204\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\206\1\207\1\33\22\207\2\33"+
    "\3\207\2\33\2\207\3\33\1\36\2\207\5\33\4\207"+
    "\3\33\1\210\2\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\211\1\33\22\211\2\33"+
    "\3\211\2\33\2\211\3\33\1\36\2\211\5\33\4\211"+
    "\6\33\1\0\1\33\1\0\1\33\1\34\1\35\1\36"+
    "\1\52\1\33\1\61\1\33\22\61\2\33\3\61\2\33"+
    "\2\61\3\33\1\36\2\61\2\33\1\212\1\63\1\33"+
    "\4\61\4\33\1\213\1\33\1\0\1\33\1\0\1\33"+
    "\1\34\1\35\1\36\1\52\3\33\1\214\1\215\2\33"+
    "\1\216\4\33\1\217\7\33\1\220\5\33\1\221\6\33"+
    "\1\36\1\222\7\33\1\215\10\33\1\0\1\33\1\0"+
    "\1\33\1\34\1\35\1\36\1\52\1\33\1\223\1\33"+
    "\22\223\2\33\3\223\2\33\2\223\3\33\1\36\2\223"+
    "\5\33\4\223\6\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\1\33\1\224\1\33\22\224\2\33"+
    "\3\224\2\33\2\224\3\33\1\36\2\224\3\33\1\63"+
    "\1\33\4\224\6\33\1\0\1\33\1\0\1\33\1\34"+
    "\1\35\1\36\1\52\3\33\1\225\1\226\2\33\1\227"+
    "\4\33\1\230\7\33\1\231\14\33\1\36\1\232\7\33"+
    "\1\226\10\33\1\0\1\33\75\0\1\34\74\0\1\36"+
    "\42\0\1\36\30\0\1\233\1\234\76\0\1\235\45\0"+
    "\1\235\32\0\1\236\75\0\1\237\65\0\1\240\75\0"+
    "\1\241\64\0\1\242\64\0\1\233\74\0\31\53\2\0"+
    "\2\53\1\0\1\53\2\0\2\53\5\0\5\53\5\0"+
    "\1\53\10\0\11\53\1\243\17\53\2\0\2\53\1\0"+
    "\1\53\2\0\2\53\5\0\5\53\5\0\1\53\10\0"+
    "\31\60\2\0\2\60\1\0\1\60\2\0\2\60\5\0"+
    "\5\60\5\0\1\60\10\0\31\61\2\0\2\61\1\0"+
    "\1\61\2\0\2\61\5\0\5\61\5\0\1\61\10\0"+
    "\31\65\2\0\2\65\1\0\1\65\2\0\2\65\5\0"+
    "\5\65\5\0\1\65\13\0\1\244\45\0\1\244\35\0"+
    "\1\245\65\0\1\246\75\0\1\247\60\0\31\74\2\0"+
    "\2\74\1\0\1\74\2\0\2\74\5\0\5\74\5\0"+
    "\1\74\26\0\1\250\70\0\1\251\101\0\1\252\65\0"+
    "\1\253\62\0\1\254\64\0\31\103\2\0\2\103\1\0"+
    "\1\103\2\0\2\103\3\0\1\103\1\0\5\103\5\0"+
    "\1\103\16\0\1\255\67\0\1\256\10\0\1\257\34\0"+
    "\1\256\32\0\1\260\77\0\1\261\57\0\1\262\12\0"+
    "\1\263\32\0\1\262\27\0\1\264\5\0\1\265\12\0"+
    "\1\266\51\0\1\267\5\0\1\270\1\0\1\271\70\0"+
    "\1\272\70\0\1\273\63\0\1\274\2\0\1\275\42\0"+
    "\1\274\24\0\1\276\45\0\1\276\37\0\1\277\70\0"+
    "\1\300\1\0\1\301\70\0\1\302\77\0\1\303\64\0"+
    "\1\304\1\305\4\0\1\306\67\0\1\307\3\0\1\310"+
    "\66\0\1\311\70\0\1\312\61\0\1\313\45\0\1\313"+
    "\31\0\1\314\41\0\1\314\37\0\1\315\67\0\1\316"+
    "\50\0\1\137\2\0\35\137\1\0\12\137\1\0\10\137"+
    "\1\0\1\137\1\0\5\137\2\0\1\137\1\317\33\137"+
    "\1\0\12\137\1\0\10\137\1\0\1\137\1\0\4\137"+
    "\1\320\2\0\35\320\1\0\23\320\1\0\6\320\14\0"+
    "\1\321\12\0\1\322\56\0\1\323\3\0\1\324\12\0"+
    "\1\325\15\0\1\326\44\0\1\327\63\0\1\330\1\0"+
    "\1\331\11\0\1\332\65\0\1\333\71\0\1\334\1\335"+
    "\72\0\1\336\63\0\1\337\106\0\1\340\63\0\1\341"+
    "\63\0\1\342\45\0\1\342\27\0\1\343\102\0\1\344"+
    "\46\0\1\163\3\0\42\163\1\0\20\163\2\0\1\163"+
    "\1\0\1\163\3\0\1\345\41\163\1\0\20\163\2\0"+
    "\1\163\1\0\1\163\3\0\13\163\1\346\26\163\1\0"+
    "\20\163\2\0\1\163\1\0\1\163\3\0\23\163\1\347"+
    "\16\163\1\0\20\163\2\0\1\163\15\0\1\350\12\0"+
    "\1\351\56\0\1\352\3\0\1\353\12\0\1\354\15\0"+
    "\1\355\44\0\1\356\63\0\1\357\1\0\1\360\11\0"+
    "\1\361\65\0\1\362\71\0\1\363\1\364\72\0\1\365"+
    "\63\0\1\366\106\0\1\367\63\0\1\370\63\0\1\371"+
    "\45\0\1\371\27\0\1\372\102\0\1\373\46\0\1\204"+
    "\3\0\42\204\1\0\20\204\2\0\1\204\1\0\1\204"+
    "\3\0\1\374\41\204\1\0\20\204\2\0\1\204\7\0"+
    "\31\207\2\0\2\207\1\0\1\207\2\0\2\207\3\0"+
    "\1\207\1\0\5\207\5\0\1\207\10\0\31\211\2\0"+
    "\2\211\1\0\1\211\2\0\2\211\5\0\5\211\5\0"+
    "\1\211\16\0\1\375\12\0\1\376\56\0\1\377\34\0"+
    "\1\u0100\37\0\1\u0101\11\0\1\u0102\65\0\1\u0103\70\0"+
    "\1\u0104\76\0\1\u0105\54\0\31\223\2\0\2\223\1\0"+
    "\1\223\2\0\2\223\5\0\5\223\5\0\1\223\10\0"+
    "\31\224\2\0\2\224\1\0\1\224\2\0\2\224\5\0"+
    "\5\224\5\0\1\224\16\0\1\u0106\12\0\1\u0107\56\0"+
    "\1\u0108\34\0\1\u0109\37\0\1\u010a\11\0\1\u010b\65\0"+
    "\1\u010c\70\0\1\u010d\76\0\1\u010e\46\0\1\233\2\0"+
    "\70\233\5\234\1\u010f\65\234\12\0\1\u0110\104\0\1\u0111"+
    "\74\0\1\u0112\62\0\1\u0113\41\0\1\u0113\35\0\1\u0114"+
    "\66\0\1\u0115\61\0\11\53\1\u0116\17\53\2\0\2\53"+
    "\1\0\1\53\2\0\2\53\5\0\5\53\5\0\1\53"+
    "\14\0\1\u0117\106\0\1\u0118\62\0\1\u0119\41\0\1\u0119"+
    "\35\0\1\u011a\66\0\1\u011b\66\0\1\u011c\76\0\1\u011d"+
    "\111\0\1\u011e\64\0\1\u011f\52\0\1\u0120\75\0\1\u0121"+
    "\101\0\1\u0122\70\0\1\u0123\64\0\1\u0124\101\0\1\u0125"+
    "\107\0\1\u0126\53\0\1\u0127\100\0\1\u0128\67\0\1\u0129"+
    "\1\0\1\u012a\65\0\1\u012b\102\0\1\u012c\64\0\1\u012d"+
    "\64\0\1\u012e\70\0\1\u012f\45\0\1\u012f\34\0\1\u0130"+
    "\70\0\1\u0131\100\0\1\u0132\61\0\1\u0133\101\0\1\u0134"+
    "\62\0\1\u0135\102\0\1\u0136\66\0\1\u0137\73\0\1\u0138"+
    "\72\0\1\u0139\67\0\1\u013a\65\0\1\u013b\113\0\1\u013c"+
    "\57\0\1\u013d\41\0\1\u013d\22\0\1\u013e\16\0\1\u013f"+
    "\56\0\1\u0140\103\0\1\u0141\62\0\1\u0142\76\0\1\u0143"+
    "\52\0\1\317\2\0\35\317\1\233\12\317\1\233\10\317"+
    "\1\233\1\317\1\233\4\317\1\320\2\0\35\320\1\u0144"+
    "\23\320\1\0\6\320\13\0\1\u0145\104\0\1\u0146\56\0"+
    "\1\u0147\5\0\1\u0148\3\0\1\u0149\33\0\1\u0147\37\0"+
    "\1\u014a\101\0\1\u014b\52\0\1\u014c\105\0\1\u014d\7\0"+
    "\1\u014e\50\0\1\u014f\100\0\1\u0150\67\0\1\u0151\75\0"+
    "\1\u0152\72\0\1\u0153\70\0\1\u0154\62\0\1\u0155\20\0"+
    "\1\u0156\62\0\1\u0157\75\0\1\u0158\57\0\1\u0159\10\0"+
    "\1\u015a\34\0\1\u0159\36\0\1\u015b\1\u015c\67\0\1\u015d"+
    "\71\0\1\u015e\52\0\1\345\2\0\1\233\42\345\1\233"+
    "\20\345\2\233\1\345\1\233\1\163\3\0\20\163\1\u015f"+
    "\21\163\1\0\20\163\2\0\1\163\1\0\1\163\3\0"+
    "\20\163\1\u0160\21\163\1\0\20\163\2\0\1\163\14\0"+
    "\1\u0161\104\0\1\u0162\56\0\1\u0163\5\0\1\u0164\3\0"+
    "\1\u0165\33\0\1\u0163\37\0\1\u0166\101\0\1\u0167\52\0"+
    "\1\u0168\105\0\1\u0169\7\0\1\u016a\50\0\1\u016b\100\0"+
    "\1\u016c\67\0\1\u016d\75\0\1\u016e\72\0\1\u016f\70\0"+
    "\1\u0170\62\0\1\u0171\20\0\1\u0172\62\0\1\u0173\75\0"+
    "\1\u0174\57\0\1\u0175\10\0\1\u0176\34\0\1\u0175\36\0"+
    "\1\u0177\1\u0178\67\0\1\u0179\71\0\1\u017a\52\0\1\374"+
    "\2\0\1\233\42\374\1\233\20\374\2\233\1\374\1\233"+
    "\13\0\1\u017b\104\0\1\u017c\56\0\1\u017d\45\0\1\u017d"+
    "\26\0\1\u017e\101\0\1\u017f\67\0\1\u0180\63\0\1\u0181"+
    "\20\0\1\u0182\63\0\1\u0183\70\0\1\u0184\65\0\1\u0185"+
    "\104\0\1\u0186\56\0\1\u0187\45\0\1\u0187\26\0\1\u0188"+
    "\101\0\1\u0189\67\0\1\u018a\63\0\1\u018b\20\0\1\u018c"+
    "\63\0\1\u018d\70\0\1\u018e\52\0\4\234\1\u018f\1\u010f"+
    "\65\234\11\0\1\u0190\45\0\1\u0190\23\0\1\u0191\111\0"+
    "\1\u0192\62\0\1\u0193\77\0\1\u0194\72\0\1\u0195\54\0"+
    "\23\53\1\u0196\5\53\2\0\2\53\1\0\1\53\2\0"+
    "\2\53\5\0\5\53\5\0\1\53\13\0\1\u0197\45\0"+
    "\1\u0197\42\0\1\u0198\62\0\1\u0199\77\0\1\u019a\62\0"+
    "\1\u019b\75\0\1\u019c\64\0\1\u019d\45\0\1\u019d\27\0"+
    "\1\u019e\100\0\1\u019f\74\0\1\u012f\62\0\1\u01a0\103\0"+
    "\1\u01a1\56\0\1\272\45\0\1\272\32\0\1\u01a2\110\0"+
    "\1\u01a3\61\0\1\u01a4\72\0\1\u01a5\70\0\1\u01a6\61\0"+
    "\1\u01a7\45\0\1\u01a7\34\0\1\u01a8\75\0\1\u01a9\63\0"+
    "\1\u01aa\66\0\1\u01ab\45\0\1\u01ab\63\0\1\u012f\63\0"+
    "\1\u01ac\17\0\1\u01ac\46\0\1\u012f\61\0\1\u01ad\107\0"+
    "\1\u01ae\17\0\1\u01ae\40\0\1\u01af\72\0\1\u01b0\67\0"+
    "\1\u01b1\70\0\1\u01b2\61\0\1\u01b3\45\0\1\u01b3\32\0"+
    "\1\u01b4\66\0\1\u01b5\110\0\1\u01b6\65\0\1\u01b7\70\0"+
    "\1\u01b8\101\0\1\u01b9\54\0\1\u01ba\120\0\1\u01bb\17\0"+
    "\1\u01bb\31\0\1\u01b0\122\0\1\u01b7\63\0\1\u01bc\17\0"+
    "\1\u01bc\34\0\1\u01bd\66\0\1\u01be\72\0\1\u01bf\77\0"+
    "\1\u01c0\72\0\1\u01c1\56\0\1\u01c2\75\0\1\u01c3\101\0"+
    "\1\u01c4\77\0\1\u01c5\72\0\1\u01c6\70\0\1\u01c7\65\0"+
    "\1\u01c8\74\0\1\u01c9\66\0\1\u01ca\41\0\1\u01ca\32\0"+
    "\1\u01cb\71\0\1\u01cc\104\0\1\u01cd\71\0\1\u01c3\64\0"+
    "\1\u01ce\70\0\1\u01cf\62\0\1\u01d0\101\0\1\u01d1\76\0"+
    "\1\u01d2\67\0\1\u01d3\76\0\1\u0154\64\0\1\u01d4\41\0"+
    "\1\u01d4\12\0\1\163\3\0\4\163\1\u01d5\35\163\1\0"+
    "\20\163\2\0\1\163\1\0\1\163\3\0\14\163\1\u01d6"+
    "\25\163\1\0\20\163\2\0\1\163\24\0\1\u01d7\66\0"+
    "\1\u01d8\72\0\1\u01d9\77\0\1\u01da\72\0\1\u01db\56\0"+
    "\1\u01dc\75\0\1\u01dd\101\0\1\u01de\77\0\1\u01df\72\0"+
    "\1\u01e0\70\0\1\u01e1\65\0\1\u01e2\74\0\1\u01e3\66\0"+
    "\1\u01e4\41\0\1\u01e4\32\0\1\u01e5\71\0\1\u01e6\104\0"+
    "\1\u01e7\71\0\1\u01dd\64\0\1\u01e8\70\0\1\u01e9\62\0"+
    "\1\u01ea\101\0\1\u01eb\76\0\1\u01ec\67\0\1\u01ed\76\0"+
    "\1\u0170\64\0\1\u01ee\41\0\1\u01ee\35\0\1\u01ef\66\0"+
    "\1\u01f0\72\0\1\u01f1\75\0\1\u01f2\70\0\1\u01f3\74\0"+
    "\1\u01f4\101\0\1\u01f5\71\0\1\u01f6\61\0\1\u01f7\71\0"+
    "\1\u01f8\41\0\1\u01f8\35\0\1\u01f9\66\0\1\u01fa\72\0"+
    "\1\u01fb\75\0\1\u01fc\70\0\1\u01fd\74\0\1\u01fe\101\0"+
    "\1\u01ff\71\0\1\u0200\61\0\1\u0201\71\0\1\u0202\41\0"+
    "\1\u0202\25\0\1\u0203\76\0\1\u0204\77\0\1\u0205\66\0"+
    "\1\u0206\72\0\1\u0207\65\0\1\u0208\65\0\10\53\1\u0209"+
    "\20\53\2\0\2\53\1\0\1\53\2\0\2\53\3\0"+
    "\1\u020a\1\0\2\53\1\u0209\2\53\5\0\1\53\15\0"+
    "\1\u020b\103\0\1\u020c\66\0\1\u020d\72\0\1\u020e\75\0"+
    "\1\u020f\73\0\1\u0210\70\0\1\u0211\77\0\1\u0212\72\0"+
    "\1\u0213\63\0\1\u0214\76\0\1\u0215\62\0\1\u0216\75\0"+
    "\1\u0217\73\0\1\u0218\122\0\1\u0219\42\0\1\u021a\73\0"+
    "\1\u021b\112\0\1\u021c\17\0\1\u021c\30\0\1\u021d\11\0"+
    "\1\u021e\66\0\1\u0120\55\0\1\u021f\106\0\1\u01a6\75\0"+
    "\1\u0220\63\0\1\u0221\77\0\1\u0222\63\0\1\u01b7\41\0"+
    "\1\u01b7\30\0\1\u01b7\1\u0223\40\0\1\u01b7\30\0\1\u0224"+
    "\41\0\1\u0224\43\0\1\u0225\55\0\1\u0226\100\0\1\u0227"+
    "\75\0\1\u0228\74\0\1\u0229\65\0\1\u022a\67\0\1\u022b"+
    "\77\0\1\u022c\104\0\1\u022d\50\0\1\u022e\67\0\1\u022f"+
    "\45\0\1\u022f\24\0\1\u0230\45\0\1\u0230\33\0\1\u0231"+
    "\64\0\1\u0232\77\0\1\u0233\73\0\1\u0234\76\0\1\u0235"+
    "\73\0\1\u0236\75\0\1\u0237\61\0\1\u01c3\74\0\1\u0238"+
    "\70\0\1\u0239\77\0\1\u023a\62\0\1\u023b\105\0\1\u023c"+
    "\56\0\1\u023d\107\0\1\u023e\56\0\1\u023f\102\0\1\u0240"+
    "\72\0\1\u014b\62\0\1\u0241\67\0\1\u0242\45\0\1\u0242"+
    "\13\0\1\163\3\0\13\163\1\u0243\26\163\1\0\20\163"+
    "\2\0\1\163\1\0\1\163\3\0\24\163\1\u0244\15\163"+
    "\1\0\20\163\2\0\1\163\15\0\1\u0245\67\0\1\u0246"+
    "\45\0\1\u0246\24\0\1\u0247\45\0\1\u0247\33\0\1\u0248"+
    "\64\0\1\u0249\77\0\1\u024a\73\0\1\u024b\76\0\1\u024c"+
    "\73\0\1\u024d\75\0\1\u024e\61\0\1\u01dd\74\0\1\u024f"+
    "\70\0\1\u0250\77\0\1\u0251\62\0\1\u0252\105\0\1\u0253"+
    "\56\0\1\u0254\107\0\1\u0255\56\0\1\u0256\102\0\1\u0257"+
    "\72\0\1\u0167\62\0\1\u0258\67\0\1\u0259\45\0\1\u0259"+
    "\27\0\1\u025a\67\0\1\u025b\45\0\1\u025b\24\0\1\u025c"+
    "\45\0\1\u025c\33\0\1\u025d\71\0\1\u01f6\74\0\1\u025e"+
    "\100\0\1\u025f\67\0\1\u0260\57\0\1\u0261\45\0\1\u0261"+
    "\27\0\1\u0262\67\0\1\u0263\45\0\1\u0263\24\0\1\u0264"+
    "\45\0\1\u0264\33\0\1\u0265\71\0\1\u0200\74\0\1\u0266"+
    "\100\0\1\u0267\67\0\1\u0268\57\0\1\u0269\45\0\1\u0269"+
    "\43\0\1\u026a\62\0\1\u026b\66\0\1\u026c\72\0\1\u026d"+
    "\101\0\1\u026e\55\0\31\53\2\0\2\53\1\0\1\53"+
    "\2\0\2\53\3\0\1\u020a\1\0\5\53\5\0\1\53"+
    "\6\0\1\u026f\106\0\1\u0270\66\0\1\u0271\72\0\1\u0272"+
    "\72\0\1\u0273\71\0\1\u0213\72\0\1\u0274\104\0\1\u0213"+
    "\64\0\1\u0275\103\0\1\u012f\56\0\1\u0276\76\0\1\u0277"+
    "\76\0\1\u0278\72\0\1\u0279\70\0\1\u027a\74\0\1\u027b"+
    "\63\0\1\u027c\66\0\1\u027d\45\0\1\u027d\24\0\1\274"+
    "\45\0\1\274\27\0\1\u027e\107\0\1\u027f\65\0\1\263"+
    "\72\0\1\u0280\76\0\1\u0281\66\0\1\u0282\65\0\1\u01b7"+
    "\70\0\1\u0283\100\0\1\u0284\63\0\1\u0285\76\0\1\u0286"+
    "\65\0\1\u0287\77\0\1\u0288\72\0\1\u0289\77\0\1\u028a"+
    "\64\0\1\u028b\104\0\1\u028c\55\0\1\u028d\71\0\1\u028e"+
    "\103\0\1\u028f\76\0\1\u0290\66\0\1\u01c3\66\0\1\u0291"+
    "\77\0\1\u0292\101\0\1\u0293\56\0\1\u0294\111\0\1\u0295"+
    "\50\0\1\u0296\72\0\1\u028c\74\0\1\u0234\111\0\1\u0297"+
    "\56\0\1\u0298\70\0\1\u0156\73\0\1\u0299\71\0\1\u029a"+
    "\74\0\1\u014b\50\0\1\163\3\0\24\163\1\u029b\15\163"+
    "\1\0\20\163\2\0\1\163\1\0\1\163\3\0\16\163"+
    "\1\u029c\23\163\1\0\20\163\2\0\1\163\20\0\1\u029d"+
    "\104\0\1\u029e\55\0\1\u029f\71\0\1\u02a0\103\0\1\u02a1"+
    "\76\0\1\u02a2\66\0\1\u01dd\66\0\1\u02a3\77\0\1\u02a4"+
    "\101\0\1\u02a5\56\0\1\u02a6\111\0\1\u02a7\50\0\1\u02a8"+
    "\72\0\1\u029e\74\0\1\u024b\111\0\1\u02a9\56\0\1\u02aa"+
    "\70\0\1\u0172\73\0\1\u02ab\71\0\1\u02ac\74\0\1\u0167"+
    "\67\0\1\u02ad\104\0\1\u02ae\55\0\1\u02af\102\0\1\u01f6"+
    "\66\0\1\u02b0\71\0\1\u025d\74\0\1\u02b1\73\0\1\u02b2"+
    "\67\0\1\u02b3\104\0\1\u02b4\55\0\1\u02b5\102\0\1\u0200"+
    "\66\0\1\u02b6\71\0\1\u0265\74\0\1\u02b7\73\0\1\u02b8"+
    "\101\0\1\u02b9\71\0\1\u0203\63\0\1\u02ba\66\0\1\u02bb"+
    "\73\0\1\u02bc\41\0\1\u02bc\16\0\1\u02bd\116\0\1\u020b"+
    "\63\0\1\u02be\66\0\1\u02bf\74\0\1\u02c0\71\0\1\u0275"+
    "\41\0\1\u0275\25\0\1\u012f\103\0\1\u02c1\60\0\1\u02c2"+
    "\73\0\1\u02c3\77\0\1\u02c4\77\0\1\u02c5\67\0\1\u02c6"+
    "\60\0\1\u02c7\107\0\1\u012f\72\0\1\u02c8\56\0\1\u02c9"+
    "\45\0\1\u02c9\44\0\1\u02ca\66\0\1\u02cb\72\0\1\u02cc"+
    "\71\0\1\u02cd\65\0\1\u02ce\74\0\1\u02cf\75\0\1\u02d0"+
    "\76\0\1\u01b7\73\0\1\u02d1\63\0\1\u02d2\72\0\1\u023f"+
    "\75\0\1\u0234\72\0\1\u02d3\61\0\1\u02d4\101\0\1\u02d5"+
    "\100\0\1\u02d6\71\0\1\u02d7\61\0\1\u02d8\77\0\1\u02d9"+
    "\72\0\1\u02da\100\0\2\u02db\7\0\2\u02db\15\0\1\u02db"+
    "\35\0\1\u02dc\76\0\1\u02dd\60\0\1\u02de\74\0\1\u02df"+
    "\51\0\1\163\3\0\25\163\1\u02e0\14\163\1\0\20\163"+
    "\2\0\1\163\1\0\1\163\3\0\25\163\1\u02e1\14\163"+
    "\1\0\20\163\2\0\1\163\23\0\1\u0256\75\0\1\u024b"+
    "\72\0\1\u02e2\61\0\1\u02e3\101\0\1\u02e4\100\0\1\u02e5"+
    "\71\0\1\u02e6\61\0\1\u02e7\77\0\1\u02e8\72\0\1\u02e9"+
    "\100\0\2\u02ea\7\0\2\u02ea\15\0\1\u02ea\35\0\1\u02eb"+
    "\76\0\1\u02ec\60\0\1\u02ed\74\0\1\u02ee\73\0\1\u02ef"+
    "\75\0\1\u025d\72\0\1\u02f0\71\0\1\u02f1\65\0\1\u02f2"+
    "\66\0\1\u01f6\101\0\1\u02f3\75\0\1\u0265\72\0\1\u02f4"+
    "\71\0\1\u02f5\65\0\1\u02f6\66\0\1\u0200\103\0\1\u02f7"+
    "\65\0\1\u0203\100\0\1\u02f8\51\0\1\u02f9\3\0\1\u02f9"+
    "\1\0\4\u02f9\1\0\20\u02f9\3\0\1\u02f9\2\0\1\u02f9"+
    "\1\0\2\u02f9\4\0\6\u02f9\27\0\1\u020b\100\0\1\u02fa"+
    "\61\0\1\u0275\72\0\1\u021a\75\0\1\u021a\74\0\1\u0120"+
    "\101\0\1\u021a\53\0\1\u02fb\45\0\1\u02fb\25\0\1\u021a"+
    "\104\0\1\u02fc\70\0\1\u02fd\60\0\1\u02fe\106\0\1\u01b0"+
    "\72\0\1\u02ff\72\0\1\u0300\65\0\1\u0223\77\0\1\u0301"+
    "\72\0\1\u0302\61\0\1\u0303\77\0\1\u0304\114\0\1\u0305"+
    "\41\0\1\u0306\45\0\1\u0306\32\0\1\u0307\112\0\1\u0308"+
    "\57\0\1\u0309\70\0\1\u030a\74\0\1\u030b\66\0\1\u030c"+
    "\66\0\1\u0299\123\0\1\u030d\36\0\1\u030e\45\0\1\u030e"+
    "\31\0\1\u030f\41\0\1\u030f\36\0\1\u0310\103\0\1\u0311"+
    "\35\0\1\163\3\0\20\163\1\u0312\21\163\1\0\20\163"+
    "\2\0\1\163\1\0\1\163\3\0\12\163\1\u0313\27\163"+
    "\1\0\11\163\1\u0313\6\163\2\0\1\163\12\0\1\u0314"+
    "\45\0\1\u0314\32\0\1\u0315\112\0\1\u0316\57\0\1\u0317"+
    "\70\0\1\u0318\74\0\1\u0319\66\0\1\u031a\66\0\1\u02ab"+
    "\123\0\1\u031b\36\0\1\u031c\45\0\1\u031c\31\0\1\u031d"+
    "\41\0\1\u031d\36\0\1\u031e\103\0\1\u031f\55\0\1\u0182"+
    "\63\0\1\u0320\45\0\1\u0320\27\0\1\u02b1\102\0\1\u0321"+
    "\66\0\1\u018c\63\0\1\u0322\45\0\1\u0322\27\0\1\u02b7"+
    "\102\0\1\u0323\72\0\1\u0203\72\0\1\u020b\64\0\1\u02c2"+
    "\41\0\1\u02c2\43\0\1\u021e\55\0\1\u0324\72\0\1\u0325"+
    "\77\0\1\u0326\107\0\1\u0327\52\0\1\u0328\41\0\1\u0328"+
    "\27\0\1\u0329\74\0\1\u02cd\75\0\1\u032a\104\0\1\u0234"+
    "\47\0\1\u032b\45\0\1\u032b\26\0\1\u032c\3\0\1\u032d"+
    "\7\0\1\u032e\10\0\1\u032f\100\0\1\u0330\44\0\1\u0331"+
    "\64\0\1\u01c8\117\0\1\u0332\65\0\2\u0333\7\0\2\u0333"+
    "\15\0\1\u0333\31\0\1\u0334\117\0\1\u0335\47\0\1\u01c3"+
    "\60\0\1\u0336\45\0\1\u0336\13\0\1\163\3\0\42\163"+
    "\1\u0330\20\163\2\0\1\163\1\0\1\163\3\0\42\163"+
    "\1\u0335\20\163\2\0\1\163\35\0\1\u024b\47\0\1\u0337"+
    "\45\0\1\u0337\26\0\1\u0338\3\0\1\u0339\7\0\1\u033a"+
    "\10\0\1\u033b\100\0\1\u033c\44\0\1\u033d\64\0\1\u01e2"+
    "\117\0\1\u033e\65\0\2\u033f\7\0\2\u033f\15\0\1\u033f"+
    "\31\0\1\u0340\117\0\1\u0341\47\0\1\u01dd\60\0\1\u0342"+
    "\45\0\1\u0342\47\0\1\u025d\61\0\1\u01f6\103\0\1\u0265"+
    "\61\0\1\u0200\72\0\1\u021a\117\0\1\u013c\41\0\1\u0343"+
    "\64\0\1\u0344\45\0\1\u0344\26\0\1\u0345\106\0\1\u0346"+
    "\74\0\1\u01b0\63\0\1\u0347\72\0\1\u01c3\72\0\1\u0348"+
    "\63\0\1\u0349\72\0\1\u032c\116\0\1\u034a\56\0\1\u034b"+
    "\107\0\1\u034c\51\0\1\u034d\113\0\1\u034e\53\0\1\u034f"+
    "\73\0\1\u0350\72\0\1\u01dd\72\0\1\u0351\63\0\1\u0352"+
    "\72\0\1\u0338\116\0\1\u0353\56\0\1\u0354\107\0\1\u0355"+
    "\51\0\1\u0356\113\0\1\u0357\53\0\1\u0358\102\0\1\u0359"+
    "\65\0\1\u035a\70\0\1\u035b\63\0\1\u035c\72\0\1\u035d"+
    "\120\0\1\u035e\17\0\1\u035e\30\0\1\u035f\121\0\1\u0360"+
    "\50\0\1\u0361\107\0\1\u0362\17\0\1\u0362\50\0\1\u0363"+
    "\60\0\1\u0364\11\0\1\u0365\1\u01c3\10\0\2\u0365\34\0"+
    "\1\u0366\71\0\1\u0367\120\0\1\u0368\17\0\1\u0368\30\0"+
    "\1\u0369\121\0\1\u036a\50\0\1\u036b\107\0\1\u036c\17\0"+
    "\1\u036c\50\0\1\u036d\60\0\1\u036e\11\0\1\u036f\1\u01dd"+
    "\10\0\2\u036f\34\0\1\u0370\72\0\1\u0371\103\0\1\u0372"+
    "\70\0\1\u013c\72\0\1\u0373\63\0\1\u0374\102\0\1\u0375"+
    "\70\0\1\u0376\60\0\1\u0377\10\0\1\u0378\1\u0379\2\0"+
    "\1\u037a\65\0\1\u01c3\76\0\1\u037b\56\0\1\u037c\5\0"+
    "\1\u037d\3\0\1\u037e\2\0\1\u037f\32\0\1\u037d\23\0"+
    "\1\u0380\45\0\1\u0380\40\0\1\u0364\11\0\1\u0365\1\u01c3"+
    "\10\0\2\u0365\1\u034e\44\0\1\u01c3\61\0\1\u0381\102\0"+
    "\1\u0382\70\0\1\u0383\60\0\1\u0384\10\0\1\u0385\1\u0386"+
    "\2\0\1\u0387\65\0\1\u01dd\76\0\1\u0388\56\0\1\u0389"+
    "\5\0\1\u038a\3\0\1\u038b\2\0\1\u038c\32\0\1\u038a"+
    "\23\0\1\u038d\45\0\1\u038d\40\0\1\u036e\11\0\1\u036f"+
    "\1\u01dd\10\0\2\u036f\1\u0357\44\0\1\u01dd\65\0\1\u038e"+
    "\75\0\1\u038f\74\0\1\u013c\72\0\1\u0390\60\0\1\u0390"+
    "\120\0\1\u0391\17\0\1\u0391\35\0\1\u0392\70\0\1\u0393"+
    "\101\0\1\u0394\55\0\1\u0395\106\0\1\u0396\53\0\1\u014b"+
    "\2\0\1\u0397\42\0\1\u014b\42\0\1\u0398\70\0\1\u0399"+
    "\61\0\1\u039a\117\0\1\u039b\17\0\1\u039b\36\0\1\u039c"+
    "\60\0\1\u039c\120\0\1\u039d\17\0\1\u039d\35\0\1\u039e"+
    "\70\0\1\u039f\101\0\1\u03a0\55\0\1\u03a1\106\0\1\u03a2"+
    "\53\0\1\u0167\2\0\1\u03a3\42\0\1\u0167\42\0\1\u03a4"+
    "\70\0\1\u03a5\61\0\1\u03a6\117\0\1\u03a7\17\0\1\u03a7"+
    "\35\0\1\u03a8\61\0\1\u03a9\70\0\1\u03aa\45\0\1\u03aa"+
    "\37\0\1\u03ab\65\0\1\u03ac\66\0\1\u03ad\76\0\1\u03ae"+
    "\103\0\1\u03af\104\0\1\u03b0\42\0\1\u01c3\70\0\1\u01c3"+
    "\105\0\1\u03b1\66\0\1\u03b1\77\0\1\u0365\57\0\1\u03b2"+
    "\45\0\1\u03b2\37\0\1\u03b3\65\0\1\u03b4\66\0\1\u03b5"+
    "\76\0\1\u03b6\103\0\1\u03b7\104\0\1\u03b8\42\0\1\u01dd"+
    "\70\0\1\u01dd\105\0\1\u03b9\66\0\1\u03b9\77\0\1\u036f"+
    "\61\0\1\u0225\73\0\1\u03ba\112\0\1\u02de\51\0\1\u03bb"+
    "\73\0\1\u03bc\75\0\1\u03bd\64\0\1\u03be\45\0\1\u03be"+
    "\35\0\1\u03bf\72\0\1\u03c0\74\0\1\u03c1\102\0\1\u02ed"+
    "\51\0\1\u03c2\73\0\1\u03c3\75\0\1\u03c4\64\0\1\u03c5"+
    "\45\0\1\u03c5\35\0\1\u03c6\72\0\1\u03c7\74\0\1\u03c8"+
    "\56\0\1\u02ca\73\0\1\u03c9\45\0\1\u03c9\36\0\1\u03ca"+
    "\73\0\1\u03cb\70\0\1\u03cc\77\0\1\u01c8\63\0\1\u03cd"+
    "\70\0\1\u01c8\41\0\1\u01c8\23\0\1\u03ce\45\0\1\u03ce"+
    "\36\0\1\u03cf\73\0\1\u03d0\70\0\1\u03d1\77\0\1\u01e2"+
    "\63\0\1\u03d2\70\0\1\u01e2\41\0\1\u01e2\46\0\1\u03d3"+
    "\52\0\1\u03d4\71\0\1\u01c8\72\0\1\u03d5\102\0\1\u03d6"+
    "\103\0\1\u03d7\52\0\1\u03d8\71\0\1\u01e2\72\0\1\u03d9"+
    "\102\0\1\u03da\73\0\1\u03db\65\0\1\u03dc\71\0\1\u01c3"+
    "\41\0\1\u01c3\52\0\1\u01c3\56\0\1\u03dd\65\0\1\u03de"+
    "\71\0\1\u01dd\41\0\1\u01dd\52\0\1\u01dd\55\0\1\u03df"+
    "\63\0\1\u01c3\101\0\1\u03e0\63\0\1\u01dd\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[55637];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\32\0\2\11\11\1\4\11\3\1\3\11\2\1\3\11"+
    "\1\1\1\11\4\1\1\11\1\1\1\11\6\1\1\11"+
    "\14\1\3\11\17\1\1\11\14\1\1\11\1\1\1\11"+
    "\23\1\1\11\1\1\1\11\1\1\2\11\5\1\1\11"+
    "\12\1\7\0\1\1\53\0\1\1\25\0\3\1\24\0"+
    "\1\1\31\0\1\1\30\0\1\11\24\0\1\11\32\0"+
    "\2\1\56\0\1\11\6\0\1\1\13\0\1\1\6\0"+
    "\1\1\12\0\1\1\2\0\1\11\13\0\1\11\21\0"+
    "\2\1\6\0\1\11\30\0\1\11\11\0\1\11\2\0"+
    "\1\11\5\0\1\1\1\0\1\11\16\0\1\11\50\0"+
    "\2\1\60\0\1\11\45\0\2\1\37\0\1\11\36\0"+
    "\1\1\4\0\2\1\10\0\1\1\14\0\1\11\1\0"+
    "\1\1\13\0\1\1\14\0\2\1\24\0\1\1\12\0"+
    "\1\1\13\0\1\1\237\0\2\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[992];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 55: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 56: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 57: break;
          case 4: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 58: break;
          case 5: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 59: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 60: break;
          case 7: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 61: break;
          case 8: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 62: break;
          case 9: 
            { return CndTypes.EQUAL;
            }
          case 63: break;
          case 10: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 64: break;
          case 11: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 65: break;
          case 12: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 66: break;
          case 13: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 67: break;
          case 14: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 68: break;
          case 15: 
            { return CndTypes.COLON;
            }
          case 69: break;
          case 16: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 70: break;
          case 17: 
            { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
            }
          case 71: break;
          case 18: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
            }
          case 72: break;
          case 19: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 73: break;
          case 20: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 74: break;
          case 21: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 75: break;
          case 22: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 76: break;
          case 23: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 77: break;
          case 24: 
            { return CndTypes.COMMA;
            }
          case 78: break;
          case 25: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 79: break;
          case 26: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 80: break;
          case 27: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 81: break;
          case 28: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 82: break;
          case 29: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 83: break;
          case 30: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 84: break;
          case 31: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 85: break;
          case 32: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 86: break;
          case 33: 
            { return CndTypes.NODE_NAME;
            }
          case 87: break;
          case 34: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 88: break;
          case 35: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 89: break;
          case 36: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 90: break;
          case 37: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 91: break;
          case 38: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 92: break;
          case 39: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 93: break;
          case 40: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 94: break;
          case 41: 
            { return CndTypes.COMMENT;
            }
          case 95: break;
          case 42: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 96: break;
          case 43: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 97: break;
          case 44: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 98: break;
          case 45: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 99: break;
          case 46: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 100: break;
          case 47: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 101: break;
          case 48: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 102: break;
          case 49: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 103: break;
          case 50: 
            { return CndTypes.OPTION;
            }
          case 104: break;
          case 51: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 105: break;
          case 52: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            }
          case 106: break;
          case 53: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            }
          case 107: break;
          case 54: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 108: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
