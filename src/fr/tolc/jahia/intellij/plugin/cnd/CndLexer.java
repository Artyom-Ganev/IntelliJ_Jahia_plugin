/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NAMESPACE_URI = 4;
  public static final int NODETYPE_NAMESPACE = 6;
  public static final int NODETYPE = 8;
  public static final int NODETYPE_DONE = 10;
  public static final int SUPER_TYPE_NAMESPACE = 12;
  public static final int SUPER_TYPE_NAME = 14;
  public static final int AFTER_SUPER_TYPE_NAME = 16;
  public static final int OPTIONS = 18;
  public static final int EXTENDS = 20;
  public static final int EXTEND_NAMESPACE = 22;
  public static final int EXTEND = 24;
  public static final int ITEMTYPE = 26;
  public static final int PROPERTY = 28;
  public static final int PROPERTY_TYPE = 30;
  public static final int PROPERTY_MASK_OPTION_NAME = 32;
  public static final int PROPERTY_MASK = 34;
  public static final int PROPERTY_MASK_OPTION = 36;
  public static final int PROPERTY_DEFAULT = 38;
  public static final int PROPERTY_DEFAULT_VALUE = 40;
  public static final int PROPERTY_ATTRIBUTES = 42;
  public static final int PROPERTY_CONSTRAINT = 44;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 46;
  public static final int NODE = 48;
  public static final int NODE_NAMESPACE = 50;
  public static final int NODE_NODETYPE = 52;
  public static final int NODE_DEFAULT = 54;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 56;
  public static final int NODE_DEFAULT_VALUE = 58;
  public static final int NODE_ATTRIBUTES = 60;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14800 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11\1\12\2\13\1\14\1\15\3\0\1\16"+
    "\1\17\1\20\1\21\2\13\1\22\3\13\1\22\71\13\1\23\1\13\1\24\1\25\1\26\1\27\2"+
    "\25\16\0\1\30\1\16\1\31\1\32\2\13\1\33\11\13\1\34\21\13\1\35\1\36\23\13\1"+
    "\25\1\12\3\13\1\22\1\37\1\12\4\13\1\40\1\41\4\0\1\42\1\43\1\25\3\13\2\44\1"+
    "\25\1\45\1\46\1\0\1\47\5\13\1\50\3\0\1\51\1\52\13\13\1\53\1\42\1\54\1\55\1"+
    "\0\1\56\1\25\1\57\1\60\3\13\3\0\1\61\12\13\1\62\1\0\1\63\1\25\1\0\1\64\3\13"+
    "\1\50\1\65\1\21\2\13\1\62\1\66\1\67\1\70\2\25\3\13\1\71\10\25\1\72\1\26\6"+
    "\25\1\73\2\0\1\74\1\75\6\13\1\76\2\0\1\77\1\13\1\100\1\0\2\12\1\101\1\102"+
    "\1\103\2\13\1\72\1\104\1\105\1\106\1\107\1\57\1\110\1\100\1\0\1\111\1\46\1"+
    "\101\1\112\1\103\2\13\1\72\1\113\1\114\1\115\1\116\1\117\1\120\1\121\1\0\1"+
    "\122\1\25\1\101\1\34\1\33\2\13\1\72\1\123\1\105\1\42\1\124\1\125\1\25\1\100"+
    "\1\0\1\37\1\25\1\101\1\102\1\103\2\13\1\72\1\123\1\105\1\106\1\116\1\121\1"+
    "\110\1\100\1\0\1\37\1\25\1\126\1\127\1\130\1\131\1\132\1\127\1\13\1\133\1"+
    "\134\1\135\1\136\1\25\1\121\1\0\1\25\1\37\1\101\1\30\1\72\2\13\1\72\1\137"+
    "\1\140\1\141\1\135\1\142\1\24\1\100\1\0\2\25\1\143\1\30\1\72\2\13\1\72\1\137"+
    "\1\105\1\141\1\135\1\142\1\31\1\100\1\0\1\144\1\25\1\143\1\30\1\72\4\13\1"+
    "\145\1\141\1\146\1\57\1\25\1\100\1\0\1\25\1\36\1\143\1\13\1\22\1\36\2\13\1"+
    "\33\1\147\1\22\1\150\1\151\1\0\2\25\1\152\1\25\1\12\5\13\1\153\1\154\1\155"+
    "\1\74\1\0\1\156\4\25\1\157\1\160\1\161\1\12\1\162\1\163\1\153\1\164\1\165"+
    "\1\166\1\0\1\167\4\25\1\125\2\25\1\156\1\0\1\156\1\170\1\171\1\13\1\12\3\13"+
    "\1\26\1\41\1\0\1\141\1\172\1\0\1\41\3\0\1\45\1\173\7\25\5\13\1\50\1\0\1\174"+
    "\1\0\1\156\1\62\1\175\1\176\1\177\1\200\1\13\1\201\1\202\1\0\1\166\4\13\1"+
    "\34\1\20\5\13\1\203\51\13\1\130\1\22\1\130\5\13\1\130\4\13\1\130\1\22\1\130"+
    "\1\13\1\22\7\13\1\130\10\13\1\204\4\25\2\13\2\25\12\13\1\26\1\25\1\12\114"+
    "\13\1\102\2\13\1\12\2\13\1\44\11\13\1\127\1\125\1\25\1\13\1\30\1\205\1\25"+
    "\2\13\1\205\1\25\2\13\1\206\1\25\1\13\1\30\1\207\1\25\6\13\1\210\3\0\1\211"+
    "\1\212\1\0\1\156\3\25\1\213\1\0\1\156\13\13\1\25\5\13\1\214\10\13\1\215\1"+
    "\25\3\13\1\26\1\0\1\2\1\0\1\2\1\121\1\0\3\13\1\215\1\26\1\25\5\13\1\111\2"+
    "\0\1\52\1\156\1\0\1\156\4\25\2\13\1\155\1\2\6\13\1\172\1\74\3\0\1\106\1\0"+
    "\1\156\1\0\1\156\1\40\13\25\1\216\5\13\1\210\1\0\1\216\1\111\1\0\1\156\1\25"+
    "\1\217\1\2\1\25\1\220\3\13\1\77\1\177\1\0\1\64\4\13\1\62\1\0\1\2\1\25\4\13"+
    "\1\210\2\0\1\25\1\0\1\221\1\0\1\64\3\13\1\215\12\25\1\222\2\0\1\223\1\224"+
    "\1\25\30\13\4\0\1\74\2\25\1\73\42\13\2\215\4\13\2\215\1\13\1\225\3\13\1\215"+
    "\6\13\1\30\1\165\1\226\1\26\1\227\1\111\1\13\1\26\1\226\1\26\1\25\1\217\3"+
    "\25\1\230\1\25\1\40\1\125\1\25\1\231\1\25\1\45\1\232\1\37\1\40\2\25\1\13\1"+
    "\26\3\13\1\44\2\25\1\0\1\45\1\233\1\0\1\234\1\25\1\235\1\36\1\147\1\236\1"+
    "\27\1\237\1\13\1\240\1\241\1\242\2\25\5\13\1\125\116\25\5\13\1\22\5\13\1\22"+
    "\20\13\1\26\1\243\1\244\1\25\4\13\1\34\1\20\7\13\1\40\1\25\1\57\2\13\1\22"+
    "\1\25\10\22\4\0\5\25\1\40\72\25\1\241\3\25\1\12\1\201\1\236\1\26\1\12\11\13"+
    "\1\22\1\245\1\12\12\13\1\203\1\241\4\13\1\215\1\12\12\13\1\22\2\25\3\13\1"+
    "\44\6\25\170\13\1\215\11\25\71\13\1\26\6\25\21\13\1\26\10\25\5\13\1\215\41"+
    "\13\1\26\2\13\1\0\1\244\2\25\5\13\1\155\1\73\1\246\3\13\1\57\12\13\1\156\3"+
    "\25\1\40\1\13\1\36\14\13\1\247\1\111\1\25\1\13\1\44\11\25\1\13\1\250\1\251"+
    "\2\13\1\50\2\25\1\125\6\13\1\111\1\25\1\64\5\13\1\210\1\0\1\45\1\25\1\0\1"+
    "\156\2\0\1\64\1\46\1\0\1\64\2\13\1\62\1\166\2\13\1\155\1\0\1\2\1\25\3\13\1"+
    "\26\1\75\5\13\1\50\1\0\1\234\1\40\1\0\1\156\4\25\5\13\1\77\1\74\1\25\1\251"+
    "\1\252\1\0\1\156\2\13\1\22\1\253\6\13\1\176\1\254\1\214\2\25\1\255\1\13\1"+
    "\50\1\256\1\25\3\257\1\25\2\22\22\25\4\13\1\50\1\260\1\0\1\156\64\13\1\111"+
    "\1\25\2\13\1\22\1\261\5\13\1\111\40\25\55\13\1\215\15\13\1\24\4\25\1\22\1"+
    "\25\1\261\1\262\1\13\1\72\1\22\1\165\1\263\15\13\1\24\3\25\1\261\54\13\1\215"+
    "\2\25\10\13\1\36\6\13\5\25\1\13\1\26\2\0\2\25\1\74\1\25\1\132\2\25\1\241\3"+
    "\25\1\37\1\30\20\13\1\264\1\231\1\25\1\0\1\156\1\12\2\13\1\112\1\12\2\13\1"+
    "\44\1\265\12\13\1\22\3\36\1\266\1\267\2\25\1\270\1\13\1\137\2\13\1\22\2\13"+
    "\1\271\1\13\1\215\1\13\1\215\4\25\17\13\1\44\10\25\6\13\1\26\20\25\1\272\20"+
    "\25\3\13\1\26\6\13\1\125\5\25\3\13\1\22\2\25\3\13\1\44\6\25\3\13\1\215\4\13"+
    "\1\111\1\13\1\236\5\25\23\13\1\215\1\0\1\156\52\25\1\215\1\72\4\13\1\34\1"+
    "\273\2\13\1\215\25\25\2\13\1\215\1\25\3\13\1\24\10\25\7\13\1\265\10\25\1\274"+
    "\1\73\1\137\1\12\2\13\1\111\1\115\4\25\3\13\1\26\20\25\6\13\1\215\1\25\2\13"+
    "\1\215\1\25\2\13\1\44\21\25\11\13\1\125\66\25\1\220\6\13\1\0\1\74\3\25\1\121"+
    "\1\0\2\25\1\220\5\13\1\0\1\275\2\25\3\13\1\125\1\0\1\156\1\220\3\13\1\155"+
    "\1\0\1\141\1\0\10\25\1\220\5\13\1\50\1\0\1\276\1\25\1\0\1\156\24\25\5\13\1"+
    "\50\1\0\1\25\1\0\1\156\46\25\55\13\1\22\22\25\14\13\1\44\63\25\5\13\1\22\72"+
    "\25\7\13\1\125\130\25\10\13\1\26\1\25\1\77\4\0\1\74\1\25\1\57\1\220\1\13\14"+
    "\25\1\24\153\25\1\277\1\300\2\0\1\301\1\2\3\25\1\302\22\25\1\303\67\25\12"+
    "\13\1\30\10\13\1\30\1\304\1\305\1\13\1\306\1\137\7\13\1\34\1\307\2\30\3\13"+
    "\1\310\1\165\1\36\1\72\51\13\1\215\3\13\1\72\2\13\1\203\3\13\1\203\2\13\1"+
    "\30\3\13\1\30\2\13\1\22\3\13\1\22\3\13\1\72\3\13\1\72\2\13\1\203\1\311\6\0"+
    "\1\137\3\13\1\157\1\12\1\203\1\312\1\235\1\313\1\157\1\225\1\157\2\203\1\120"+
    "\1\13\1\33\1\13\1\111\1\314\1\33\1\13\1\111\50\25\32\13\1\22\5\25\106\13\1"+
    "\26\1\25\33\13\1\215\74\25\1\117\3\25\14\0\20\25\36\0\2\25");

  /* The ZZ_CMAP_A table has 1640 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\31\1\3\1\2\6\7\4\0\1\11\3\0\1\6\2\0\1\16\1\26\1\27\1\5\1\30"+
    "\1\23\1\24\1\25\1\4\12\13\1\21\1\10\1\15\1\14\1\17\2\10\22\12\1\20\1\0\1\22"+
    "\1\0\1\6\1\0\22\6\4\0\6\7\1\32\2\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6"+
    "\5\0\7\6\1\0\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6"+
    "\1\0\3\6\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\1\6\15\0\1\6"+
    "\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0"+
    "\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6"+
    "\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7"+
    "\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2"+
    "\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4"+
    "\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0"+
    "\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1"+
    "\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2"+
    "\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1"+
    "\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0"+
    "\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0"+
    "\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\31\5\7\5\0\1\6"+
    "\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4"+
    "\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3"+
    "\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0"+
    "\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1"+
    "\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6"+
    "\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6"+
    "\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1"+
    "\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\37\0\1\1\2\2\1\3\1\1\1\4\1\5\1\6"+
    "\1\7\1\10\1\1\1\11\1\12\1\13\2\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\2\26\1\27\1\30\1\31\1\32\1\33\1\34\3\35"+
    "\2\36\1\37\1\40\1\41\1\42\3\43\1\44\1\45"+
    "\3\46\1\1\1\47\1\50\1\51\2\2\1\51\1\3"+
    "\1\52\1\53\4\54\1\55\2\2\1\55\2\1\1\0"+
    "\1\1\2\56\1\57\1\60\1\61\1\62\1\63\2\2"+
    "\1\63\1\3\1\64\1\65\1\66\1\67\2\2\1\67"+
    "\1\70\1\0\1\14\1\35\1\43\1\46\2\0\1\71"+
    "\1\0\1\71\1\0\1\72\1\3\1\52\1\54\2\0"+
    "\1\73\1\0\1\73\1\0\1\3\1\0\1\70\2\0"+
    "\1\74\1\0\1\74\1\0\1\3\1\64\2\0\1\73"+
    "\1\0\1\3\1\0\1\46\1\51\1\0\1\51\1\0"+
    "\2\71\1\52\1\72\1\51\1\3\1\52\1\54\1\55"+
    "\1\0\1\55\1\0\2\73\1\72\1\55\1\3\3\75"+
    "\1\63\1\0\1\63\1\0\2\74\1\64\1\63\1\3"+
    "\1\64\1\67\1\0\1\67\1\73\1\67\1\3\1\70"+
    "\3\0\1\71\1\0\2\52\3\0\1\73\6\0\1\74"+
    "\1\0\2\64\3\0\3\51\2\0\1\71\1\52\3\55"+
    "\2\0\1\73\1\0\3\63\2\0\1\74\1\64\3\67"+
    "\1\73\3\71\3\73\3\0\3\74\1\0\1\75\2\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\33\0\66\0\121\0\154\0\207\0\242\0\275"+
    "\0\330\0\363\0\u010e\0\u0129\0\u0144\0\u015f\0\u017a\0\u0195"+
    "\0\u01b0\0\u01cb\0\u01e6\0\u0201\0\u021c\0\u0237\0\u0252\0\u026d"+
    "\0\u0288\0\u02a3\0\u02be\0\u02d9\0\u02f4\0\u030f\0\u032a\0\u0345"+
    "\0\u0345\0\u0360\0\u037b\0\u0396\0\u03b1\0\u0345\0\u0345\0\u0345"+
    "\0\u0345\0\u03cc\0\u03e7\0\u0345\0\u0345\0\u0402\0\u041d\0\u0345"+
    "\0\u0345\0\u0438\0\u0453\0\u0345\0\u0345\0\u046e\0\u0345\0\u0345"+
    "\0\u0345\0\u0489\0\u04a4\0\u0345\0\u04bf\0\u0345\0\u04da\0\u0345"+
    "\0\u04f5\0\u0510\0\u052b\0\u0345\0\u0546\0\u0345\0\u0561\0\u0345"+
    "\0\u0345\0\u057c\0\u0597\0\u05b2\0\u05cd\0\u0345\0\u05e8\0\u0603"+
    "\0\u061e\0\u0639\0\u0345\0\u0345\0\u0654\0\u066f\0\u068a\0\u06a5"+
    "\0\u06c0\0\u0345\0\u0345\0\u06db\0\u06f6\0\u0711\0\u072c\0\u0747"+
    "\0\u0762\0\u077d\0\u0798\0\u07b3\0\u07ce\0\u07b3\0\u07e9\0\u0345"+
    "\0\u0804\0\u0345\0\u081f\0\u0345\0\u0345\0\u083a\0\u0855\0\u0870"+
    "\0\u088b\0\u08a6\0\u0345\0\u08c1\0\u08dc\0\u08f7\0\u0912\0\u092d"+
    "\0\u0948\0\u0963\0\u097e\0\u0999\0\u09b4\0\u09cf\0\u09ea\0\u0a05"+
    "\0\u0a20\0\u0a3b\0\u066f\0\u0a56\0\u0a71\0\u0345\0\u0a8c\0\u0a20"+
    "\0\u0aa7\0\u0ac2\0\u0add\0\u0af8\0\u0762\0\u0b13\0\u0b2e\0\u0b49"+
    "\0\u0b64\0\u0b7f\0\u0b9a\0\u0bb5\0\u0bd0\0\u0855\0\u0beb\0\u0c06"+
    "\0\u0c21\0\u0bb5\0\u0c3c\0\u0912\0\u0c57\0\u0c72\0\u0c8d\0\u0ca8"+
    "\0\u0345\0\u0a20\0\u0cc3\0\u0cde\0\u0cf9\0\u0cf9\0\u0d14\0\u0cf9"+
    "\0\u0cf9\0\u0a8c\0\u0d2f\0\u0cde\0\u0ac2\0\u0add\0\u0d4a\0\u0d65"+
    "\0\u0d80\0\u0d80\0\u0d9b\0\u0d80\0\u0b49\0\u0db6\0\u0b64\0\u0b7f"+
    "\0\u0dd1\0\u0bb5\0\u0dec\0\u0e07\0\u0e22\0\u0e22\0\u0e3d\0\u0e22"+
    "\0\u0c21\0\u0e58\0\u0e07\0\u0c3c\0\u0e73\0\u0e8e\0\u0ea9\0\u0c8d"+
    "\0\u0ec4\0\u0345\0\u0edf\0\u0efa\0\u0f15\0\u0f30\0\u0f4b\0\u0f30"+
    "\0\u0edf\0\u0f66\0\u0f81\0\u0f9c\0\u0fb7\0\u0fd2\0\u0dd1\0\u0fed"+
    "\0\u1008\0\u1023\0\u103e\0\u1059\0\u1074\0\u1059\0\u1008\0\u108f"+
    "\0\u10aa\0\u10c5\0\u10e0\0\u0edf\0\u0efa\0\u10fb\0\u1116\0\u1131"+
    "\0\u10fb\0\u114c\0\u0f66\0\u0f81\0\u1167\0\u1182\0\u119d\0\u11b8"+
    "\0\u11d3\0\u1008\0\u1023\0\u11ee\0\u1209\0\u1224\0\u11ee\0\u123f"+
    "\0\u108f\0\u10aa\0\u125a\0\u1275\0\u10fb\0\u1116\0\u1290\0\u1167"+
    "\0\u1182\0\u0fb7\0\u12ab\0\u12c6\0\u12e1\0\u11ee\0\u1209\0\u12fc"+
    "\0\u1317\0\u1317\0\u1332";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\40\1\41\1\42\1\43\1\44\1\40\1\45\2\40"+
    "\1\43\1\45\2\40\1\46\2\40\1\47\3\40\1\50"+
    "\3\40\1\51\2\0\1\40\1\41\1\42\1\43\1\52"+
    "\1\40\1\53\2\40\1\43\1\53\1\40\1\54\1\40"+
    "\1\55\12\40\2\0\4\56\1\57\11\56\1\60\1\61"+
    "\13\56\1\40\1\41\1\42\1\43\1\52\1\40\1\62"+
    "\2\40\1\43\1\62\16\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\63\2\40\1\43\1\63\6\40"+
    "\1\64\1\65\6\40\2\0\1\40\1\41\1\42\1\43"+
    "\1\52\1\40\1\66\2\40\1\43\1\66\4\40\1\67"+
    "\11\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\53\2\40\1\43\1\53\6\40\1\70\7\40\2\0"+
    "\1\40\1\71\1\72\1\43\1\52\1\40\1\73\2\40"+
    "\1\43\1\73\16\40\2\0\1\40\1\41\1\42\1\43"+
    "\1\52\1\40\1\66\2\40\1\43\1\66\10\40\1\74"+
    "\5\40\2\0\1\40\1\41\1\42\1\43\1\52\1\40"+
    "\1\75\2\40\1\43\1\75\16\40\2\0\1\40\1\41"+
    "\1\42\1\43\1\52\4\40\1\43\2\40\1\76\14\40"+
    "\2\0\1\40\1\41\1\42\1\43\1\52\1\40\1\77"+
    "\2\40\1\43\1\77\16\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\63\2\40\1\43\1\63\6\40"+
    "\1\64\1\40\1\100\5\40\2\0\1\101\1\41\1\42"+
    "\1\102\1\103\4\101\1\43\2\101\1\54\16\101\1\40"+
    "\1\41\1\42\1\43\1\52\1\104\1\105\2\40\1\43"+
    "\1\105\13\40\1\106\2\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\107\2\40\1\43\1\107\10\40"+
    "\1\110\3\40\1\111\1\40\2\0\1\112\1\41\1\42"+
    "\1\113\1\114\4\112\1\43\2\112\1\40\1\112\1\40"+
    "\3\112\2\40\3\112\1\40\3\112\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\115\2\40\1\43\1\115\5\40"+
    "\1\116\6\40\1\111\1\40\2\0\1\117\1\41\1\42"+
    "\1\120\1\121\4\117\1\43\2\117\1\54\1\117\1\122"+
    "\3\117\1\123\1\124\3\117\1\111\3\117\1\125\1\126"+
    "\1\127\1\130\1\52\3\125\1\40\1\131\2\40\1\132"+
    "\1\133\1\125\3\40\1\125\3\40\2\125\1\40\2\125"+
    "\1\134\1\41\1\42\1\135\1\136\4\134\1\43\4\134"+
    "\1\137\14\134\1\140\1\141\1\142\1\143\1\52\3\140"+
    "\1\40\1\43\3\40\1\133\1\140\3\40\1\140\3\40"+
    "\2\140\1\40\2\140\1\144\1\41\1\42\1\43\1\145"+
    "\4\144\1\43\17\144\2\146\1\40\1\41\1\42\1\43"+
    "\1\52\4\40\1\43\4\40\1\147\12\40\2\0\1\40"+
    "\1\41\1\42\1\43\1\52\1\150\1\151\2\40\1\43"+
    "\1\151\13\40\1\152\2\40\2\0\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\153\2\40\1\43\1\153\16\40"+
    "\2\0\1\40\1\41\1\42\1\43\1\52\1\40\1\63"+
    "\2\40\1\43\1\63\6\40\1\64\1\40\1\154\3\40"+
    "\1\155\1\40\2\0\1\156\1\157\1\160\1\161\1\52"+
    "\3\156\1\40\1\162\2\40\1\163\1\40\1\156\3\40"+
    "\1\156\3\40\2\156\1\40\2\156\1\40\1\41\1\42"+
    "\1\43\1\52\1\40\1\164\2\40\1\43\1\164\16\40"+
    "\2\0\1\40\1\41\1\42\1\43\1\52\1\40\1\165"+
    "\2\40\1\43\1\165\6\40\1\64\7\40\2\0\1\166"+
    "\1\167\1\170\1\171\1\52\3\166\1\40\1\43\4\40"+
    "\1\166\3\40\1\166\3\40\2\166\1\40\2\166\34\0"+
    "\1\41\34\0\1\43\5\0\1\43\25\0\1\172\1\173"+
    "\33\0\1\45\3\0\1\45\24\0\1\172\34\0\2\53"+
    "\2\0\2\53\16\0\1\53\16\56\2\0\17\56\1\174"+
    "\11\56\2\0\13\56\6\0\2\62\2\0\2\62\16\0"+
    "\1\62\6\0\2\63\2\0\2\63\16\0\1\63\6\0"+
    "\1\66\3\0\1\66\21\0\1\71\37\0\2\73\2\0"+
    "\2\73\16\0\1\73\6\0\1\75\3\0\1\75\26\0"+
    "\2\77\2\0\2\77\16\0\1\77\1\101\2\0\6\101"+
    "\1\0\2\101\1\0\17\101\2\0\1\102\5\101\1\43"+
    "\2\101\1\0\17\101\2\0\1\101\1\175\4\101\1\0"+
    "\2\101\1\0\16\101\6\0\2\105\2\0\2\105\5\0"+
    "\1\105\3\0\1\105\4\0\1\105\6\0\1\107\3\0"+
    "\1\107\20\0\1\112\2\0\6\112\1\0\2\112\1\0"+
    "\1\112\1\0\3\112\2\0\3\112\1\0\4\112\2\0"+
    "\1\113\5\112\1\43\2\112\1\0\1\112\1\0\3\112"+
    "\2\0\3\112\1\0\4\112\2\0\1\112\1\176\4\112"+
    "\1\0\2\112\1\0\1\112\1\0\3\112\2\0\3\112"+
    "\1\0\3\112\6\0\1\115\3\0\1\115\20\0\1\117"+
    "\2\0\6\117\1\0\2\117\1\0\1\117\1\0\3\117"+
    "\2\0\3\117\1\0\4\117\2\0\1\120\5\117\1\43"+
    "\2\117\1\0\1\117\1\0\3\117\2\0\3\117\1\0"+
    "\4\117\2\0\1\117\1\177\4\117\1\0\2\117\1\0"+
    "\1\117\1\0\3\117\2\0\3\117\1\0\3\117\1\200"+
    "\2\0\13\200\1\0\3\200\1\0\10\200\1\201\2\0"+
    "\6\201\1\0\21\201\1\202\2\203\1\204\1\0\3\202"+
    "\1\0\1\205\2\0\1\132\1\206\1\202\3\0\1\202"+
    "\3\0\2\202\1\0\3\202\1\126\1\203\1\204\1\0"+
    "\3\202\1\0\1\205\2\0\1\132\1\206\1\202\3\0"+
    "\1\202\3\0\2\202\1\0\2\202\1\201\2\0\1\207"+
    "\5\201\1\131\2\201\1\210\16\201\3\0\1\131\5\0"+
    "\1\131\2\0\1\132\16\0\1\134\2\0\6\134\1\0"+
    "\22\134\2\0\1\135\5\134\1\43\22\134\2\0\1\134"+
    "\1\211\4\134\1\0\21\134\1\137\2\0\6\137\1\212"+
    "\21\137\1\213\2\0\6\213\1\0\21\213\1\214\2\215"+
    "\1\216\1\0\3\214\1\0\1\217\3\0\1\206\1\214"+
    "\3\0\1\214\3\0\2\214\1\0\3\214\1\141\1\215"+
    "\1\216\1\0\3\214\1\0\1\217\3\0\1\206\1\214"+
    "\3\0\1\214\3\0\2\214\1\0\2\214\1\213\2\0"+
    "\1\220\5\213\1\43\21\213\1\221\2\0\31\221\2\0"+
    "\1\221\1\222\26\221\1\223\2\0\30\223\6\0\2\151"+
    "\2\0\2\151\5\0\1\151\10\0\1\151\6\0\2\153"+
    "\2\0\2\153\16\0\1\153\1\224\2\0\6\224\1\0"+
    "\21\224\1\225\2\226\1\227\1\0\3\225\1\0\1\230"+
    "\2\0\1\163\1\0\1\225\3\0\1\225\3\0\2\225"+
    "\1\0\3\225\1\157\1\226\1\227\1\0\3\225\1\0"+
    "\1\230\2\0\1\163\1\0\1\225\3\0\1\225\3\0"+
    "\2\225\1\0\2\225\1\224\2\0\1\231\5\224\1\162"+
    "\2\224\1\232\16\224\3\0\1\162\5\0\1\162\2\0"+
    "\1\163\24\0\2\164\2\0\2\164\16\0\1\164\6\0"+
    "\2\165\2\0\2\165\16\0\1\165\1\233\2\0\6\233"+
    "\1\0\21\233\1\214\2\234\1\235\1\0\3\214\1\0"+
    "\1\236\4\0\1\214\3\0\1\214\3\0\2\214\1\0"+
    "\3\214\1\167\1\234\1\235\1\0\3\214\1\0\1\236"+
    "\4\0\1\214\3\0\1\214\3\0\2\214\1\0\2\214"+
    "\1\233\2\0\1\237\5\233\1\43\21\233\1\172\2\0"+
    "\30\172\5\173\1\240\25\173\1\174\2\56\13\174\2\172"+
    "\13\174\1\175\2\0\6\175\1\172\2\175\1\172\16\175"+
    "\1\176\2\0\6\176\1\172\2\176\1\172\1\176\1\172"+
    "\3\176\2\172\3\176\1\172\3\176\1\177\2\0\6\177"+
    "\1\172\2\177\1\172\1\177\1\172\3\177\2\172\3\177"+
    "\1\172\3\177\1\200\2\0\13\200\1\241\3\200\1\0"+
    "\10\200\1\242\2\0\6\242\1\243\2\242\1\244\16\242"+
    "\1\245\2\0\6\245\1\0\21\245\1\246\2\0\1\247"+
    "\1\245\3\246\1\245\1\205\2\245\1\250\1\251\1\246"+
    "\3\245\1\246\3\245\2\246\1\245\2\246\1\202\2\0"+
    "\1\204\1\0\3\202\1\0\1\205\2\0\1\132\1\206"+
    "\1\202\3\0\1\202\3\0\2\202\1\0\2\202\1\242"+
    "\2\0\1\252\5\242\1\253\2\242\1\254\16\242\1\211"+
    "\2\0\6\211\1\172\21\211\1\212\2\0\13\212\1\255"+
    "\14\212\1\256\2\0\6\256\1\257\2\256\1\260\16\256"+
    "\1\261\2\0\6\261\1\0\21\261\1\262\2\0\1\263"+
    "\1\261\3\262\1\261\1\217\3\261\1\264\1\262\3\261"+
    "\1\262\3\261\2\262\1\261\2\262\1\214\2\0\1\216"+
    "\1\0\3\214\1\0\1\217\3\0\1\206\1\214\3\0"+
    "\1\214\3\0\2\214\1\0\2\214\1\256\2\0\1\265"+
    "\5\256\1\266\2\256\1\260\16\256\1\267\2\0\1\221"+
    "\5\267\1\221\21\267\1\270\2\0\1\222\5\270\1\222"+
    "\21\270\1\223\2\0\13\223\1\271\14\223\1\272\2\0"+
    "\6\272\1\273\2\272\1\274\16\272\1\275\2\0\6\275"+
    "\1\0\21\275\1\276\2\0\1\277\1\275\3\276\1\275"+
    "\1\230\2\275\1\300\1\275\1\276\3\275\1\276\3\275"+
    "\2\276\1\275\2\276\1\225\2\0\1\227\1\0\3\225"+
    "\1\0\1\230\2\0\1\163\1\0\1\225\3\0\1\225"+
    "\3\0\2\225\1\0\2\225\1\272\2\0\1\301\5\272"+
    "\1\302\2\272\1\303\16\272\1\304\2\0\6\304\1\305"+
    "\2\304\1\306\16\304\1\262\2\0\1\307\1\261\3\262"+
    "\1\261\1\236\4\261\1\262\3\261\1\262\3\261\2\262"+
    "\1\261\2\262\1\214\2\0\1\235\1\0\3\214\1\0"+
    "\1\236\4\0\1\214\3\0\1\214\3\0\2\214\1\0"+
    "\2\214\1\304\2\0\1\310\5\304\1\311\2\304\1\306"+
    "\16\304\4\173\1\312\1\240\25\173\3\0\1\243\5\0"+
    "\1\243\2\0\1\313\16\0\1\242\2\0\1\244\5\242"+
    "\1\314\2\242\1\244\16\242\1\246\2\0\6\246\1\315"+
    "\2\246\1\316\17\246\2\0\1\247\5\246\1\317\2\246"+
    "\1\320\1\251\15\246\3\0\1\253\5\0\1\253\2\0"+
    "\1\321\21\0\1\257\5\0\1\257\2\0\1\322\16\0"+
    "\1\256\2\0\1\260\5\256\1\323\2\256\1\260\16\256"+
    "\1\262\2\0\6\262\1\324\2\262\1\325\17\262\2\0"+
    "\1\263\5\262\1\326\2\262\1\325\1\264\15\262\3\0"+
    "\1\266\5\0\1\266\2\0\1\322\16\0\1\223\2\0"+
    "\1\327\5\223\1\327\4\223\1\271\4\223\1\330\7\223"+
    "\3\0\1\273\5\0\1\273\2\0\1\331\16\0\1\272"+
    "\2\0\1\274\5\272\1\332\2\272\1\274\16\272\1\276"+
    "\2\0\6\276\1\333\2\276\1\334\17\276\2\0\1\277"+
    "\5\276\1\335\2\276\1\336\16\276\3\0\1\302\5\0"+
    "\1\302\2\0\1\337\21\0\1\305\5\0\1\305\2\0"+
    "\1\340\16\0\1\304\2\0\1\306\5\304\1\341\2\304"+
    "\1\306\16\304\1\262\2\0\1\307\5\262\1\342\2\262"+
    "\1\325\16\262\3\0\1\311\5\0\1\311\2\0\1\340"+
    "\16\0\1\343\2\0\1\344\5\343\1\313\22\343\2\0"+
    "\1\345\5\343\1\314\2\343\1\344\16\343\3\0\1\315"+
    "\5\0\1\315\2\0\1\346\16\0\1\246\2\0\1\316"+
    "\5\246\1\347\2\246\1\316\16\246\1\202\2\0\1\350"+
    "\1\0\3\202\1\0\1\317\2\0\1\351\1\206\1\202"+
    "\3\0\1\202\3\0\2\202\1\0\2\202\1\352\2\0"+
    "\1\353\5\352\1\322\22\352\2\0\1\354\5\352\1\323"+
    "\2\352\1\353\16\352\3\0\1\324\5\0\1\324\2\0"+
    "\1\355\16\0\1\262\2\0\1\325\5\262\1\356\2\262"+
    "\1\325\16\262\1\214\2\0\1\357\1\0\3\214\1\0"+
    "\1\326\2\0\1\355\1\206\1\214\3\0\1\214\3\0"+
    "\2\214\1\0\2\214\1\223\2\360\1\330\5\223\1\330"+
    "\4\223\1\271\14\223\1\361\2\0\1\362\5\361\1\331"+
    "\22\361\2\0\1\363\5\361\1\332\2\361\1\362\16\361"+
    "\3\0\1\333\5\0\1\333\2\0\1\364\16\0\1\276"+
    "\2\0\1\334\5\276\1\365\2\276\1\334\16\276\1\225"+
    "\2\0\1\366\1\0\3\225\1\0\1\335\2\0\1\367"+
    "\1\0\1\225\3\0\1\225\3\0\2\225\1\0\2\225"+
    "\1\370\2\0\1\371\5\370\1\340\22\370\2\0\1\372"+
    "\5\370\1\341\2\370\1\371\16\370\1\214\2\0\1\373"+
    "\1\0\3\214\1\0\1\342\2\0\1\355\1\0\1\214"+
    "\3\0\1\214\3\0\2\214\1\0\2\214\1\343\2\0"+
    "\6\343\1\0\21\343\1\374\2\0\1\375\5\374\1\346"+
    "\22\374\2\0\1\376\5\374\1\347\2\374\1\375\16\374"+
    "\1\246\2\0\1\247\1\245\3\246\1\245\1\317\2\245"+
    "\1\320\1\251\1\246\3\245\1\246\3\245\2\246\1\245"+
    "\2\246\1\352\2\0\6\352\1\0\21\352\1\377\2\0"+
    "\1\u0100\5\377\1\355\22\377\2\0\1\u0101\5\377\1\356"+
    "\2\377\1\u0100\16\377\1\262\2\0\1\263\1\261\3\262"+
    "\1\261\1\326\2\261\1\u0102\1\264\1\262\3\261\1\262"+
    "\3\261\2\262\1\261\2\262\1\0\2\360\1\u0103\5\0"+
    "\1\u0103\4\0\1\u0104\14\0\1\361\2\0\6\361\1\0"+
    "\21\361\1\u0105\2\0\1\u0106\5\u0105\1\364\22\u0105\2\0"+
    "\1\u0107\5\u0105\1\365\2\u0105\1\u0106\16\u0105\1\276\2\0"+
    "\1\277\1\275\3\276\1\275\1\335\2\275\1\336\1\275"+
    "\1\276\3\275\1\276\3\275\2\276\1\275\2\276\1\370"+
    "\2\0\6\370\1\0\21\370\1\262\2\0\1\307\1\261"+
    "\3\262\1\261\1\342\2\261\1\u0102\1\261\1\262\3\261"+
    "\1\262\3\261\2\262\1\261\2\262\1\374\2\0\6\374"+
    "\1\0\21\374\1\377\2\0\6\377\1\0\21\377\3\0"+
    "\1\u0103\5\0\1\u0103\4\0\1\u0104\14\0\1\u0108\2\0"+
    "\13\u0108\1\0\14\u0108\1\u0105\2\0\6\u0105\1\0\21\u0105"+
    "\1\u0108\2\0\13\u0108\1\u0109\14\u0108\3\0\1\u010a\5\0"+
    "\1\u010a\11\0\1\u010b\10\0\2\360\1\u010b\5\0\1\u010b"+
    "\4\0\1\u0104\14\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4941];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\37\0\2\11\4\1\4\11\2\1\2\11\2\1\2\11"+
    "\2\1\2\11\1\1\3\11\2\1\1\11\1\1\1\11"+
    "\1\1\1\11\3\1\1\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\4\1\2\11\5\1\2\11\12\1\1\0"+
    "\1\1\1\11\1\1\1\11\1\1\2\11\5\1\1\11"+
    "\7\1\1\0\4\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\11\3\1\2\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\1\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\11\1\1\0\1\1\1\0\11\1\1\0"+
    "\1\1\1\0\7\1\1\0\4\1\1\11\3\0\1\1"+
    "\1\0\2\1\3\0\1\1\6\0\1\1\1\0\2\1"+
    "\3\0\3\1\2\0\5\1\2\0\1\1\1\0\3\1"+
    "\2\0\14\1\3\0\3\1\1\0\1\1\2\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[267];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 62: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 63: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 64: break;
          case 4: 
            { if ("extends".equalsIgnoreCase(yytext().toString())) { yybegin(EXTENDS); return CndTypes.EXTENDS; } 
												  	else if ("itemtype".equalsIgnoreCase(yytext().toString())) { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE; } 
    											  	else { yybegin(OPTIONS); return CndTypes.OPTION; }
            }
          case 65: break;
          case 5: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 66: break;
          case 6: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 67: break;
          case 7: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 68: break;
          case 8: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 69: break;
          case 9: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 70: break;
          case 10: 
            { return CndTypes.EQUAL;
            }
          case 71: break;
          case 11: 
            { yybegin(NAMESPACE_URI); return CndTypes.SINGLE_QUOTE;
            }
          case 72: break;
          case 12: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 73: break;
          case 13: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 74: break;
          case 14: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 75: break;
          case 15: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 76: break;
          case 16: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 77: break;
          case 17: 
            { return CndTypes.COLON;
            }
          case 78: break;
          case 18: 
            { yybegin(NODETYPE_DONE); return CndTypes.RIGHT_BRACKET;
            }
          case 79: break;
          case 19: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 80: break;
          case 20: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 81: break;
          case 21: 
            { yybegin(SUPER_TYPE_NAME); return CndTypes.COLON;
            }
          case 82: break;
          case 22: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            }
          case 83: break;
          case 23: 
            { yybegin(AFTER_SUPER_TYPE_NAME); return CndTypes.NODE_TYPE_NAME;
            }
          case 84: break;
          case 24: 
            { yybegin(SUPER_TYPE_NAMESPACE); return CndTypes.COMMA;
            }
          case 85: break;
          case 25: 
            { return CndTypes.OPTION;
            }
          case 86: break;
          case 26: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 87: break;
          case 27: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 88: break;
          case 28: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 89: break;
          case 29: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 90: break;
          case 30: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 91: break;
          case 31: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 92: break;
          case 32: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 93: break;
          case 33: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 94: break;
          case 34: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 95: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 96: break;
          case 36: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 97: break;
          case 37: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 98: break;
          case 38: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 99: break;
          case 39: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 100: break;
          case 40: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 101: break;
          case 41: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 102: break;
          case 42: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 103: break;
          case 43: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 104: break;
          case 44: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 105: break;
          case 45: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 106: break;
          case 46: 
            { return CndTypes.NODE_NAME;
            }
          case 107: break;
          case 47: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 108: break;
          case 48: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 109: break;
          case 49: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 110: break;
          case 50: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 111: break;
          case 51: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 112: break;
          case 52: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 113: break;
          case 53: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 114: break;
          case 54: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 115: break;
          case 55: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 116: break;
          case 56: 
            { return CndTypes.COMMENT;
            }
          case 117: break;
          case 57: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(PROPERTY_ATTRIBUTES); return TokenType.WHITE_SPACE;
            }
          case 118: break;
          case 58: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 119: break;
          case 59: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); return TokenType.WHITE_SPACE;
            }
          case 120: break;
          case 60: 
            { yypushback(yytext().toString().replaceAll("\\r", "").replaceAll("\\n", "").trim().length()); yybegin(NODE_ATTRIBUTES); return TokenType.WHITE_SPACE;
            }
          case 121: break;
          case 61: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 122: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
