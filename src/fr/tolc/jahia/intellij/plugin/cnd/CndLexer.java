/* The following code was generated by JFlex 1.4.3 on 03/11/15 12:46 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 03/11/15 12:46 from the specification file
 * <tt>/home/thomascoquel/perso/intelliJ plugin/IntelliJ Jahia plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_ADDENDUM = 38;
  public static final int PROPERTY_PLUS_COLON_DONE = 54;
  public static final int EXTEND_NAMESPACE_DONE = 64;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int EXTEND_BEGIN = 62;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int EXTEND_COLON_DONE = 66;
  public static final int PROPERTY_DEFAULT_BEGIN = 42;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 44;
  public static final int PROPERTY_PLUS_BEGIN = 46;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int PROPERTY_PLUS_TYPE_DONE = 56;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 50;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 52;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int PROPERTY_PLUS_ADDENDUM = 58;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int NAMESPACES_OVER = 10;
  public static final int PROPERTY_ADDENDUM_ATTR = 40;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 60;
  public static final int PROPERTY_PLUS_NAME_DONE = 48;
  public static final int YYINITIAL = 0;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int EXTEND_ITEM_BEGIN = 68;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19,  5,  5, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\1\1\0\1\3\1\2\16\21\4\0\1\3\3\0"+
    "\1\5\2\0\1\10\1\45\1\46\1\44\1\43\1\25\1\42\1\16"+
    "\1\4\12\22\1\15\1\0\1\6\1\7\1\20\2\0\1\17\1\51"+
    "\15\17\1\57\2\17\1\56\7\17\1\23\1\0\1\24\1\0\1\17"+
    "\1\0\1\36\1\37\1\41\1\34\1\35\1\54\1\47\1\11\1\27"+
    "\1\17\1\53\1\40\1\26\1\31\1\32\1\13\1\17\1\33\1\14"+
    "\1\12\1\50\1\17\1\52\1\30\1\55\1\17\4\0\41\21\2\0"+
    "\4\5\4\0\1\5\2\0\1\21\7\0\1\5\4\0\1\5\5\0"+
    "\27\5\1\0\37\5\1\0\u01ca\5\4\0\14\5\16\0\5\5\7\0"+
    "\1\5\1\0\1\5\21\0\160\21\5\5\1\0\2\5\2\0\4\5"+
    "\10\0\1\5\1\0\3\5\1\0\1\5\1\0\24\5\1\0\123\5"+
    "\1\0\213\5\1\0\5\21\2\0\236\5\11\0\46\5\2\0\1\5"+
    "\7\0\47\5\11\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21"+
    "\1\0\1\21\10\0\33\5\5\0\3\5\15\0\4\21\7\0\1\5"+
    "\4\0\13\21\5\0\53\5\25\21\12\60\4\0\2\5\1\21\143\5"+
    "\1\0\1\5\10\21\1\0\6\21\2\5\2\21\1\0\4\21\2\5"+
    "\12\60\3\5\2\0\1\5\17\0\1\21\1\5\1\21\36\5\33\21"+
    "\2\0\131\5\13\21\1\5\16\0\12\60\41\5\11\21\2\5\4\0"+
    "\1\5\5\0\26\5\4\21\1\5\11\21\1\5\3\21\1\5\5\21"+
    "\22\0\31\5\3\21\244\0\4\21\66\5\3\21\1\5\22\21\1\5"+
    "\7\21\12\5\2\21\2\0\12\60\1\0\7\5\1\0\7\5\1\0"+
    "\3\21\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5\1\0"+
    "\1\5\3\0\4\5\2\0\1\21\1\5\7\21\2\0\2\21\2\0"+
    "\3\21\1\5\10\0\1\21\4\0\2\5\1\0\3\5\2\21\2\0"+
    "\12\60\4\5\7\0\1\5\5\0\3\21\1\0\6\5\4\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\2\5\1\0\2\5"+
    "\2\0\1\21\1\0\5\21\4\0\2\21\2\0\3\21\3\0\1\21"+
    "\7\0\4\5\1\0\1\5\7\0\12\60\2\21\3\5\1\21\13\0"+
    "\3\21\1\0\11\5\1\0\3\5\1\0\26\5\1\0\7\5\1\0"+
    "\2\5\1\0\5\5\2\0\1\21\1\5\10\21\1\0\3\21\1\0"+
    "\3\21\2\0\1\5\17\0\2\5\2\21\2\0\12\60\1\0\1\5"+
    "\17\0\3\21\1\0\10\5\2\0\2\5\2\0\26\5\1\0\7\5"+
    "\1\0\2\5\1\0\5\5\2\0\1\21\1\5\7\21\2\0\2\21"+
    "\2\0\3\21\10\0\2\21\4\0\2\5\1\0\3\5\2\21\2\0"+
    "\12\60\1\0\1\5\20\0\1\21\1\5\1\0\6\5\3\0\3\5"+
    "\1\0\4\5\3\0\2\5\1\0\1\5\1\0\2\5\3\0\2\5"+
    "\3\0\3\5\3\0\14\5\4\0\5\21\3\0\3\21\1\0\4\21"+
    "\2\0\1\5\6\0\1\21\16\0\12\60\11\0\1\5\7\0\3\21"+
    "\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5"+
    "\3\0\1\5\7\21\1\0\3\21\1\0\4\21\7\0\2\21\1\0"+
    "\2\5\6\0\2\5\2\21\2\0\12\60\22\0\2\21\1\0\10\5"+
    "\1\0\3\5\1\0\27\5\1\0\12\5\1\0\5\5\2\0\1\21"+
    "\1\5\7\21\1\0\3\21\1\0\4\21\7\0\2\21\7\0\1\5"+
    "\1\0\2\5\2\21\2\0\12\60\1\0\2\5\17\0\2\21\1\0"+
    "\10\5\1\0\3\5\1\0\51\5\2\0\1\5\7\21\1\0\3\21"+
    "\1\0\4\21\1\5\10\0\1\21\10\0\2\5\2\21\2\0\12\60"+
    "\12\0\6\5\2\0\2\21\1\0\22\5\3\0\30\5\1\0\11\5"+
    "\1\0\1\5\2\0\7\5\3\0\1\21\4\0\6\21\1\0\1\21"+
    "\1\0\10\21\22\0\2\21\15\0\60\5\1\21\2\5\7\21\4\0"+
    "\10\5\10\21\1\0\12\60\47\0\2\5\1\0\1\5\2\0\2\5"+
    "\1\0\1\5\2\0\1\5\6\0\4\5\1\0\7\5\1\0\3\5"+
    "\1\0\1\5\1\0\1\5\2\0\2\5\1\0\4\5\1\21\2\5"+
    "\6\21\1\0\2\21\1\5\2\0\5\5\1\0\1\5\1\0\6\21"+
    "\2\0\12\60\2\0\2\5\42\0\1\5\27\0\2\21\6\0\12\60"+
    "\13\0\1\21\1\0\1\21\1\0\1\21\4\0\2\21\10\5\1\0"+
    "\44\5\4\0\24\21\1\0\2\21\5\5\13\21\1\0\44\21\11\0"+
    "\1\21\71\0\53\5\24\21\1\5\12\60\6\0\6\5\4\21\4\5"+
    "\3\21\1\5\3\21\2\5\7\21\3\5\4\21\15\5\14\21\1\5"+
    "\1\21\12\60\4\21\2\0\46\5\12\0\53\5\1\0\1\5\3\0"+
    "\u0149\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\51\5\1\0\4\5\2\0\41\5\1\0\4\5\2\0\7\5\1\0"+
    "\1\5\1\0\4\5\2\0\17\5\1\0\71\5\1\0\4\5\2\0"+
    "\103\5\2\0\3\21\40\0\20\5\20\0\125\5\14\0\u026c\5\2\0"+
    "\21\5\1\0\32\5\5\0\113\5\3\0\3\5\17\0\15\5\1\0"+
    "\4\5\3\21\13\0\22\5\3\21\13\0\22\5\2\21\14\0\15\5"+
    "\1\0\3\5\1\0\2\21\14\0\64\5\40\21\3\0\1\5\3\0"+
    "\2\5\1\21\2\0\12\60\41\0\3\21\2\0\12\60\6\0\130\5"+
    "\10\0\51\5\1\21\1\5\5\0\106\5\12\0\35\5\3\0\14\21"+
    "\4\0\14\21\12\0\12\60\36\5\2\0\5\5\13\0\54\5\4\0"+
    "\21\21\7\5\2\21\6\0\12\60\46\0\27\5\5\21\4\0\65\5"+
    "\12\21\1\0\35\21\2\0\1\21\12\60\6\0\12\60\15\0\1\5"+
    "\130\0\5\21\57\5\21\21\7\5\4\0\12\60\21\0\11\21\14\0"+
    "\3\21\36\5\12\21\3\0\2\5\12\60\6\0\46\5\16\21\14\0"+
    "\44\5\24\21\10\0\12\60\3\0\3\5\12\60\44\5\122\0\3\21"+
    "\1\0\25\21\4\5\1\21\4\5\1\21\15\0\300\5\47\21\25\0"+
    "\4\21\u0116\5\2\0\6\5\2\0\46\5\2\0\6\5\2\0\10\5"+
    "\1\0\1\5\1\0\1\5\1\0\1\5\1\0\37\5\2\0\65\5"+
    "\1\0\7\5\1\0\1\5\3\0\3\5\1\0\7\5\3\0\4\5"+
    "\2\0\6\5\4\0\15\5\5\0\3\5\1\0\7\5\16\0\5\21"+
    "\32\0\5\21\20\0\2\5\23\0\1\5\13\0\5\21\5\0\6\21"+
    "\1\0\1\5\15\0\1\5\20\0\15\5\3\0\32\5\26\0\15\21"+
    "\4\0\1\21\3\0\14\21\21\0\1\5\4\0\1\5\2\0\12\5"+
    "\1\0\1\5\3\0\5\5\6\0\1\5\1\0\1\5\1\0\1\5"+
    "\1\0\4\5\1\0\13\5\2\0\4\5\5\0\5\5\4\0\1\5"+
    "\21\0\51\5\u0a77\0\57\5\1\0\57\5\1\0\205\5\6\0\4\5"+
    "\3\21\16\0\46\5\12\0\66\5\11\0\1\5\17\0\1\21\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\21\57\0\1\5"+
    "\u01d5\0\3\5\31\0\11\5\6\21\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\21\2\0\3\5\1\0\132\5\1\0\4\5\5\0"+
    "\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0"+
    "\u51cc\5\64\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\60"+
    "\2\5\24\0\57\5\1\21\14\0\2\21\1\0\31\5\10\0\120\5"+
    "\2\21\45\0\11\5\2\0\147\5\2\0\4\5\1\0\2\5\16\0"+
    "\12\5\120\0\10\5\1\21\3\5\1\21\4\5\1\21\27\5\5\21"+
    "\20\0\1\5\7\0\64\5\14\0\2\21\62\5\21\21\13\0\12\60"+
    "\6\0\22\21\6\5\3\0\1\5\4\0\12\60\34\5\10\21\2\0"+
    "\27\5\15\21\14\0\35\5\3\0\4\21\57\5\16\21\16\0\1\5"+
    "\12\60\46\0\51\5\16\21\11\0\3\5\1\21\10\5\2\21\2\0"+
    "\12\60\6\0\27\5\3\0\1\5\1\21\4\0\60\5\1\21\1\5"+
    "\3\21\2\5\2\21\5\5\2\21\1\5\1\21\1\5\30\0\3\5"+
    "\43\0\6\5\2\0\6\5\2\0\6\5\11\0\7\5\1\0\7\5"+
    "\221\0\43\5\10\21\1\0\2\21\2\0\12\60\6\0\u2ba4\5\14\0"+
    "\27\5\4\0\61\5\u2104\0\u012e\5\2\0\76\5\2\0\152\5\46\0"+
    "\7\5\14\0\5\5\5\0\1\5\1\21\12\5\1\0\15\5\1\0"+
    "\5\5\1\0\1\5\1\0\2\5\1\0\2\5\1\0\154\5\41\0"+
    "\u016b\5\22\0\100\5\2\0\66\5\50\0\15\5\3\0\20\21\20\0"+
    "\7\21\14\0\2\5\30\0\3\5\31\0\1\5\6\0\5\5\1\0"+
    "\207\5\2\0\1\21\4\0\1\5\13\0\12\60\7\0\32\5\4\0"+
    "\1\5\1\0\32\5\13\0\131\5\3\0\6\5\2\0\6\5\2\0"+
    "\6\5\2\0\3\5\3\0\2\5\3\0\2\5\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\42\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\3\21\1\22\1\23"+
    "\1\3\5\1\1\24\1\3\11\1\1\25\1\1\1\26"+
    "\1\1\1\26\2\27\1\3\1\30\1\31\1\32\1\33"+
    "\1\3\1\1\1\34\1\35\1\36\2\1\1\37\3\0"+
    "\1\40\2\0\1\41\3\0\1\42\20\0\1\25\5\0"+
    "\1\43\21\0\1\44\1\45\12\0\2\26\1\46\1\0"+
    "\1\47\11\0\1\50\12\0\1\25\7\0\1\51\25\0"+
    "\1\50\2\0\1\52\31\0\1\53\1\0\1\54\1\55"+
    "\1\0\1\56\13\0\1\57\1\60\33\0\1\61\3\0"+
    "\1\50\13\0\1\50\20\0\1\50\64\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\61\0\142\0\223\0\304\0\365\0\u0126\0\u0157"+
    "\0\u0188\0\u01b9\0\u01ea\0\u021b\0\u024c\0\u027d\0\u02ae\0\u02df"+
    "\0\u0310\0\u0341\0\u0372\0\u03a3\0\u03d4\0\u0405\0\u0436\0\u0467"+
    "\0\u0498\0\u04c9\0\u04fa\0\u052b\0\u055c\0\u058d\0\u05be\0\u05ef"+
    "\0\u0620\0\u0651\0\u0682\0\u06b3\0\u06e4\0\u0715\0\u0682\0\u0682"+
    "\0\u0746\0\u0777\0\u0682\0\u0682\0\u07a8\0\u07d9\0\u080a\0\u083b"+
    "\0\u086c\0\u0682\0\u089d\0\u0682\0\u0682\0\u08ce\0\u08ff\0\u0930"+
    "\0\u0961\0\u0682\0\u0992\0\u0682\0\u06b3\0\u06e4\0\u0682\0\u09c3"+
    "\0\u09f4\0\u0a25\0\u0a56\0\u0a87\0\u0ab8\0\u0ae9\0\u0682\0\u0b1a"+
    "\0\u0b4b\0\u0b7c\0\u0bad\0\u0bde\0\u0c0f\0\u0c40\0\u0c71\0\u0ca2"+
    "\0\u0cd3\0\u0d04\0\u0d35\0\u0d66\0\u0d97\0\u0dc8\0\u0df9\0\u0682"+
    "\0\u0e2a\0\u0e5b\0\u0682\0\u0e8c\0\u0682\0\u0ebd\0\u0eee\0\u0f1f"+
    "\0\u0682\0\u0f50\0\u0f81\0\u0fb2\0\u0fe3\0\u1014\0\u1045\0\u07d9"+
    "\0\u0682\0\u1076\0\u083b\0\u0682\0\u10a7\0\u10d8\0\u1109\0\u0682"+
    "\0\u113a\0\u116b\0\u119c\0\u11cd\0\u11fe\0\u122f\0\u1260\0\u1291"+
    "\0\u12c2\0\u12f3\0\u1324\0\u1355\0\u1386\0\u13b7\0\u13e8\0\u0ca2"+
    "\0\u0ca2\0\u1419\0\u144a\0\u147b\0\u14ac\0\u14dd\0\u0682\0\u150e"+
    "\0\u153f\0\u0eee\0\u1570\0\u15a1\0\u15d2\0\u1603\0\u1634\0\u1665"+
    "\0\u1696\0\u16c7\0\u16f8\0\u1729\0\u175a\0\u178b\0\u17bc\0\u17ed"+
    "\0\u122f\0\u1260\0\u181e\0\u184f\0\u1880\0\u18b1\0\u18e2\0\u1913"+
    "\0\u1944\0\u1975\0\u19a6\0\u19d7\0\u1a08\0\u14dd\0\u150e\0\u1a39"+
    "\0\u1a6a\0\u1a9b\0\u1acc\0\u1afd\0\u1b2e\0\u1b5f\0\u1b90\0\u1bc1"+
    "\0\u1bf2\0\u1c23\0\u0682\0\u1c54\0\u1c85\0\u1cb6\0\u1ce7\0\u1d18"+
    "\0\u1d49\0\u1d7a\0\u1dab\0\u1ddc\0\u1e0d\0\u0682\0\u1e3e\0\u1e6f"+
    "\0\u1ea0\0\u1ed1\0\u1f02\0\u1f33\0\u1f64\0\u0682\0\u1f95\0\u1fc6"+
    "\0\u1ff7\0\u2028\0\u2059\0\u208a\0\u20bb\0\u20ec\0\u211d\0\u214e"+
    "\0\u217f\0\u21b0\0\u21e1\0\u2212\0\u2243\0\u2274\0\u22a5\0\u22d6"+
    "\0\u2307\0\u2338\0\u2369\0\u239a\0\u23cb\0\u23fc\0\u0682\0\u242d"+
    "\0\u245e\0\u248f\0\u24c0\0\u24f1\0\u2522\0\u2553\0\u2584\0\u25b5"+
    "\0\u25e6\0\u2617\0\u2648\0\u2679\0\u26aa\0\u26db\0\u270c\0\u273d"+
    "\0\u276e\0\u279f\0\u27d0\0\u2801\0\u2832\0\u2863\0\u2894\0\u28c5"+
    "\0\u0682\0\u28f6\0\u0682\0\u2679\0\u2927\0\u0682\0\u2958\0\u2989"+
    "\0\u29ba\0\u29eb\0\u2a1c\0\u2a4d\0\u2a7e\0\u2aaf\0\u2ae0\0\u2b11"+
    "\0\u2b42\0\u0682\0\u0682\0\u2b73\0\u2ba4\0\u2bd5\0\u2c06\0\u2c37"+
    "\0\u2c68\0\u2c99\0\u2cca\0\u2cfb\0\u2d2c\0\u2d5d\0\u2d8e\0\u2dbf"+
    "\0\u2df0\0\u2e21\0\u2e52\0\u2e83\0\u2eb4\0\u2ee5\0\u2f16\0\u2f47"+
    "\0\u2f78\0\u2fa9\0\u2fda\0\u300b\0\u303c\0\u306d\0\u0682\0\u309e"+
    "\0\u30cf\0\u3100\0\u3131\0\u3162\0\u3193\0\u31c4\0\u31f5\0\u3226"+
    "\0\u3257\0\u3288\0\u32b9\0\u32ea\0\u331b\0\u334c\0\u337d\0\u33ae"+
    "\0\u33df\0\u3410\0\u3441\0\u3472\0\u34a3\0\u34d4\0\u3505\0\u3536"+
    "\0\u3567\0\u3598\0\u35c9\0\u35fa\0\u362b\0\u365c\0\u368d\0\u36be"+
    "\0\u36ef\0\u3720\0\u3751\0\u3782\0\u37b3\0\u37e4\0\u3815\0\u3846"+
    "\0\u3877\0\u38a8\0\u38d9\0\u390a\0\u393b\0\u396c\0\u399d\0\u39ce"+
    "\0\u39ff\0\u3a30\0\u3a61\0\u3a92\0\u3ac3\0\u3af4\0\u3b25\0\u3b56"+
    "\0\u3b87\0\u3bb8\0\u3be9\0\u3c1a\0\u3c4b\0\u3c7c\0\u3cad\0\u3cde"+
    "\0\u3d0f\0\u3d40\0\u3d71\0\u3da2\0\u3dd3\0\u3e04\0\u3e35\0\u3e66"+
    "\0\u3e97\0\u3ec8\0\u3ef9\0\u3f2a\0\u3f5b\0\u3f8c\0\u3fbd\0\u3fee"+
    "\0\u401f\0\u4050\0\u4081\0\u40b2";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\43\2\44\1\45\1\46\1\43\1\47\14\43\1\50"+
    "\3\43\1\51\5\43\1\52\4\43\1\53\1\54\16\43"+
    "\2\44\1\45\1\43\1\55\3\43\4\55\2\43\1\55"+
    "\6\43\14\55\5\43\11\55\2\43\2\44\1\45\3\43"+
    "\1\56\52\43\2\44\1\45\5\43\1\57\50\43\2\44"+
    "\1\45\4\43\1\60\51\43\2\44\1\45\56\43\2\44"+
    "\1\45\1\43\1\61\3\43\4\61\2\43\1\61\6\43"+
    "\14\61\5\43\11\61\2\43\2\44\1\45\11\43\1\62"+
    "\44\43\2\44\1\45\1\43\1\63\3\43\4\63\2\43"+
    "\1\63\6\43\14\63\5\43\11\63\2\43\2\44\1\45"+
    "\20\43\1\64\35\43\2\44\1\45\14\43\1\65\5\43"+
    "\1\66\3\43\1\67\3\43\1\70\23\43\2\44\1\45"+
    "\1\43\1\71\3\43\4\71\2\43\1\71\6\43\14\71"+
    "\5\43\11\71\2\43\2\44\1\45\11\43\1\72\44\43"+
    "\2\44\1\45\1\43\1\73\3\43\4\73\2\43\1\73"+
    "\6\43\14\73\5\43\11\73\1\43\1\74\1\44\1\75"+
    "\1\76\21\74\1\77\33\74\1\43\2\44\1\45\1\43"+
    "\1\100\3\43\4\100\2\43\1\100\6\43\14\100\5\43"+
    "\11\100\2\43\2\44\1\101\56\43\2\44\1\45\10\43"+
    "\1\102\17\43\1\103\2\43\1\104\1\105\11\43\1\106"+
    "\7\43\2\44\1\45\42\43\1\107\13\43\2\44\1\110"+
    "\5\43\1\111\14\43\1\112\1\113\1\43\1\114\1\115"+
    "\3\43\1\116\1\117\22\43\2\44\1\45\4\43\1\120"+
    "\1\43\1\121\7\43\1\122\31\43\1\123\3\43\1\122"+
    "\1\43\2\44\1\45\1\43\1\124\2\43\1\125\4\124"+
    "\2\43\1\124\1\43\2\126\3\43\14\124\5\43\11\124"+
    "\1\126\1\43\2\44\1\45\1\43\1\127\3\43\4\127"+
    "\2\43\1\127\6\43\14\127\2\43\1\130\2\43\11\127"+
    "\2\43\2\44\1\131\56\43\2\44\1\45\1\43\1\132"+
    "\3\43\4\132\2\43\1\132\6\43\14\132\5\43\11\132"+
    "\2\43\2\44\1\45\11\43\1\133\44\43\2\44\1\45"+
    "\1\43\1\134\3\43\4\134\2\43\1\134\6\43\14\134"+
    "\5\43\11\134\2\43\2\44\1\45\42\43\1\135\13\43"+
    "\2\44\1\136\56\43\2\44\1\45\1\43\1\137\3\43"+
    "\4\137\2\43\1\137\6\43\14\137\5\43\11\137\2\43"+
    "\2\44\1\45\1\43\1\140\3\43\4\140\2\43\1\140"+
    "\6\43\14\140\5\43\11\140\2\43\2\44\1\45\11\43"+
    "\1\141\44\43\2\44\1\45\1\43\1\142\3\43\4\142"+
    "\2\43\1\142\6\43\14\142\5\43\11\142\2\43\2\44"+
    "\1\45\26\43\1\143\1\43\1\144\24\43\62\0\2\44"+
    "\61\0\1\45\61\0\1\145\66\0\1\146\76\0\1\147"+
    "\35\0\1\55\3\0\4\55\2\0\1\55\6\0\14\55"+
    "\5\0\11\55\4\0\1\150\4\0\1\151\62\0\1\152"+
    "\51\0\1\153\14\0\1\154\45\0\1\61\3\0\4\61"+
    "\2\0\1\61\6\0\14\61\5\0\11\61\6\0\1\63"+
    "\3\0\4\63\2\0\1\63\1\0\2\63\3\0\14\63"+
    "\5\0\12\63\27\0\1\155\64\0\1\156\64\0\1\157"+
    "\26\0\1\71\3\0\4\71\2\0\1\71\6\0\14\71"+
    "\5\0\11\71\6\0\1\73\3\0\4\73\2\0\1\73"+
    "\1\0\2\73\3\0\14\73\5\0\12\73\5\0\1\100"+
    "\3\0\4\100\2\0\1\100\1\0\2\100\3\0\14\100"+
    "\5\0\12\100\3\0\1\101\41\0\1\160\25\0\1\161"+
    "\104\0\1\162\54\0\1\163\60\0\1\164\63\0\1\165"+
    "\26\0\1\110\2\0\1\166\1\167\100\0\1\170\67\0"+
    "\1\171\11\0\1\172\41\0\1\173\61\0\1\174\57\0"+
    "\1\175\77\0\1\176\42\0\1\177\26\0\1\200\2\0"+
    "\5\200\1\201\50\200\33\0\1\202\47\0\1\122\35\0"+
    "\1\122\36\0\1\203\27\0\1\124\3\0\4\124\1\204"+
    "\1\0\1\124\1\0\2\126\2\0\1\205\14\124\5\0"+
    "\11\124\1\126\1\206\2\0\56\206\5\0\1\126\3\0"+
    "\4\126\2\0\1\126\1\0\2\126\2\0\1\205\14\126"+
    "\5\0\12\126\5\0\1\127\3\0\4\127\2\0\1\127"+
    "\1\0\2\127\3\0\14\127\5\0\12\127\3\0\1\131"+
    "\41\0\1\207\20\0\1\132\3\0\4\132\2\0\1\132"+
    "\6\0\14\132\5\0\11\132\6\0\1\134\3\0\4\134"+
    "\2\0\1\134\1\0\2\134\3\0\14\134\5\0\12\134"+
    "\3\0\1\136\3\0\1\210\26\0\1\211\27\0\1\212"+
    "\3\0\4\212\1\213\1\0\1\212\6\0\14\212\5\0"+
    "\11\212\6\0\1\140\3\0\4\140\2\0\1\140\6\0"+
    "\14\140\5\0\11\140\6\0\1\142\3\0\4\142\2\0"+
    "\1\142\1\0\2\142\3\0\14\142\5\0\12\142\13\0"+
    "\1\214\102\0\1\215\23\0\1\145\2\0\56\145\35\0"+
    "\1\216\35\0\1\217\60\0\1\220\76\0\1\221\64\0"+
    "\1\222\40\0\1\223\77\0\1\224\37\0\1\225\100\0"+
    "\1\226\57\0\1\227\65\0\1\230\25\0\1\231\60\0"+
    "\1\232\111\0\1\233\55\0\1\234\67\0\1\235\54\0"+
    "\1\236\100\0\1\237\45\0\1\240\31\0\1\241\100\0"+
    "\1\242\76\0\1\243\50\0\1\244\25\0\1\245\3\0"+
    "\4\245\2\0\1\245\6\0\14\245\5\0\11\245\4\0"+
    "\1\205\1\0\1\126\3\0\4\126\2\0\1\126\1\0"+
    "\2\126\3\0\14\126\5\0\12\126\1\206\2\0\5\206"+
    "\1\246\50\206\3\0\1\247\125\0\1\250\15\0\1\251"+
    "\3\0\4\251\2\0\1\251\6\0\14\251\5\0\11\251"+
    "\13\0\1\252\122\0\1\253\32\0\1\254\67\0\1\255"+
    "\36\0\1\256\74\0\1\257\66\0\1\260\35\0\1\261"+
    "\75\0\1\262\66\0\1\263\63\0\1\264\67\0\1\263"+
    "\64\0\1\265\41\0\1\266\60\0\1\267\36\0\1\270"+
    "\103\0\1\271\73\0\1\272\42\0\1\273\60\0\1\274"+
    "\42\0\1\275\101\0\1\276\37\0\1\243\51\0\1\245"+
    "\3\0\4\245\2\0\1\245\1\0\2\245\3\0\14\245"+
    "\5\0\12\245\12\0\1\277\53\0\1\251\3\0\4\251"+
    "\2\0\1\251\1\0\2\251\3\0\14\251\5\0\12\251"+
    "\27\0\1\300\67\0\1\301\34\0\1\302\77\0\1\303"+
    "\43\0\1\304\1\305\74\0\1\306\62\0\1\307\60\0"+
    "\1\310\56\0\1\311\64\0\1\312\56\0\1\313\62\0"+
    "\1\314\61\0\1\315\51\0\1\316\61\0\1\317\70\0"+
    "\1\320\51\0\1\321\70\0\1\322\31\0\1\323\100\0"+
    "\1\324\60\0\1\325\76\0\1\326\65\0\1\327\37\0"+
    "\1\330\41\0\1\305\47\0\1\331\112\0\1\332\60\0"+
    "\1\333\71\0\1\334\47\0\1\335\57\0\1\336\54\0"+
    "\1\337\41\0\1\340\61\0\1\341\102\0\1\342\63\0"+
    "\1\343\74\0\1\344\37\0\1\345\34\0\1\346\112\0"+
    "\1\347\50\0\1\350\67\0\1\351\33\0\1\352\61\0"+
    "\1\353\50\0\1\354\113\0\1\355\62\0\1\356\44\0"+
    "\1\357\64\0\1\263\103\0\1\360\36\0\1\361\66\0"+
    "\1\362\54\0\1\363\36\0\1\364\106\0\1\365\55\0"+
    "\1\366\45\0\1\367\35\0\1\367\33\0\1\370\41\0"+
    "\1\371\56\0\1\371\103\0\1\372\26\0\1\353\3\0"+
    "\1\373\55\0\1\374\4\0\4\374\1\0\2\374\2\0"+
    "\1\374\3\0\15\374\4\0\11\374\41\0\1\375\32\0"+
    "\1\376\51\0\1\357\6\0\1\377\20\0\1\u0100\5\0"+
    "\1\u0101\54\0\1\u0102\56\0\1\u0103\62\0\1\337\32\0"+
    "\1\u0104\106\0\1\u0105\52\0\1\u0106\67\0\1\u0107\40\0"+
    "\1\u0108\77\0\1\u0109\26\0\1\372\3\0\1\u010a\106\0"+
    "\1\u010b\60\0\1\u010c\52\0\1\u010d\42\0\1\u010e\102\0"+
    "\1\u010f\102\0\1\337\34\0\1\u0110\57\0\1\u0111\71\0"+
    "\1\u0112\31\0\1\u0113\70\0\1\337\35\0\1\337\36\0"+
    "\1\u0114\52\0\1\u0115\71\0\1\u0116\51\0\1\u0117\63\0"+
    "\1\u0118\55\0\1\337\40\0\1\337\60\0\1\u0119\103\0"+
    "\1\u011a\35\0\1\u011b\60\0\1\u011c\57\0\1\u011d\76\0"+
    "\1\u011e\62\0\1\u011f\36\0\1\u0120\105\0\1\337\61\0"+
    "\1\u0121\61\0\1\u0122\34\0\1\u0123\107\0\1\u0124\60\0"+
    "\1\u0125\33\0\1\u0126\100\0\1\u0127\57\0\1\u0128\62\0"+
    "\1\u0129\60\0\1\u012a\60\0\1\u012b\73\0\1\u012c\45\0"+
    "\1\u012d\53\0\1\u012e\70\0\1\u012f\45\0\1\u0130\61\0"+
    "\1\337\70\0\1\263\34\0\1\263\75\0\1\u0131\34\0"+
    "\1\u0130\7\0\1\u0132\25\0\1\u0133\33\0\1\u0134\73\0"+
    "\1\u0135\67\0\1\u0136\34\0\1\u0137\107\0\1\u0138\31\0"+
    "\1\u0139\71\0\1\u013a\110\0\1\u013b\42\0\1\u013c\56\0"+
    "\1\u013d\62\0\1\u013e\72\0\1\u013f\46\0\1\u0140\56\0"+
    "\1\u0141\57\0\1\u0142\42\0\1\u0143\67\0\1\u0144\70\0"+
    "\1\u0145\57\0\1\u0146\40\0\1\u0147\123\0\1\u0148\53\0"+
    "\1\u0149\65\0\1\u014a\26\0\1\u014b\70\0\1\u014c\40\0"+
    "\1\u014d\103\0\1\u014e\63\0\1\u014f\54\0\1\u0150\73\0"+
    "\1\u0151\45\0\1\u0152\32\0\1\u0153\63\0\1\u0154\117\0"+
    "\1\u0155\17\0\1\u0156\102\0\1\u0157\76\0\1\u0158\23\0"+
    "\1\u0159\13\0\1\u015a\11\0\1\u015b\12\0\1\u015c\62\0"+
    "\1\u015d\33\0\1\u015e\65\0\1\u015f\50\0\1\u0159\70\0"+
    "\1\u0160\51\0\1\u0161\66\0\1\u0162\57\0\1\u0163\73\0"+
    "\1\u0164\23\0\1\u0165\106\0\1\u0164\60\0\1\u0166\60\0"+
    "\1\u0167\55\0\1\u0168\60\0\1\u0169\60\0\1\u016a\60\0"+
    "\1\u016b\33\0\1\u016b\117\0\1\u016c\52\0\1\u016d\43\0"+
    "\1\263\66\0\1\u016e\40\0\1\u016f\101\0\1\u0170\104\0"+
    "\1\u0171\56\0\1\u0168\41\0\1\u0172\55\0\1\u0173\62\0"+
    "\1\u0174\54\0\1\u0175\41\0\1\u0176\55\0\1\u0177\63\0"+
    "\1\u0178\41\0\1\u0179\37\0\1\u017a\63\0\1\u017b\72\0"+
    "\1\u0167\50\0\1\u017c\34\0\1\u0167\44\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[16611];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\42\0\1\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\2\1\1\11"+
    "\7\1\1\11\20\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\4\1\3\0\1\11\2\0\1\11\3\0"+
    "\1\11\20\0\1\1\5\0\1\11\21\0\2\1\12\0"+
    "\3\1\1\0\1\1\11\0\1\11\12\0\1\11\7\0"+
    "\1\11\25\0\1\1\2\0\1\11\31\0\1\11\1\0"+
    "\1\11\1\1\1\0\1\11\13\0\2\11\33\0\1\11"+
    "\3\0\1\1\13\0\1\1\20\0\1\1\64\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[380];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2220) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 33: 
          { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
          }
        case 50: break;
        case 26: 
          { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 51: break;
        case 15: 
          { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
          }
        case 52: break;
        case 24: 
          { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 53: break;
        case 46: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
          }
        case 54: break;
        case 7: 
          { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
          }
        case 55: break;
        case 8: 
          { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
          }
        case 56: break;
        case 48: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 57: break;
        case 32: 
          { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
          }
        case 58: break;
        case 9: 
          { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 59: break;
        case 21: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 60: break;
        case 47: 
          { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
          }
        case 61: break;
        case 12: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
          }
        case 62: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 63: break;
        case 17: 
          { yybegin(NODE_TYPE_INHERITANCE);
          }
        case 64: break;
        case 5: 
          { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
          }
        case 65: break;
        case 39: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 66: break;
        case 40: 
          { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE;
          }
        case 67: break;
        case 34: 
          { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 68: break;
        case 16: 
          { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
          }
        case 69: break;
        case 10: 
          { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 70: break;
        case 27: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 71: break;
        case 11: 
          { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 72: break;
        case 19: 
          { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
          }
        case 73: break;
        case 30: 
          { yybegin(YYINITIAL); return CndTypes.NODE_TYPE_NAME;
          }
        case 74: break;
        case 43: 
          { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
          }
        case 75: break;
        case 14: 
          { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
          }
        case 76: break;
        case 42: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 77: break;
        case 38: 
          { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 78: break;
        case 6: 
          { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
          }
        case 79: break;
        case 22: 
          { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
          }
        case 80: break;
        case 45: 
          { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
          }
        case 81: break;
        case 31: 
          { yybegin(YYINITIAL); return CndTypes.COMMENT;
          }
        case 82: break;
        case 2: 
          { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
          }
        case 83: break;
        case 36: 
          { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
          }
        case 84: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 85: break;
        case 23: 
          { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
          }
        case 86: break;
        case 25: 
          { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 87: break;
        case 13: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
          }
        case 88: break;
        case 18: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
          }
        case 89: break;
        case 37: 
          { yybegin(PROPERTY_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 90: break;
        case 20: 
          { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 91: break;
        case 44: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
          }
        case 92: break;
        case 29: 
          { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 93: break;
        case 49: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
          }
        case 94: break;
        case 35: 
          { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 95: break;
        case 4: 
          { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
          }
        case 96: break;
        case 41: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
          }
        case 97: break;
        case 28: 
          { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 98: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
