/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE = 2;
  public static final int NODETYPE_NAMESPACE = 4;
  public static final int NODETYPE = 6;
  public static final int SUPER_TYPES_NAMESPACE = 8;
  public static final int SUPER_TYPES = 10;
  public static final int SUPER_TYPES_NAME = 12;
  public static final int OPTIONS = 14;
  public static final int EXTENDS = 16;
  public static final int EXTEND_NAMESPACE = 18;
  public static final int EXTEND = 20;
  public static final int ITEMTYPE = 22;
  public static final int PROPERTY = 24;
  public static final int PROPERTY_TYPE = 26;
  public static final int PROPERTY_MASK_OPTION_NAME = 28;
  public static final int PROPERTY_MASK = 30;
  public static final int PROPERTY_MASK_OPTION = 32;
  public static final int PROPERTY_DEFAULT = 34;
  public static final int PROPERTY_DEFAULT_VALUE = 36;
  public static final int PROPERTY_ATTRIBUTES = 38;
  public static final int PROPERTY_CONSTRAINT = 40;
  public static final int PROPERTY_CONSTRAINT_NEWLINE = 42;
  public static final int NODE = 44;
  public static final int NODE_NAMESPACE = 46;
  public static final int NODE_NODETYPE = 48;
  public static final int NODE_DEFAULT = 50;
  public static final int NODE_DEFAULT_VALUE_NAMESPACE = 52;
  public static final int NODE_DEFAULT_VALUE = 54;
  public static final int NODE_ATTRIBUTES = 56;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19, 20, 20, 21, 21, 22, 22, 23, 23, 
    24, 24, 25, 25, 26, 26, 27, 27, 28, 28
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 14848 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\2\21\1\50\4\21\1\25\1\51\1\52\5\21\2\25\1\53\31\21\1\25\1\54\1\21"+
    "\1\55\40\21\1\56\17\21\1\57\1\60\1\61\1\62\13\21\1\63\10\21\123\25\1\64\7"+
    "\25\1\65\1\66\37\21\1\25\1\66\u0582\21\1\67\u017f\21");

  /* The ZZ_CMAP_Y table has 3584 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\7\1\10\1\11\1\13\1\14"+
    "\3\0\1\15\1\16\1\17\1\20\2\21\1\22\3\21\1\22\7\21\1\23\10\21\1\24\50\21\1"+
    "\25\1\21\1\26\1\27\1\30\1\31\2\27\16\0\1\32\1\15\1\33\1\34\2\21\1\35\11\21"+
    "\1\36\21\21\1\37\1\40\23\21\1\27\1\41\3\21\1\22\1\42\1\41\4\21\1\43\1\44\4"+
    "\0\1\45\1\46\1\27\3\21\2\47\1\27\1\50\1\51\1\0\1\52\5\21\1\53\3\0\1\54\1\55"+
    "\13\21\1\56\1\45\1\57\1\60\1\0\1\61\1\27\1\62\1\63\3\21\3\0\1\64\12\21\1\65"+
    "\1\0\1\66\1\27\1\0\1\67\3\21\1\53\1\70\1\20\2\21\1\65\1\71\1\72\1\73\2\27"+
    "\3\21\1\74\10\27\1\75\1\30\6\27\1\76\2\0\1\77\1\100\6\21\1\101\2\0\1\102\1"+
    "\21\1\103\1\0\2\41\1\104\1\105\1\106\2\21\1\75\1\107\1\110\1\111\1\112\1\62"+
    "\1\113\1\103\1\0\1\114\1\51\1\104\1\115\1\106\2\21\1\75\1\116\1\117\1\120"+
    "\1\121\1\122\1\123\1\124\1\0\1\125\1\27\1\104\1\36\1\35\2\21\1\75\1\126\1"+
    "\110\1\45\1\127\1\130\1\27\1\103\1\0\1\42\1\27\1\104\1\105\1\106\2\21\1\75"+
    "\1\126\1\110\1\111\1\121\1\124\1\113\1\103\1\0\1\42\1\27\1\131\1\132\1\133"+
    "\1\134\1\135\1\132\1\21\1\136\1\137\1\140\1\141\1\27\1\124\1\0\1\27\1\42\1"+
    "\104\1\32\1\75\2\21\1\75\1\142\1\143\1\144\1\140\1\145\1\26\1\103\1\0\2\27"+
    "\1\146\1\32\1\75\2\21\1\75\1\142\1\110\1\144\1\140\1\145\1\33\1\103\1\0\1"+
    "\147\1\27\1\146\1\32\1\75\4\21\1\150\1\144\1\151\1\62\1\27\1\103\1\0\1\27"+
    "\1\40\1\146\1\21\1\22\1\40\2\21\1\35\1\152\1\22\1\153\1\154\1\0\2\27\1\155"+
    "\1\27\1\41\5\21\1\156\1\157\1\160\1\77\1\0\1\161\4\27\1\162\1\163\1\164\1"+
    "\41\1\165\1\166\1\156\1\167\1\170\1\171\1\0\1\172\4\27\1\130\2\27\1\161\1"+
    "\0\1\161\1\173\1\174\1\21\1\41\3\21\1\30\1\44\1\0\1\144\1\175\1\0\1\44\3\0"+
    "\1\50\1\176\7\27\5\21\1\53\1\0\1\177\1\0\1\161\1\65\1\200\1\201\1\202\1\203"+
    "\1\21\1\204\1\205\1\0\1\171\4\21\1\36\1\17\5\21\1\206\51\21\1\133\1\22\1\133"+
    "\5\21\1\133\4\21\1\133\1\22\1\133\1\21\1\22\7\21\1\133\10\21\1\207\4\27\2"+
    "\21\2\27\12\21\1\30\1\27\1\41\114\21\1\105\2\21\1\41\2\21\1\47\11\21\1\132"+
    "\1\130\1\27\1\21\1\32\1\210\1\27\2\21\1\210\1\27\2\21\1\211\1\27\1\21\1\32"+
    "\1\212\1\27\6\21\1\213\3\0\1\214\1\215\1\0\1\161\3\27\1\216\1\0\1\161\13\21"+
    "\1\27\5\21\1\217\10\21\1\220\1\27\3\21\1\30\1\0\1\2\1\0\1\2\1\124\1\0\3\21"+
    "\1\220\1\30\1\27\5\21\1\114\2\0\1\55\1\161\1\0\1\161\4\27\2\21\1\160\1\2\6"+
    "\21\1\175\1\77\3\0\1\111\1\0\1\161\1\0\1\161\1\43\13\27\1\221\5\21\1\213\1"+
    "\0\1\221\1\114\1\0\1\161\1\27\1\222\1\2\1\27\1\223\3\21\1\102\1\202\1\0\1"+
    "\67\4\21\1\65\1\0\1\2\1\27\4\21\1\213\2\0\1\27\1\0\1\224\1\0\1\67\3\21\1\220"+
    "\12\27\1\225\2\0\1\226\1\227\1\27\30\21\4\0\1\77\2\27\1\76\42\21\2\220\4\21"+
    "\2\220\1\21\1\230\3\21\1\220\6\21\1\32\1\170\1\231\1\30\1\232\1\114\1\21\1"+
    "\30\1\231\1\30\1\27\1\222\3\27\1\233\1\27\1\43\1\130\1\27\1\234\1\27\1\50"+
    "\1\235\1\42\1\43\2\27\1\21\1\30\3\21\1\47\2\27\1\0\1\50\1\236\1\0\1\237\1"+
    "\27\1\240\1\40\1\152\1\241\1\31\1\242\1\21\1\243\1\244\1\245\2\27\5\21\1\130"+
    "\116\27\5\21\1\22\5\21\1\22\20\21\1\30\1\246\1\247\1\27\4\21\1\36\1\17\7\21"+
    "\1\43\1\27\1\62\2\21\1\22\1\27\10\22\4\0\5\27\1\43\72\27\1\244\3\27\1\41\1"+
    "\204\1\241\1\30\1\41\11\21\1\22\1\250\1\41\12\21\1\206\1\244\4\21\1\220\1"+
    "\41\12\21\1\22\2\27\3\21\1\47\6\27\170\21\1\220\11\27\71\21\1\30\6\27\21\21"+
    "\1\30\10\27\5\21\1\220\41\21\1\30\2\21\1\0\1\247\2\27\5\21\1\160\1\76\1\251"+
    "\3\21\1\62\12\21\1\161\3\27\1\43\1\21\1\40\14\21\1\252\1\114\1\27\1\21\1\47"+
    "\11\27\1\21\1\253\1\254\2\21\1\53\2\27\1\130\6\21\1\114\1\27\1\67\5\21\1\213"+
    "\1\0\1\50\1\27\1\0\1\161\2\0\1\67\1\51\1\0\1\67\2\21\1\65\1\171\2\21\1\160"+
    "\1\0\1\2\1\27\3\21\1\30\1\100\5\21\1\53\1\0\1\237\1\43\1\0\1\161\4\27\5\21"+
    "\1\102\1\77\1\27\1\254\1\255\1\0\1\161\2\21\1\22\1\256\6\21\1\201\1\257\1"+
    "\217\2\27\1\260\1\21\1\53\1\261\1\27\3\262\1\27\2\22\22\27\4\21\1\53\1\263"+
    "\1\0\1\161\64\21\1\114\1\27\2\21\1\22\1\264\5\21\1\114\40\27\55\21\1\220\15"+
    "\21\1\26\4\27\1\22\1\27\1\264\1\265\1\21\1\75\1\22\1\170\1\266\15\21\1\26"+
    "\3\27\1\264\54\21\1\220\2\27\10\21\1\40\6\21\5\27\1\21\1\30\2\0\2\27\1\77"+
    "\1\27\1\135\2\27\1\244\3\27\1\42\1\32\20\21\1\267\1\234\1\27\1\0\1\161\1\41"+
    "\2\21\1\115\1\41\2\21\1\47\1\270\12\21\1\22\3\40\1\271\1\272\2\27\1\273\1"+
    "\21\1\142\2\21\1\22\2\21\1\274\1\21\1\220\1\21\1\220\4\27\17\21\1\47\10\27"+
    "\6\21\1\30\20\27\1\275\20\27\3\21\1\30\6\21\1\130\5\27\3\21\1\22\2\27\3\21"+
    "\1\47\6\27\3\21\1\220\4\21\1\114\1\21\1\241\5\27\23\21\1\220\1\0\1\161\52"+
    "\27\1\220\1\75\4\21\1\36\1\276\2\21\1\220\25\27\2\21\1\220\1\27\3\21\1\26"+
    "\10\27\7\21\1\270\10\27\1\277\1\76\1\142\1\41\2\21\1\114\1\120\4\27\3\21\1"+
    "\30\20\27\6\21\1\220\1\27\2\21\1\220\1\27\2\21\1\47\21\27\11\21\1\130\66\27"+
    "\1\223\6\21\1\0\1\77\3\27\1\124\1\0\2\27\1\223\5\21\1\0\1\300\2\27\3\21\1"+
    "\130\1\0\1\161\1\223\3\21\1\160\1\0\1\144\1\0\10\27\1\223\5\21\1\53\1\0\1"+
    "\301\1\27\1\0\1\161\24\27\5\21\1\53\1\0\1\27\1\0\1\161\46\27\55\21\1\22\22"+
    "\27\14\21\1\47\63\27\5\21\1\22\72\27\7\21\1\130\130\27\10\21\1\30\1\27\1\102"+
    "\4\0\1\77\1\27\1\62\1\223\1\21\14\27\1\26\153\27\1\302\1\303\2\0\1\304\1\2"+
    "\3\27\1\305\22\27\1\306\67\27\12\21\1\32\10\21\1\32\1\307\1\310\1\21\1\311"+
    "\1\142\7\21\1\36\1\312\2\32\3\21\1\313\1\170\1\40\1\75\51\21\1\220\3\21\1"+
    "\75\2\21\1\206\3\21\1\206\2\21\1\32\3\21\1\32\2\21\1\22\3\21\1\22\3\21\1\75"+
    "\3\21\1\75\2\21\1\206\1\314\6\0\1\142\3\21\1\162\1\41\1\206\1\315\1\240\1"+
    "\316\1\162\1\230\1\162\2\206\1\123\1\21\1\35\1\21\1\114\1\317\1\35\1\21\1"+
    "\114\50\27\32\21\1\22\5\27\106\21\1\30\1\27\33\21\1\220\74\27\1\122\3\27\14"+
    "\0\20\27\36\0\2\27");

  /* The ZZ_CMAP_A table has 1664 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\7\1\3\1\1\1\60\1\3\1\2\6\7\4\0\1\53\3\0\1\6\2\0\1\37\1\55\1\56\1\5\1\57"+
    "\1\52\1\54\1\42\1\4\12\44\1\41\1\0\1\35\1\36\1\47\2\0\1\14\1\15\1\21\1\23"+
    "\1\24\1\43\1\34\1\40\1\45\2\43\1\25\1\10\1\13\1\22\1\31\1\26\1\20\1\46\1\17"+
    "\1\27\1\32\1\43\1\12\1\30\1\33\1\50\1\0\1\51\1\0\1\43\1\12\1\30\1\33\4\0\6"+
    "\7\1\61\2\7\2\0\4\6\4\0\1\6\2\0\1\7\7\0\1\6\4\0\1\6\5\0\17\6\1\0\2\11\15\6"+
    "\1\16\2\6\4\0\4\6\16\0\5\6\7\0\1\6\1\0\1\6\1\0\5\6\1\0\2\6\6\0\1\6\1\0\3\6"+
    "\1\0\1\6\1\0\4\6\1\0\13\6\1\0\3\6\1\0\5\7\2\0\6\6\1\0\7\6\1\0\1\6\15\0\1\6"+
    "\1\0\15\7\1\0\1\7\1\0\2\7\1\0\2\7\1\0\1\7\3\6\5\0\5\7\6\0\1\6\4\0\3\7\5\0"+
    "\3\6\7\7\4\0\2\6\1\7\13\6\1\0\1\6\7\7\2\6\2\7\1\0\4\7\2\6\2\7\3\6\2\0\1\6"+
    "\7\0\1\7\1\6\1\7\6\6\3\7\2\0\11\6\3\7\1\6\6\0\2\7\6\6\4\7\2\6\2\0\2\7\1\6"+
    "\11\7\1\6\3\7\1\6\5\7\2\0\1\6\3\7\4\0\1\6\1\0\6\6\4\0\13\7\1\0\4\7\6\6\3\7"+
    "\1\6\2\7\1\6\7\7\2\6\2\7\2\0\2\7\1\0\3\7\1\0\10\6\2\0\2\6\2\0\6\6\1\0\1\6"+
    "\3\0\4\6\2\0\1\7\1\6\7\7\2\0\2\7\2\0\3\7\1\6\5\0\2\6\1\0\5\6\4\0\3\6\4\0\2"+
    "\6\1\0\2\6\1\0\2\6\1\0\2\6\2\0\1\7\1\0\5\7\4\0\2\7\2\0\3\7\3\0\1\7\7\0\4\6"+
    "\1\0\1\6\7\0\4\7\3\6\1\7\2\0\1\6\1\0\2\6\1\0\3\6\2\7\1\0\3\7\2\0\1\6\11\0"+
    "\1\7\1\6\1\0\6\6\3\0\3\6\1\0\4\6\3\0\2\6\1\0\1\6\1\0\2\6\3\0\2\6\3\0\2\6\4"+
    "\0\5\7\3\0\3\7\1\0\4\7\2\0\1\6\6\0\1\7\4\6\1\0\5\6\3\0\1\6\7\7\1\0\2\7\5\0"+
    "\2\7\3\0\2\7\1\0\3\6\1\0\2\6\5\0\3\6\2\0\1\6\3\7\1\0\4\7\1\6\1\0\4\6\1\0\1"+
    "\6\4\0\1\7\4\0\6\7\1\0\1\7\3\0\2\7\4\0\1\6\1\7\2\6\7\7\4\0\10\6\3\7\7\0\2"+
    "\6\1\0\1\6\2\0\2\6\1\0\1\6\2\0\1\6\6\0\4\6\1\0\3\6\1\0\1\6\1\0\1\6\2\0\2\6"+
    "\1\0\3\6\2\7\1\0\2\7\1\6\2\0\5\6\1\0\1\6\1\0\6\7\2\0\2\7\2\0\4\6\5\0\1\7\1"+
    "\0\1\7\1\0\1\7\4\0\2\7\5\6\3\7\6\0\1\7\1\0\7\7\1\6\2\7\4\6\3\7\1\6\3\7\2\6"+
    "\7\7\3\6\4\7\5\6\14\7\1\6\1\7\3\6\1\0\7\6\2\0\3\7\2\6\3\7\3\0\2\6\2\7\4\0"+
    "\1\6\1\0\2\7\4\0\4\6\10\7\3\0\1\6\3\0\2\6\1\7\5\0\3\7\2\0\1\6\1\7\1\6\5\0"+
    "\6\6\2\0\5\7\3\6\3\0\10\7\5\6\2\7\3\0\3\6\3\7\1\0\5\7\4\6\1\7\4\6\3\7\2\6"+
    "\2\0\1\6\1\0\1\6\1\0\1\6\1\0\1\6\2\0\3\6\1\0\6\6\2\0\2\6\2\60\5\7\5\0\1\6"+
    "\5\0\6\7\1\0\1\7\3\0\4\7\11\0\1\6\4\0\1\6\1\0\5\6\2\0\1\6\1\0\4\6\1\0\3\6"+
    "\2\0\4\6\5\0\5\6\4\0\1\6\4\0\4\6\3\7\2\6\5\0\2\7\2\0\3\6\6\7\1\0\2\6\2\0\4"+
    "\6\1\0\2\6\1\7\3\6\1\7\4\6\1\7\10\6\2\7\4\0\1\6\1\7\4\0\1\7\5\6\2\7\3\0\3"+
    "\6\4\0\3\6\2\7\2\0\6\6\1\0\3\7\1\0\2\7\5\0\5\6\5\0\1\6\1\7\3\6\1\0\2\6\1\0"+
    "\7\6\2\0\1\7\6\0\2\6\2\0\3\6\3\0\2\6\3\0\2\6\2\0\3\7\4\0\3\6\1\0\2\6\1\0\1"+
    "\6\5\0\1\7\2\0\1\6\3\0\1\6\2\0\2\6\3\7\1\0\2\7\1\0\3\7\2\0\1\7\2\0\1\7\4\6"+
    "\10\0\5\7\3\0\6\7\2\0\3\7\2\0\4\7\4\0\3\7\5\0\1\6\2\0\2\6\2\0\4\6\1\0\4\6"+
    "\1\0\1\6\1\0\6\6\2\0\5\6\1\0\4\6\1\0\4\6\2\0\2\7\1\0\1\6\1\0\1\6\5\0\1\6\1"+
    "\0\1\6\1\0\3\6\1\0\3\6\1\0\3\6");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\35\0\1\1\2\2\1\3\7\1\1\4\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\1\12\1\10\1\13\1\14"+
    "\5\15\1\16\1\17\1\20\5\21\1\22\1\23\2\24"+
    "\1\25\4\1\1\26\1\27\1\30\3\31\2\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\3\42\1\1"+
    "\1\43\1\1\2\2\1\3\1\1\1\44\1\45\1\0"+
    "\4\46\1\1\1\3\1\1\1\44\1\0\1\47\1\1"+
    "\2\50\1\51\1\52\1\53\1\54\7\1\1\55\1\56"+
    "\1\57\7\1\1\60\7\0\1\10\4\15\4\21\4\0"+
    "\1\31\1\42\4\0\1\61\1\3\1\60\1\46\2\0"+
    "\1\3\1\60\34\0\1\10\4\15\4\21\4\0\1\42"+
    "\2\62\1\0\1\62\1\3\2\62\1\60\1\46\2\63"+
    "\1\0\1\63\1\3\2\63\1\60\1\47\6\0\1\64"+
    "\12\0\1\65\4\0\1\60\6\0\1\10\4\15\4\21"+
    "\6\0\2\60\2\0\2\60\24\0\1\66\5\0\1\10"+
    "\1\0\1\66\3\15\1\66\3\21\1\67\3\0\6\62"+
    "\6\63\27\0\3\15\3\21\24\0\1\70\1\0\2\15"+
    "\2\21\13\0\1\71\1\0\1\72\1\15\1\21\1\0"+
    "\1\47\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\62\0\144\0\226\0\310\0\372\0\u012c\0\u015e"+
    "\0\u0190\0\u01c2\0\u01f4\0\u0226\0\u0258\0\u028a\0\u02bc\0\u02ee"+
    "\0\u0320\0\u0352\0\u0384\0\u03b6\0\u03e8\0\u041a\0\u044c\0\u047e"+
    "\0\u04b0\0\u04e2\0\u0514\0\u0546\0\u0578\0\u05aa\0\u05aa\0\u05dc"+
    "\0\u060e\0\u0640\0\u0672\0\u06a4\0\u06d6\0\u0708\0\u073a\0\u076c"+
    "\0\u05aa\0\u05aa\0\u05aa\0\u05aa\0\u079e\0\u07d0\0\u05aa\0\u05aa"+
    "\0\u0802\0\u05aa\0\u0834\0\u0866\0\u0898\0\u08ca\0\u08fc\0\u092e"+
    "\0\u05aa\0\u05aa\0\u05aa\0\u0960\0\u0992\0\u09c4\0\u09f6\0\u0a28"+
    "\0\u05aa\0\u05aa\0\u05aa\0\u0a5a\0\u0a8c\0\u0abe\0\u0af0\0\u0b22"+
    "\0\u0b54\0\u05aa\0\u0b86\0\u05aa\0\u0bb8\0\u0bea\0\u0c1c\0\u05aa"+
    "\0\u0c4e\0\u05aa\0\u0c80\0\u05aa\0\u05aa\0\u0cb2\0\u0ce4\0\u05aa"+
    "\0\u0d16\0\u0d48\0\u0d7a\0\u0dac\0\u05aa\0\u0dde\0\u0e10\0\u0e42"+
    "\0\u0e74\0\u0ea6\0\u0dde\0\u05aa\0\u0dde\0\u0ed8\0\u0f0a\0\u0f3c"+
    "\0\u0f6e\0\u0fa0\0\u0fd2\0\u1004\0\u0fa0\0\u0fa0\0\u1036\0\u1068"+
    "\0\u05aa\0\u109a\0\u05aa\0\u10cc\0\u05aa\0\u05aa\0\u10fe\0\u1130"+
    "\0\u1162\0\u1194\0\u11c6\0\u11f8\0\u122a\0\u05aa\0\u125c\0\u128e"+
    "\0\u12c0\0\u12f2\0\u1324\0\u1356\0\u1388\0\u13ba\0\u13ec\0\u141e"+
    "\0\u1450\0\u1482\0\u14b4\0\u14e6\0\u1518\0\u154a\0\u157c\0\u15ae"+
    "\0\u15e0\0\u1612\0\u1644\0\u1676\0\u16a8\0\u16da\0\u170c\0\u173e"+
    "\0\u1770\0\u17a2\0\u17d4\0\u1806\0\u1838\0\u186a\0\u189c\0\u18ce"+
    "\0\u0e10\0\u1900\0\u05aa\0\u1932\0\u1964\0\u1996\0\u19c8\0\u19fa"+
    "\0\u1a2c\0\u1a5e\0\u1a90\0\u1ac2\0\u1af4\0\u1b26\0\u1b58\0\u1b8a"+
    "\0\u1bbc\0\u1bee\0\u1c20\0\u1c52\0\u1c84\0\u1cb6\0\u1ce8\0\u1d1a"+
    "\0\u1d4c\0\u1d7e\0\u1db0\0\u1de2\0\u1e14\0\u1e46\0\u1e78\0\u1eaa"+
    "\0\u1edc\0\u1f0e\0\u1f40\0\u1f72\0\u1fa4\0\u1fd6\0\u2008\0\u203a"+
    "\0\u206c\0\u209e\0\u20d0\0\u2102\0\u2134\0\u2166\0\u2198\0\u21ca"+
    "\0\u21fc\0\u222e\0\u2260\0\u05aa\0\u18ce\0\u2292\0\u22c4\0\u1932"+
    "\0\u22f6\0\u1964\0\u2328\0\u235a\0\u19c8\0\u19fa\0\u238c\0\u23be"+
    "\0\u1a2c\0\u23f0\0\u1a5e\0\u2422\0\u2454\0\u2486\0\u24b8\0\u24ea"+
    "\0\u251c\0\u254e\0\u2580\0\u25b2\0\u05aa\0\u25e4\0\u2616\0\u2648"+
    "\0\u267a\0\u26ac\0\u26de\0\u2710\0\u2742\0\u2774\0\u27a6\0\u05aa"+
    "\0\u27d8\0\u280a\0\u283c\0\u286e\0\u05aa\0\u28a0\0\u28d2\0\u2904"+
    "\0\u2936\0\u2968\0\u299a\0\u29cc\0\u29fe\0\u2a30\0\u2a62\0\u2a94"+
    "\0\u2ac6\0\u2af8\0\u2b2a\0\u2b5c\0\u2b8e\0\u2bc0\0\u2bf2\0\u2c24"+
    "\0\u2c56\0\u2c88\0\u2cba\0\u2cec\0\u2d1e\0\u2d50\0\u2d82\0\u2db4"+
    "\0\u2486\0\u2de6\0\u2e18\0\u2e4a\0\u2e7c\0\u2eae\0\u2ee0\0\u2f12"+
    "\0\u2f44\0\u2f76\0\u2fa8\0\u2fda\0\u300c\0\u303e\0\u3070\0\u30a2"+
    "\0\u30d4\0\u3106\0\u3138\0\u316a\0\u05aa\0\u319c\0\u31ce\0\u3200"+
    "\0\u3232\0\u3264\0\u3296\0\u32c8\0\u0866\0\u32fa\0\u332c\0\u335e"+
    "\0\u0960\0\u3390\0\u33c2\0\u33f4\0\u05aa\0\u3426\0\u3458\0\u348a"+
    "\0\u34bc\0\u2c56\0\u2c88\0\u34ee\0\u2cba\0\u2cec\0\u3520\0\u2d1e"+
    "\0\u2d50\0\u3552\0\u2d82\0\u2db4\0\u3584\0\u35b6\0\u35e8\0\u361a"+
    "\0\u364c\0\u367e\0\u36b0\0\u36e2\0\u3714\0\u3746\0\u3778\0\u37aa"+
    "\0\u37dc\0\u380e\0\u3840\0\u3872\0\u38a4\0\u38d6\0\u3908\0\u393a"+
    "\0\u396c\0\u399e\0\u39d0\0\u3a02\0\u3a34\0\u3a66\0\u3a98\0\u3aca"+
    "\0\u3afc\0\u3b2e\0\u3b60\0\u3b92\0\u3bc4\0\u3bf6\0\u3c28\0\u3c5a"+
    "\0\u3c8c\0\u3cbe\0\u3cf0\0\u3d22\0\u3d54\0\u3d86\0\u3db8\0\u3dea"+
    "\0\u3e1c\0\u3e4e\0\u3e80\0\u3eb2\0\u3ee4\0\u05aa\0\u3f16\0\u3f48"+
    "\0\u3f7a\0\u3fac\0\u3fde\0\u4010\0\u4042\0\u4074\0\u40a6\0\u40d8"+
    "\0\u410a\0\u413c\0\u416e\0\u41a0\0\u41d2\0\u4204\0\u05aa\0\u4236"+
    "\0\u3f16\0\u4268\0\u429a\0\u42cc\0\u42fe\0\u4330\0\u4362\0\u4394"+
    "\0\u43c6\0\u42fe\0\u43f8";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\36\1\37\1\40\1\41\1\42\3\36\1\43\1\44"+
    "\1\36\1\45\1\46\5\36\1\47\1\36\1\50\10\36"+
    "\1\51\7\36\1\44\2\36\1\52\2\36\1\41\1\53"+
    "\2\36\1\54\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\56\1\36\25\56\1\36\1\57\1\60\1\61"+
    "\2\36\1\56\1\36\2\56\1\62\3\36\1\41\4\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\1\36\1\63"+
    "\1\36\25\63\3\36\1\63\2\36\1\63\1\36\2\63"+
    "\4\36\1\41\4\36\2\0\1\36\1\37\1\40\1\41"+
    "\1\55\1\36\1\64\1\36\1\65\2\64\1\66\1\67"+
    "\5\64\1\70\12\64\3\36\1\64\1\71\1\36\1\64"+
    "\1\36\2\64\1\72\1\36\1\73\1\36\1\41\4\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\1\36\1\74"+
    "\1\36\1\75\2\74\1\76\1\77\5\74\1\100\12\74"+
    "\3\36\1\74\2\36\1\74\1\36\2\74\4\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\3\36"+
    "\1\43\2\36\1\45\1\46\5\36\1\47\16\36\1\101"+
    "\10\36\1\102\1\41\4\36\2\0\1\36\1\103\1\104"+
    "\1\41\1\55\1\36\1\105\1\36\25\105\3\36\1\105"+
    "\2\36\1\105\1\36\2\105\4\36\1\41\4\36\2\0"+
    "\1\36\1\37\1\40\1\41\1\55\3\36\1\106\2\36"+
    "\1\107\1\110\5\36\1\111\30\36\1\41\4\36\2\0"+
    "\1\36\1\37\1\40\1\41\1\55\31\36\1\112\14\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\113\1\36\25\113\3\36\1\113\2\36\1\113"+
    "\1\36\2\113\4\36\1\41\4\36\2\0\1\36\1\37"+
    "\1\40\1\41\1\55\1\36\1\64\1\36\25\64\3\36"+
    "\1\64\1\71\1\36\1\64\1\36\2\64\3\36\1\114"+
    "\1\41\4\36\2\0\1\115\1\37\1\40\1\116\1\117"+
    "\31\115\1\57\14\115\1\41\6\115\1\36\1\37\1\40"+
    "\1\41\1\55\1\120\1\121\1\36\25\121\3\36\1\121"+
    "\2\36\1\121\1\36\2\121\4\36\1\41\1\36\1\122"+
    "\2\36\2\0\1\36\1\37\1\40\1\41\1\55\1\36"+
    "\1\123\1\36\25\123\3\36\1\123\2\36\1\123\1\36"+
    "\2\123\3\36\1\124\1\41\2\36\1\125\1\36\2\0"+
    "\1\36\1\37\1\40\1\41\1\55\1\36\1\126\1\36"+
    "\25\126\3\36\1\126\2\36\1\126\1\36\2\126\4\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\127\1\36\25\127\3\36\1\127\2\36\1\127"+
    "\1\36\2\127\1\36\1\130\2\36\1\41\2\36\1\125"+
    "\1\36\2\0\1\131\1\37\1\40\1\132\1\133\31\131"+
    "\1\57\1\134\11\131\1\73\1\135\1\41\2\131\1\125"+
    "\3\131\1\136\1\137\1\140\1\141\1\142\30\136\1\143"+
    "\1\144\14\136\1\41\4\136\2\145\1\146\1\37\1\40"+
    "\1\147\1\150\32\146\1\151\13\146\1\41\6\146\1\152"+
    "\1\137\1\140\1\153\1\154\30\152\1\155\1\36\14\152"+
    "\1\41\4\152\2\156\1\157\1\37\1\40\57\157\1\36"+
    "\1\37\1\40\1\41\1\55\32\36\1\160\13\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\1\161"+
    "\1\162\1\36\25\162\3\36\1\162\2\36\1\162\1\36"+
    "\2\162\4\36\1\41\1\36\1\163\2\36\2\0\1\36"+
    "\1\37\1\40\1\41\1\55\1\36\1\164\1\36\25\164"+
    "\3\36\1\164\2\36\1\164\1\36\2\164\4\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\1\36"+
    "\1\64\1\36\25\64\3\36\1\64\1\71\1\36\1\64"+
    "\1\36\2\64\3\36\1\165\1\41\2\36\1\166\1\36"+
    "\2\0\1\36\1\37\1\40\1\41\1\55\3\36\1\167"+
    "\1\170\2\36\1\171\1\36\1\172\2\36\1\173\7\36"+
    "\1\174\1\175\3\36\1\176\6\36\1\170\1\172\4\36"+
    "\1\41\4\36\2\0\1\36\1\37\1\40\1\41\1\55"+
    "\1\36\1\177\1\36\25\177\3\36\1\177\2\36\1\177"+
    "\1\36\2\177\4\36\1\41\4\36\2\0\1\36\1\37"+
    "\1\40\1\41\1\55\1\36\1\200\1\36\25\200\3\36"+
    "\1\200\1\71\1\36\1\200\1\36\2\200\4\36\1\41"+
    "\4\36\2\0\1\36\1\37\1\40\1\41\1\55\3\36"+
    "\1\201\1\202\2\36\1\203\1\36\1\204\2\36\1\205"+
    "\7\36\1\206\1\207\12\36\1\202\1\204\4\36\1\41"+
    "\4\36\65\0\1\37\63\0\1\41\47\0\1\41\12\0"+
    "\1\210\1\211\65\0\1\212\33\0\1\212\33\0\1\213"+
    "\64\0\1\214\54\0\1\215\64\0\1\216\53\0\1\217"+
    "\53\0\1\210\63\0\27\56\3\0\1\56\2\0\4\56"+
    "\12\0\1\56\6\0\11\56\1\220\15\56\3\0\1\56"+
    "\2\0\4\56\12\0\1\56\6\0\27\63\3\0\1\63"+
    "\2\0\4\63\12\0\1\63\6\0\27\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\3\64\1\221\23\64"+
    "\3\0\1\64\2\0\2\64\1\221\1\64\12\0\1\64"+
    "\6\0\14\64\1\222\12\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\7\64\1\223\17\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\12\64\1\224\14\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\27\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\6\0\3\74"+
    "\1\225\23\74\3\0\1\74\2\0\2\74\1\225\1\74"+
    "\12\0\1\74\6\0\14\74\1\226\12\74\3\0\1\74"+
    "\2\0\4\74\12\0\1\74\6\0\7\74\1\227\17\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\6\0\12\74"+
    "\1\230\14\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\1\0\1\103\66\0\27\105\3\0\1\105\2\0\4\105"+
    "\12\0\1\105\11\0\1\231\33\0\1\231\36\0\1\232"+
    "\54\0\1\233\64\0\1\234\47\0\27\113\3\0\1\113"+
    "\2\0\4\113\12\0\1\113\1\115\2\0\33\115\1\0"+
    "\14\115\1\0\7\115\2\0\1\116\32\115\1\0\14\115"+
    "\1\41\7\115\2\0\1\115\1\235\31\115\1\0\14\115"+
    "\1\0\6\115\6\0\27\121\3\0\7\121\12\0\1\121"+
    "\6\0\1\123\1\0\25\123\3\0\1\123\2\0\1\123"+
    "\1\0\2\123\21\0\1\126\1\0\25\126\3\0\1\126"+
    "\2\0\1\126\1\0\2\126\21\0\1\127\1\0\25\127"+
    "\3\0\1\127\2\0\1\127\1\0\2\127\13\0\1\131"+
    "\2\0\33\131\2\0\11\131\3\0\2\131\1\0\4\131"+
    "\2\0\1\132\32\131\2\0\11\131\2\0\1\41\2\131"+
    "\1\0\4\131\2\0\1\131\1\236\31\131\2\0\11\131"+
    "\3\0\2\131\1\0\3\131\1\237\2\0\34\237\1\0"+
    "\11\237\1\0\10\237\1\240\2\0\50\240\1\0\6\240"+
    "\1\0\2\241\1\242\31\0\1\243\15\0\1\242\7\0"+
    "\1\137\1\241\1\242\31\0\1\243\15\0\1\242\6\0"+
    "\1\240\2\0\1\244\47\240\1\41\7\240\2\0\1\240"+
    "\1\245\46\240\1\0\6\240\1\146\2\0\50\146\1\0"+
    "\7\146\2\0\1\147\47\146\1\41\7\146\2\0\1\146"+
    "\1\246\46\146\1\0\6\146\1\151\2\0\50\151\1\247"+
    "\6\151\1\250\2\0\50\250\1\0\7\250\2\0\1\251"+
    "\47\250\1\41\7\250\2\0\1\250\1\252\46\250\1\0"+
    "\6\250\1\157\2\0\57\157\1\253\2\0\57\253\6\0"+
    "\27\162\3\0\2\162\1\0\4\162\12\0\1\162\6\0"+
    "\27\164\3\0\1\164\2\0\4\164\12\0\1\164\14\0"+
    "\1\254\12\0\1\255\45\0\1\256\20\0\1\257\42\0"+
    "\1\260\11\0\1\261\45\0\1\262\70\0\1\263\57\0"+
    "\1\264\65\0\1\265\43\0\27\177\3\0\1\177\2\0"+
    "\4\177\12\0\1\177\6\0\27\200\3\0\1\200\2\0"+
    "\4\200\12\0\1\200\14\0\1\266\12\0\1\267\45\0"+
    "\1\270\20\0\1\271\42\0\1\272\11\0\1\273\45\0"+
    "\1\274\70\0\1\275\57\0\1\276\65\0\1\277\35\0"+
    "\1\210\2\0\57\210\5\211\1\300\54\211\12\0\1\301"+
    "\73\0\1\302\63\0\1\303\51\0\1\304\27\0\1\304"+
    "\36\0\1\305\55\0\1\306\50\0\11\56\1\307\15\56"+
    "\3\0\1\56\2\0\4\56\12\0\1\56\6\0\4\64"+
    "\1\310\22\64\3\0\1\64\2\0\4\64\12\0\1\64"+
    "\6\0\20\64\1\311\6\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\10\64\1\312\16\64\3\0\1\64"+
    "\2\0\3\64\1\312\12\0\1\64\6\0\15\64\1\313"+
    "\11\64\3\0\1\64\2\0\4\64\12\0\1\64\6\0"+
    "\4\74\1\314\22\74\3\0\1\74\2\0\4\74\12\0"+
    "\1\74\6\0\20\74\1\315\6\74\3\0\1\74\2\0"+
    "\4\74\12\0\1\74\6\0\10\74\1\316\16\74\3\0"+
    "\1\74\2\0\3\74\1\316\12\0\1\74\6\0\15\74"+
    "\1\317\11\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\12\0\1\320\75\0\1\321\51\0\1\322\27\0\1\322"+
    "\36\0\1\323\36\0\1\235\2\0\33\235\1\210\14\235"+
    "\1\210\6\235\1\236\2\0\33\236\2\210\11\236\3\210"+
    "\2\236\1\210\3\236\1\237\2\0\34\237\1\324\11\237"+
    "\1\0\10\237\1\325\2\0\33\325\1\326\14\325\1\327"+
    "\6\325\3\0\1\242\31\0\1\243\15\0\1\242\6\0"+
    "\1\325\2\0\1\330\32\325\1\326\14\325\1\331\6\325"+
    "\1\332\2\0\33\332\1\333\14\332\1\334\6\332\1\246"+
    "\2\0\50\246\1\210\6\246\1\247\2\0\34\247\1\335"+
    "\22\247\1\336\2\0\33\336\1\337\14\336\1\340\7\336"+
    "\2\0\1\341\32\336\1\337\14\336\1\342\6\336\1\343"+
    "\2\0\33\343\1\344\14\343\1\345\6\343\1\253\2\0"+
    "\34\253\1\346\22\253\13\0\1\347\73\0\1\350\45\0"+
    "\1\351\33\0\1\351\27\0\1\352\70\0\1\353\56\0"+
    "\1\354\60\0\1\355\27\0\1\355\23\0\1\356\20\0"+
    "\1\357\52\0\1\360\57\0\1\361\54\0\1\362\73\0"+
    "\1\363\45\0\1\364\33\0\1\364\27\0\1\365\70\0"+
    "\1\366\56\0\1\367\60\0\1\370\27\0\1\370\23\0"+
    "\1\371\20\0\1\372\52\0\1\373\57\0\1\374\41\0"+
    "\4\211\1\375\1\300\54\211\11\0\1\376\33\0\1\376"+
    "\24\0\1\377\100\0\1\u0100\51\0\1\u0101\66\0\1\u0102"+
    "\61\0\1\u0103\43\0\23\56\1\u0104\3\56\3\0\1\56"+
    "\2\0\4\56\12\0\1\56\6\0\3\64\1\u0105\23\64"+
    "\3\0\1\64\2\0\2\64\1\u0105\1\64\12\0\1\64"+
    "\6\0\21\64\1\u0106\5\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\11\64\1\u0107\15\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\16\64\1\u0108\10\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\3\74"+
    "\1\u0109\23\74\3\0\1\74\2\0\2\74\1\u0109\1\74"+
    "\12\0\1\74\6\0\21\74\1\u010a\5\74\3\0\1\74"+
    "\2\0\4\74\12\0\1\74\6\0\11\74\1\u010b\15\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\6\0\16\74"+
    "\1\u010c\10\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\11\0\1\u010d\33\0\1\u010d\43\0\1\u010e\51\0\1\u010f"+
    "\66\0\1\u0110\35\0\1\325\2\0\1\326\32\325\1\326"+
    "\14\325\1\u0111\6\325\3\0\1\327\32\0\1\u0112\14\0"+
    "\1\327\11\0\1\331\32\0\1\u0112\14\0\1\331\6\0"+
    "\1\332\2\0\1\333\32\332\1\333\14\332\1\u0113\6\332"+
    "\1\210\2\0\1\334\32\210\1\u0114\14\210\1\334\6\210"+
    "\1\336\2\0\1\337\32\336\1\337\14\336\1\u0115\6\336"+
    "\3\0\1\340\32\0\1\u0116\14\0\1\340\11\0\1\342"+
    "\32\0\1\u0116\14\0\1\342\6\0\1\343\2\0\1\344"+
    "\32\343\1\344\14\343\1\u0117\6\343\1\210\2\0\1\345"+
    "\32\210\1\u0118\14\210\1\345\6\210\1\253\2\0\1\u0119"+
    "\33\253\1\346\12\253\1\u011a\1\u0119\6\253\23\0\1\u011b"+
    "\55\0\1\u011c\61\0\1\u011d\64\0\1\u011e\57\0\1\u011f"+
    "\63\0\1\u0120\70\0\1\u0121\60\0\1\355\50\0\1\u0122"+
    "\60\0\1\u0123\27\0\1\u0123\36\0\1\u0124\55\0\1\u0125"+
    "\61\0\1\u0126\64\0\1\u0127\57\0\1\u0128\63\0\1\u0129"+
    "\70\0\1\u012a\60\0\1\370\50\0\1\u012b\60\0\1\u012c"+
    "\27\0\1\u012c\26\0\1\u012d\65\0\1\u012e\66\0\1\u012f"+
    "\55\0\1\u0130\61\0\1\u0131\54\0\1\u0132\54\0\10\56"+
    "\1\u0133\16\56\3\0\1\56\1\u0134\1\0\3\56\1\u0133"+
    "\12\0\1\56\6\0\5\64\1\u0135\21\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\16\64\1\u0136\10\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\12\64"+
    "\1\u0137\14\64\3\0\1\64\2\0\4\64\12\0\1\64"+
    "\6\0\12\64\1\u0138\14\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\5\74\1\u0139\21\74\3\0\1\74"+
    "\2\0\4\74\12\0\1\74\6\0\16\74\1\u013a\10\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\6\0\12\74"+
    "\1\u013b\14\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\6\0\12\74\1\u013c\14\74\3\0\1\74\2\0\4\74"+
    "\12\0\1\74\13\0\1\u013d\72\0\1\u013e\55\0\1\u013f"+
    "\61\0\1\u0140\41\0\1\u0141\2\0\1\u0142\32\u0141\1\u0143"+
    "\14\u0141\1\u0111\7\u0141\2\0\1\u0143\47\u0141\1\u0112\6\u0141"+
    "\1\u0144\2\0\1\u0145\32\u0144\1\u0146\14\u0144\1\u0113\7\u0144"+
    "\2\0\1\u0146\47\u0144\1\u0114\6\u0144\1\u0147\2\0\1\u0148"+
    "\32\u0147\1\u0149\14\u0147\1\u0115\7\u0147\2\0\1\u0149\47\u0147"+
    "\1\u0116\6\u0147\1\u014a\2\0\1\u014b\32\u014a\1\u014c\14\u014a"+
    "\1\u0117\7\u014a\2\0\1\u014c\47\u014a\1\u0118\6\u014a\1\253"+
    "\2\u014d\1\u011a\33\253\1\346\13\253\1\u011a\6\253\14\0"+
    "\1\u014e\56\0\1\u014f\33\0\1\u014f\25\0\1\u0150\33\0"+
    "\1\u0150\34\0\1\u0151\60\0\1\355\63\0\1\u0152\67\0"+
    "\1\u0153\56\0\1\u0154\46\0\1\u0155\33\0\1\u0155\30\0"+
    "\1\u0156\56\0\1\u0157\33\0\1\u0157\25\0\1\u0158\33\0"+
    "\1\u0158\34\0\1\u0159\60\0\1\370\63\0\1\u015a\67\0"+
    "\1\u015b\56\0\1\u015c\46\0\1\u015d\33\0\1\u015d\44\0"+
    "\1\u015e\51\0\1\u015f\55\0\1\u0160\61\0\1\u0161\70\0"+
    "\1\u0162\44\0\27\56\3\0\1\56\1\u0134\1\0\4\56"+
    "\12\0\1\56\4\0\1\u0163\63\0\12\64\1\u0164\14\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\6\64"+
    "\1\u0165\20\64\3\0\1\64\2\0\4\64\12\0\1\64"+
    "\6\0\6\64\1\u0166\20\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\12\74\1\u0167\14\74\3\0\1\74"+
    "\2\0\4\74\12\0\1\74\6\0\6\74\1\u0168\20\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\6\0\6\74"+
    "\1\u0169\20\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\20\0\1\u016a\55\0\1\u016b\61\0\1\u016c\45\0\1\u0141"+
    "\2\0\50\u0141\1\0\6\u0141\1\u0144\2\0\50\u0144\1\210"+
    "\6\u0144\1\u0147\2\0\50\u0147\1\0\6\u0147\1\u014a\2\0"+
    "\50\u014a\1\210\6\u014a\1\0\2\u014d\1\u016d\33\0\1\u016e"+
    "\13\0\1\u016d\25\0\1\u016f\73\0\1\u0170\44\0\1\u0171"+
    "\71\0\1\355\55\0\1\u0172\60\0\1\u0151\63\0\1\u0173"+
    "\62\0\1\u0174\56\0\1\u0175\73\0\1\u0176\44\0\1\u0177"+
    "\71\0\1\370\55\0\1\u0178\60\0\1\u0159\63\0\1\u0179"+
    "\62\0\1\u017a\70\0\1\u017b\60\0\1\u012d\52\0\1\u017c"+
    "\55\0\1\u017d\62\0\1\u017e\27\0\1\u017e\17\0\1\u017f"+
    "\63\0\22\64\1\u0135\4\64\3\0\1\64\2\0\4\64"+
    "\12\0\1\64\6\0\13\64\1\u0180\13\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\7\64\1\u0181\17\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\22\74"+
    "\1\u0139\4\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\6\0\13\74\1\u0182\13\74\3\0\1\74\2\0\4\74"+
    "\12\0\1\74\6\0\7\74\1\u0183\17\74\3\0\1\74"+
    "\2\0\4\74\12\0\1\74\30\0\1\u013d\52\0\1\u0184"+
    "\55\0\1\u0185\47\0\1\u016d\33\0\1\u016e\13\0\1\u016d"+
    "\6\0\1\u0186\2\0\34\u0186\1\0\22\u0186\22\0\1\u0187"+
    "\64\0\1\u0151\61\0\1\u0188\60\0\1\u0189\54\0\1\u018a"+
    "\55\0\1\355\70\0\1\u018b\64\0\1\u0159\61\0\1\u018c"+
    "\60\0\1\u018d\54\0\1\u018e\55\0\1\370\72\0\1\u018f"+
    "\54\0\1\u012d\67\0\1\u0190\40\0\1\u0191\3\0\1\u0191"+
    "\1\0\4\u0191\1\0\16\u0191\3\0\1\u0191\1\0\5\u0191"+
    "\5\0\1\u0191\13\0\11\64\1\u0135\15\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\17\64\1\u0192\7\64"+
    "\3\0\1\64\2\0\4\64\12\0\1\64\6\0\11\74"+
    "\1\u0139\15\74\3\0\1\74\2\0\4\74\12\0\1\74"+
    "\6\0\17\74\1\u0193\7\74\3\0\1\74\2\0\4\74"+
    "\12\0\1\74\17\0\1\u013d\67\0\1\u0194\34\0\1\u0186"+
    "\2\0\34\u0186\1\u0195\22\u0186\20\0\1\357\52\0\1\u0196"+
    "\33\0\1\u0196\30\0\1\u0173\71\0\1\u0197\55\0\1\372"+
    "\52\0\1\u0198\33\0\1\u0198\30\0\1\u0179\71\0\1\u0199"+
    "\61\0\1\u012d\43\0\16\64\1\u0135\10\64\3\0\1\64"+
    "\2\0\4\64\12\0\1\64\6\0\16\74\1\u0139\10\74"+
    "\3\0\1\74\2\0\4\74\12\0\1\74\24\0\1\u013d"+
    "\40\0\1\u019a\46\0\1\u019b\1\u019a\41\0\1\u0151\51\0"+
    "\1\355\71\0\1\u0159\51\0\1\370\37\0\2\u014d\1\u019b"+
    "\33\0\1\u016e\13\0\1\u019b\6\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[17450];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\35\0\2\11\11\1\4\11\2\1\2\11\1\1\1\11"+
    "\6\1\3\11\5\1\3\11\6\1\1\11\1\1\1\11"+
    "\3\1\1\11\1\1\1\11\1\1\2\11\2\1\1\11"+
    "\4\1\1\11\6\1\1\11\1\0\10\1\1\0\2\1"+
    "\1\11\1\1\1\11\1\1\2\11\7\1\1\11\12\1"+
    "\7\0\11\1\4\0\2\1\4\0\1\11\3\1\2\0"+
    "\2\1\34\0\11\1\4\0\1\11\2\1\1\0\10\1"+
    "\1\0\6\1\6\0\1\11\12\0\1\11\4\0\1\11"+
    "\6\0\11\1\6\0\2\1\2\0\2\1\24\0\1\11"+
    "\5\0\1\1\1\0\10\1\1\11\3\0\14\1\27\0"+
    "\6\1\24\0\1\11\1\0\4\1\13\0\1\11\1\0"+
    "\3\1\1\0\1\1\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[411];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 59: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 60: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 61: break;
          case 4: 
            { yybegin(NAMESPACE); return CndTypes.LEFT_ANGLE_BRACKET;
            }
          case 62: break;
          case 5: 
            { yybegin(NODETYPE_NAMESPACE); return CndTypes.LEFT_BRACKET;
            }
          case 63: break;
          case 6: 
            { yybegin(PROPERTY); return CndTypes.MINUS;
            }
          case 64: break;
          case 7: 
            { yybegin(NODE); return CndTypes.PLUS;
            }
          case 65: break;
          case 8: 
            { return CndTypes.NAMESPACE_NAME;
            }
          case 66: break;
          case 9: 
            { return CndTypes.EQUAL;
            }
          case 67: break;
          case 10: 
            { return CndTypes.SINGLE_QUOTE;
            }
          case 68: break;
          case 11: 
            { yybegin(YYINITIAL); return CndTypes.RIGHT_ANGLE_BRACKET;
            }
          case 69: break;
          case 12: 
            { yybegin(NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 70: break;
          case 13: 
            { return CndTypes.NODE_TYPE_NAME;
            }
          case 71: break;
          case 14: 
            { return CndTypes.COLON;
            }
          case 72: break;
          case 15: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.RIGHT_ONLY_ANGLE_BRACKET;
            }
          case 73: break;
          case 16: 
            { return CndTypes.RIGHT_BRACKET;
            }
          case 74: break;
          case 17: 
            { yybegin(SUPER_TYPES); return CndTypes.NAMESPACE_NAME;
            }
          case 75: break;
          case 18: 
            { yybegin(SUPER_TYPES_NAME); return CndTypes.COLON;
            }
          case 76: break;
          case 19: 
            { yybegin(SUPER_TYPES_NAMESPACE); return CndTypes.COMMA;
            }
          case 77: break;
          case 20: 
            { yybegin(YYINITIAL); yypushback(yylength()); return CndTypes.NODE_TYPE_NAME;
            }
          case 78: break;
          case 21: 
            { yybegin(SUPER_TYPES); return CndTypes.NODE_TYPE_NAME;
            }
          case 79: break;
          case 22: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.EQUAL;
            }
          case 80: break;
          case 23: 
            { yybegin(EXTEND); return CndTypes.NAMESPACE_NAME;
            }
          case 81: break;
          case 24: 
            { yybegin(EXTEND_NAMESPACE); return CndTypes.COMMA;
            }
          case 82: break;
          case 25: 
            { return CndTypes.ITEMTYPE_TYPE;
            }
          case 83: break;
          case 26: 
            { return CndTypes.PROPERTY_NAME;
            }
          case 84: break;
          case 27: 
            { yybegin(PROPERTY_TYPE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 85: break;
          case 28: 
            { return CndTypes.PROPERTY_TYPE;
            }
          case 86: break;
          case 29: 
            { yybegin(PROPERTY_MASK); return CndTypes.COMMA;
            }
          case 87: break;
          case 30: 
            { yybegin(PROPERTY_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 88: break;
          case 31: 
            { yybegin(PROPERTY_MASK_OPTION); return CndTypes.PROPERTY_MASK_OPTION;
            }
          case 89: break;
          case 32: 
            { return CndTypes.PROPERTY_MASK;
            }
          case 90: break;
          case 33: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.LEFT_BRACKET;
            }
          case 91: break;
          case 34: 
            { return CndTypes.PROPERTY_MASK_OPTION_VALUE;
            }
          case 92: break;
          case 35: 
            { yybegin(PROPERTY_MASK_OPTION_NAME); return CndTypes.COMMA;
            }
          case 93: break;
          case 36: 
            { yybegin(PROPERTY_CONSTRAINT); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 94: break;
          case 37: 
            { yybegin(PROPERTY_DEFAULT_VALUE); return CndTypes.EQUAL;
            }
          case 95: break;
          case 38: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 96: break;
          case 39: 
            { return CndTypes.PROPERTY_CONSTRAINT_VALUE;
            }
          case 97: break;
          case 40: 
            { return CndTypes.NODE_NAME;
            }
          case 98: break;
          case 41: 
            { yybegin(NODE_NAMESPACE); return CndTypes.LEFT_PARENTHESIS;
            }
          case 99: break;
          case 42: 
            { yybegin(NODE_NODETYPE); return CndTypes.NAMESPACE_NAME;
            }
          case 100: break;
          case 43: 
            { yybegin(NODE_NAMESPACE); return CndTypes.COMMA;
            }
          case 101: break;
          case 44: 
            { yybegin(NODE_DEFAULT); return CndTypes.RIGHT_PARENTHESIS;
            }
          case 102: break;
          case 45: 
            { yybegin(NODE_DEFAULT_VALUE_NAMESPACE); return CndTypes.EQUAL;
            }
          case 103: break;
          case 46: 
            { yybegin(NODE_DEFAULT_VALUE); return CndTypes.NAMESPACE_NAME;
            }
          case 104: break;
          case 47: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_TYPE_NAME;
            }
          case 105: break;
          case 48: 
            { return CndTypes.COMMENT;
            }
          case 106: break;
          case 49: 
            { yybegin(PROPERTY_CONSTRAINT_NEWLINE); return CndTypes.LEFT_ONLY_ANGLE_BRACKET;
            }
          case 107: break;
          case 50: 
            { yybegin(PROPERTY_ATTRIBUTES); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 108: break;
          case 51: 
            { return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 109: break;
          case 52: 
            { yybegin(NODE_ATTRIBUTES); return CndTypes.NODE_ATTRIBUTE;
            }
          case 110: break;
          case 53: 
            { return CndTypes.NODE_ATTRIBUTE;
            }
          case 111: break;
          case 54: 
            { yybegin(OPTIONS); return CndTypes.OPTION;
            }
          case 112: break;
          case 55: 
            { return CndTypes.OPTION;
            }
          case 113: break;
          case 56: 
            { yybegin(EXTENDS); return CndTypes.EXTENDS;
            }
          case 114: break;
          case 57: 
            { yybegin(ITEMTYPE); return CndTypes.ITEMTYPE;
            }
          case 115: break;
          case 58: 
            { return CndTypes.NAMESPACE_URI;
            }
          case 116: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
