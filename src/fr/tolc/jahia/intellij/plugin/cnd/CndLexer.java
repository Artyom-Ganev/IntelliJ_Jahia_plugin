/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NAMESPACES_OVER = 10;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_TYPE_DONE_BINARY = 38;
  public static final int PROPERTY_ADDENDUM_BINARY = 40;
  public static final int PROPERTY_TYPE_DONE_LONG = 42;
  public static final int PROPERTY_ADDENDUM_LONG = 44;
  public static final int PROPERTY_DEFAULT_BEGIN_LONG = 46;
  public static final int PROPERTY_TYPE_DONE_DOUBLE = 48;
  public static final int PROPERTY_ADDENDUM_DOUBLE = 50;
  public static final int PROPERTY_DEFAULT_BEGIN_DOUBLE = 52;
  public static final int PROPERTY_TYPE_DONE_BOOLEAN = 54;
  public static final int PROPERTY_ADDENDUM_BOOLEAN = 56;
  public static final int PROPERTY_DEFAULT_BEGIN_BOOLEAN = 58;
  public static final int PROPERTY_TYPE_DONE_DATE = 60;
  public static final int PROPERTY_ADDENDUM_DATE = 62;
  public static final int PROPERTY_DEFAULT_BEGIN_DATE = 64;
  public static final int PROPERTY_TYPE_DONE_STRING_TEXT = 66;
  public static final int PROPERTY_ADDENDUM_STRING_TEXT = 68;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_TEXT = 70;
  public static final int PROPERTY_TYPE_DONE_STRING_CHOICELIST = 72;
  public static final int PROPERTY_ADDENDUM_STRING_CHOICELIST = 74;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST = 76;
  public static final int PROPERTY_TYPE_DONE_WEAKREFERENCE = 78;
  public static final int PROPERTY_ADDENDUM_WEAKREFERENCE = 80;
  public static final int PROPERTY_ADDENDUM = 82;
  public static final int PROPERTY_ADDENDUM_ATTR = 84;
  public static final int PROPERTY_DEFAULT_BEGIN = 86;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 88;
  public static final int PROPERTY_PLUS_BEGIN = 90;
  public static final int PROPERTY_PLUS_NAME_DONE = 92;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 94;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 96;
  public static final int PROPERTY_PLUS_COLON_DONE = 98;
  public static final int PROPERTY_PLUS_TYPE_DONE = 100;
  public static final int PROPERTY_PLUS_ADDENDUM = 102;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 104;
  public static final int EXTEND_BEGIN = 106;
  public static final int EXTEND_NAMESPACE_DONE = 108;
  public static final int EXTEND_COLON_DONE = 110;
  public static final int EXTEND_DONE = 112;
  public static final int EXTEND_ITEM_BEGIN = 114;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  5,  5, 18, 18,  5,  5, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 18, 18, 
     5,  5,  5,  5, 37, 37,  5,  5, 38, 38, 39, 39, 40, 40, 41, 41, 
    42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 
    50, 50, 51, 51
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [13, 6, 2]
   * Total runtime size is 23160 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>8]<<6)|((ch>>2)&0x3f)]<<2)|(ch&0x3)];
  }

  /* The ZZ_CMAP_Z table has 4352 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\1\21\1\22\1\23\1\24\1\21\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\21"+
    "\1\35\1\36\1\37\2\40\1\41\7\40\1\42\1\43\1\44\1\40\1\45\1\46\2\40\31\21\1"+
    "\47\121\21\1\50\4\21\1\51\1\21\1\52\1\53\1\54\1\55\1\56\1\57\53\21\1\60\41"+
    "\40\1\21\1\61\1\62\1\21\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74"+
    "\1\75\1\76\1\77\1\100\1\101\1\102\3\40\1\103\1\104\1\105\1\106\1\107\1\110"+
    "\1\111\1\112\1\113\1\40\1\114\5\40\3\21\1\115\1\116\1\117\12\40\4\21\1\120"+
    "\17\40\2\74\1\121\41\40\2\21\1\122\1\123\3\40\1\124\100\40\1\125\13\40\1\126"+
    "\24\40\1\127\1\130\1\40\1\131\1\132\1\133\1\134\2\40\1\135\15\40\1\136\5\40"+
    "\1\137\2\40\1\140\16\40\246\21\1\141\20\21\1\142\1\143\25\74\1\144\51\40\2"+
    "\21\1\145\u0b05\40\1\146\1\147\u02fe\40");

  /* The ZZ_CMAP_Y table has 6656 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\2\0\1\1\1\2\3\0\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\1\20\1\21\1\22\1\23\1\14\1\15\1\16\1\17\1\20\1\21\1\24\1\25\1\0\1\26\6"+
    "\0\1\27\1\30\1\31\1\32\1\3\1\33\1\31\1\3\5\34\1\35\7\34\1\35\16\34\1\36\22"+
    "\34\1\37\120\34\1\40\1\41\2\34\1\40\3\3\1\34\1\42\1\3\1\43\4\3\34\44\1\34"+
    "\1\45\1\41\1\46\1\3\1\31\1\35\1\45\4\34\1\47\24\34\1\47\42\34\1\50\1\44\1"+
    "\51\47\34\2\52\1\53\10\34\1\35\1\33\1\3\1\53\11\34\1\3\1\54\1\55\12\44\1\56"+
    "\1\57\1\56\2\3\6\34\1\35\1\3\1\35\3\3\1\0\1\60\1\54\1\3\2\44\1\61\1\3\12\34"+
    "\1\62\5\44\2\63\1\64\1\41\1\65\30\34\1\66\1\44\1\67\1\44\1\70\1\71\1\72\2"+
    "\63\1\73\1\74\3\3\1\25\1\75\7\34\6\44\1\61\1\53\25\34\1\76\2\44\1\77\3\3\2"+
    "\63\1\73\7\34\1\62\2\44\1\40\1\31\1\3\5\34\1\76\1\100\2\44\2\101\1\102\4\3"+
    "\6\34\1\101\21\3\1\103\2\34\1\104\1\52\1\105\12\3\1\106\6\44\1\107\1\44\15"+
    "\34\1\76\1\110\4\44\1\101\1\44\2\34\1\76\1\111\2\63\1\53\1\34\1\112\1\34\1"+
    "\113\1\53\1\34\2\74\5\34\1\45\1\34\1\43\1\41\1\40\1\110\1\44\2\114\1\115\1"+
    "\3\1\116\1\3\1\47\1\76\1\111\2\63\1\117\1\3\1\54\1\3\1\55\1\53\1\35\1\120"+
    "\1\74\5\34\1\45\1\34\1\45\1\121\1\40\1\71\1\61\1\116\1\114\1\102\1\122\1\3"+
    "\1\53\1\43\1\3\1\111\2\63\1\72\1\123\2\3\1\55\1\53\1\34\2\47\5\34\1\45\1\34"+
    "\1\45\1\53\1\40\1\110\1\44\2\56\1\102\1\42\3\3\1\76\1\111\2\63\1\124\1\3\1"+
    "\125\1\3\1\55\1\53\1\34\2\74\5\34\1\45\1\34\1\45\1\53\1\40\1\110\1\44\2\114"+
    "\1\102\1\3\1\126\1\3\1\47\1\76\1\111\2\63\1\33\3\3\1\127\1\53\1\35\1\41\1"+
    "\45\1\40\1\121\1\45\1\120\1\42\1\35\1\41\2\34\1\40\1\126\1\61\1\126\1\71\1"+
    "\102\1\42\1\116\3\3\1\111\2\63\2\3\1\124\1\3\1\113\1\53\1\34\2\45\5\34\1\45"+
    "\2\34\1\112\1\40\1\66\1\44\2\71\1\102\1\3\1\57\1\130\1\3\1\76\1\111\2\63\4"+
    "\3\1\131\1\53\1\34\2\45\5\34\1\45\2\34\1\53\1\40\1\110\1\44\2\71\1\102\1\3"+
    "\1\57\1\3\1\31\1\76\1\111\2\63\1\121\3\3\1\131\1\53\1\34\2\45\11\34\1\35\1"+
    "\66\1\44\2\71\1\115\1\3\1\116\1\3\1\106\1\76\1\111\2\63\2\3\1\41\1\34\1\126"+
    "\1\53\3\34\1\35\1\41\5\34\1\47\2\34\1\33\1\34\1\35\1\132\1\116\1\44\1\133"+
    "\2\44\1\3\1\134\2\135\1\126\3\3\1\53\13\34\1\75\1\44\1\61\1\54\1\34\1\62\1"+
    "\44\1\61\2\63\1\64\11\3\1\121\1\74\1\43\1\33\1\3\1\34\1\53\1\34\1\53\1\136"+
    "\1\41\1\53\1\75\1\44\1\56\1\77\1\34\1\43\1\44\1\102\2\63\1\64\1\34\10\3\1"+
    "\42\5\3\1\102\1\3\2\63\1\64\2\3\1\137\1\122\1\126\2\34\1\53\10\34\1\42\1\55"+
    "\4\44\1\71\1\34\1\101\2\44\1\55\10\44\1\140\1\3\1\132\16\3\12\34\1\62\4\44"+
    "\1\141\2\63\1\64\1\3\1\34\1\76\1\72\1\76\1\110\1\70\1\44\1\72\1\101\1\65\2"+
    "\34\1\76\2\44\1\100\2\63\1\142\1\102\11\34\1\47\1\3\1\33\12\34\1\35\123\34"+
    "\1\45\1\40\1\34\1\35\1\45\1\40\12\34\1\45\1\40\10\34\1\45\1\40\1\34\1\35\1"+
    "\45\1\40\3\34\1\35\16\34\1\45\1\40\20\34\1\35\1\55\10\3\4\34\4\3\25\34\1\143"+
    "\1\52\1\144\1\53\132\34\1\74\4\34\1\145\5\34\1\35\1\3\22\34\1\35\1\41\1\104"+
    "\1\52\1\105\1\3\3\34\1\45\1\76\1\140\2\3\4\34\1\76\1\140\2\3\4\34\1\76\3\3"+
    "\3\34\1\45\1\146\3\3\15\34\10\44\1\120\1\54\1\123\2\63\1\64\7\3\1\116\1\102"+
    "\2\63\1\64\1\3\26\34\2\3\12\34\1\147\1\3\21\34\1\40\2\3\7\34\1\150\3\44\1"+
    "\3\3\44\2\3\1\111\2\63\7\34\1\40\1\34\1\42\2\3\13\34\1\3\4\44\1\65\1\34\1"+
    "\102\1\3\2\63\1\64\11\3\5\34\1\62\1\44\1\3\15\34\1\101\1\44\1\61\7\44\1\114"+
    "\2\63\1\64\1\3\2\63\1\64\2\3\1\120\2\3\3\52\1\151\20\3\1\44\1\65\13\34\4\44"+
    "\1\65\1\34\1\3\2\63\1\64\3\3\1\116\2\44\3\3\1\141\7\34\1\101\2\44\1\72\2\63"+
    "\1\73\12\34\1\76\3\44\3\3\11\34\5\44\2\3\2\63\1\64\1\53\2\63\1\73\10\34\1"+
    "\40\24\3\1\61\5\44\1\65\1\75\1\76\1\152\1\144\1\3\60\34\11\44\1\107\3\52\1"+
    "\144\1\3\1\44\5\34\1\40\1\34\1\40\11\34\1\40\1\34\1\40\2\34\2\136\7\34\1\40"+
    "\15\34\1\45\1\34\1\43\1\41\1\45\1\34\1\42\1\34\1\41\1\34\1\3\3\34\1\42\1\41"+
    "\1\45\1\34\1\42\2\153\1\154\1\0\6\3\1\155\1\156\3\3\1\120\1\42\4\3\1\42\1"+
    "\3\1\157\1\0\1\60\1\160\1\0\1\33\2\3\1\120\4\3\3\34\1\42\6\161\1\162\5\3\3"+
    "\44\1\163\1\164\1\113\2\44\1\140\3\3\1\31\1\120\1\41\2\34\1\33\1\53\1\40\1"+
    "\3\1\43\1\165\1\47\2\34\1\40\1\34\1\3\1\53\1\40\1\31\4\3\12\34\1\42\212\3"+
    "\1\166\14\52\1\144\5\3\13\34\1\35\13\34\1\35\41\34\1\42\1\120\1\62\1\72\3"+
    "\3\11\34\1\47\1\3\1\33\16\34\1\3\1\120\3\3\1\116\5\34\1\35\2\3\1\34\1\35\1"+
    "\34\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34\1\35\1\34\1\35\10\44"+
    "\13\3\1\120\64\3\1\167\1\53\6\3\1\53\1\34\1\76\1\44\1\53\1\40\1\34\1\42\1"+
    "\53\24\34\1\35\1\57\2\53\25\34\1\35\1\34\1\3\1\53\11\34\1\40\1\53\26\34\1"+
    "\35\4\3\6\34\1\35\15\3\61\34\1\40\22\3\63\34\1\104\1\52\1\144\12\3\43\34\1"+
    "\42\20\3\13\34\1\40\3\34\1\42\4\34\2\63\1\73\5\3\13\34\1\62\1\151\2\44\1\170"+
    "\6\34\1\52\1\171\24\34\1\102\10\3\1\120\2\34\1\41\31\34\1\74\1\172\1\34\3"+
    "\52\2\34\1\172\1\144\2\52\17\3\1\106\2\34\2\173\1\62\5\34\1\62\1\44\4\3\1"+
    "\174\1\3\15\34\3\3\1\72\14\34\4\44\1\140\2\3\2\63\1\64\1\3\4\44\1\72\1\34"+
    "\1\120\1\125\2\63\1\73\6\34\1\76\1\44\1\102\5\34\1\62\3\44\3\3\7\34\1\42\1"+
    "\44\13\34\1\62\3\44\1\140\2\3\1\120\2\63\1\64\1\3\4\52\2\135\1\175\1\151\12"+
    "\34\1\101\2\44\1\61\2\3\1\62\2\34\1\102\2\63\1\64\1\3\5\34\1\35\1\176\1\52"+
    "\14\34\1\110\1\70\1\65\1\76\1\147\5\3\1\120\1\40\2\34\1\62\1\44\1\41\1\177"+
    "\2\3\1\53\1\35\1\53\1\35\1\53\1\35\2\3\1\34\1\35\1\34\1\35\12\52\1\151\2\52"+
    "\1\144\2\3\24\52\10\34\1\62\1\44\1\61\1\102\2\63\1\64\1\3\51\34\3\3\5\34\1"+
    "\35\1\120\14\34\1\3\33\34\1\40\32\34\1\40\11\3\1\34\1\35\2\3\1\120\1\34\1"+
    "\3\1\200\2\34\1\45\2\34\1\35\1\34\1\43\1\47\1\45\32\34\1\40\7\3\1\120\32\34"+
    "\1\40\4\3\20\34\1\41\15\34\12\3\3\34\1\174\4\44\4\3\1\44\1\107\2\52\1\120"+
    "\1\42\5\3\1\53\6\3\1\124\1\3\1\34\1\45\41\34\1\201\1\3\1\174\2\3\2\63\1\64"+
    "\1\3\1\53\5\34\1\35\1\120\1\53\5\34\1\35\2\3\1\41\25\34\1\35\1\41\1\34\1\41"+
    "\1\34\1\41\1\34\1\41\1\42\1\30\1\202\4\3\1\203\1\3\3\34\1\53\5\34\1\35\4\34"+
    "\1\35\1\47\3\34\1\40\3\34\1\40\10\3\36\34\1\35\21\3\15\34\1\42\41\3\1\122"+
    "\40\3\7\34\1\42\14\34\1\42\3\3\1\105\7\3\7\34\1\172\4\3\6\34\1\35\1\3\12\52"+
    "\1\151\1\3\7\34\1\40\11\34\1\3\2\34\1\53\1\40\12\3\47\34\1\40\2\63\1\64\25"+
    "\3\12\52\2\3\15\52\47\3\115\52\1\151\2\3\5\52\1\144\2\3\2\52\46\3\1\34\1\40"+
    "\1\45\12\34\1\47\1\42\1\74\5\34\1\40\2\3\5\52\1\151\2\3\7\52\1\151\20\3\4"+
    "\52\1\151\1\144\2\3\5\34\1\40\2\3\6\34\1\40\21\3\16\34\1\3\1\41\20\3\1\101"+
    "\1\57\1\3\1\44\1\34\2\53\6\34\1\3\1\61\1\116\10\3\7\34\1\42\7\52\1\105\10"+
    "\3\2\52\1\204\6\52\1\151\6\3\15\34\1\40\2\3\5\34\1\40\2\3\4\34\1\35\3\3\4"+
    "\52\1\144\33\3\22\34\1\42\15\3\14\52\1\151\3\3\14\52\1\151\3\3\1\141\15\34"+
    "\3\44\1\61\7\3\1\111\2\63\3\3\1\106\1\141\13\34\2\44\1\61\1\32\4\3\6\34\1"+
    "\42\1\3\2\63\1\64\1\3\1\141\10\34\1\62\3\44\1\205\2\63\4\3\11\52\1\206\2\3"+
    "\1\141\13\34\1\62\3\44\1\65\1\42\1\166\1\105\2\63\1\207\1\105\10\3\4\52\1"+
    "\210\11\52\22\3\1\52\1\151\1\211\1\210\3\52\1\210\2\52\1\105\1\3\16\52\1\151"+
    "\1\3\2\135\1\212\1\3\1\52\1\204\1\52\2\213\5\52\1\211\1\52\1\211\1\204\1\144"+
    "\2\52\2\213\1\144\1\105\1\106\1\3\1\204\1\52\1\166\1\52\1\105\1\52\1\105\102"+
    "\3\21\52\1\210\2\3\2\135\1\212\51\3\15\52\1\144\2\52\1\105\5\3\1\52\1\144"+
    "\10\3\20\52\2\105\2\3\2\135\1\212\11\3\12\34\1\62\3\44\2\3\2\63\1\64\15\3"+
    "\6\52\1\144\1\204\3\52\1\3\2\135\1\212\131\3\20\52\2\135\1\212\4\3\1\106\60"+
    "\3\16\52\1\105\1\3\33\34\1\172\12\52\1\144\31\3\30\34\1\172\2\52\1\151\4\3"+
    "\61\52\57\3\13\34\1\35\64\3\21\52\1\151\56\3\16\34\1\42\1\3\7\52\1\151\2\135"+
    "\1\212\31\3\7\52\1\144\1\52\1\105\2\3\15\52\1\151\2\3\1\52\3\3\2\135\1\212"+
    "\1\3\1\106\5\52\1\3\1\204\4\52\34\3\21\34\1\42\2\3\1\101\12\44\1\61\3\3\1"+
    "\116\1\141\3\34\30\3\1\40\77\3\32\52\1\151\1\3\3\52\1\105\2\52\1\105\1\3\2"+
    "\52\1\144\1\214\61\3\1\55\1\102\1\55\1\215\1\0\1\216\1\44\1\61\1\55\1\44\7"+
    "\3\1\126\1\102\44\3\1\126\1\140\56\3\25\34\1\45\21\34\1\45\1\31\1\121\1\53"+
    "\1\45\2\34\1\47\1\53\1\34\1\53\17\34\1\47\1\35\1\53\1\34\1\45\1\34\1\45\6"+
    "\34\1\47\1\35\1\34\1\43\1\41\1\34\1\45\124\34\1\40\6\34\1\45\5\34\1\35\7\34"+
    "\1\35\6\34\1\45\7\34\1\45\5\34\1\35\7\34\1\35\6\34\1\45\7\34\1\45\5\34\1\35"+
    "\2\34\1\111\14\63\15\52\1\151\1\106\14\52\1\105\1\3\1\125\3\3\1\105\4\3\1"+
    "\106\1\52\1\204\3\52\24\3\61\52\1\105\2\3\1\52\1\151\12\3\1\34\1\53\6\34\1"+
    "\121\1\74\1\53\1\34\1\35\1\34\1\136\1\3\1\31\1\120\1\136\1\53\1\121\1\74\2"+
    "\136\1\121\1\74\1\35\1\34\1\35\1\34\1\53\1\43\2\34\1\47\4\34\1\3\2\53\1\47"+
    "\4\34\35\3\6\52\1\144\1\3\6\52\1\144\1\3\6\52\1\144\35\3\65\34\1\35\12\3\15"+
    "\34\1\42\2\3\67\34\1\40\140\52\1\144\27\3\7\34\1\40\70\3\1\32\7\3\30\0\40"+
    "\3\74\44\4\3");

  /* The ZZ_CMAP_A table has 572 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\5\23\1\3\1\1\1\77\1\3\1\2\2\23\4\0\1\3\3\0\1\6\2\0\1\11\1\47\1\50\1\5\1\46"+
    "\1\27\1\45\1\17\1\4\1\66\1\52\1\67\1\70\2\71\2\24\1\53\1\24\1\16\1\0\1\7\1"+
    "\10\1\22\2\0\1\41\1\42\1\44\1\37\1\40\1\55\1\65\1\12\1\32\1\20\1\57\1\43\1"+
    "\30\1\34\1\35\1\14\1\20\1\36\1\21\1\13\1\54\1\64\1\61\1\33\1\51\1\60\1\25"+
    "\1\0\1\26\1\0\1\20\1\33\1\51\1\60\4\0\2\23\1\73\2\23\1\72\1\0\4\6\4\0\1\75"+
    "\2\0\1\23\3\0\1\75\2\0\7\75\1\0\2\31\5\75\1\15\2\75\4\0\3\75\3\0\1\75\1\0"+
    "\1\75\1\0\4\76\1\75\1\0\4\75\1\0\1\74\2\75\1\0\3\75\1\0\1\76\2\74\2\75\4\74"+
    "\1\0\3\75\3\0\1\6\1\0\5\76\1\0\1\76\1\0\2\76\1\0\1\23\3\0\3\76\1\0\3\75\1"+
    "\76\6\63\2\0\1\76\3\75\1\0\1\75\3\76\1\23\1\0\2\76\2\75\2\76\1\0\4\76\2\75"+
    "\2\63\3\75\2\0\2\75\1\76\4\75\3\76\1\75\2\0\2\76\1\75\1\76\1\75\5\76\2\0\1"+
    "\75\1\74\3\75\4\74\6\0\1\74\3\76\1\74\1\76\1\75\2\76\2\0\2\63\1\74\3\75\1"+
    "\74\4\76\2\0\3\76\1\75\4\0\1\76\2\75\2\6\3\0\1\75\1\0\2\75\2\0\1\76\2\0\1"+
    "\75\1\76\3\0\1\6\3\0\1\74\4\0\2\76\2\0\1\76\3\75\1\74\2\0\1\74\2\76\2\0\1"+
    "\76\1\0\1\76\1\0\1\76\3\0\6\62\1\0\1\75\1\0\1\75\1\0\1\76\1\0\2\76\3\0\3\76"+
    "\1\75\2\63\2\76\1\75\1\74\2\0\2\74\2\0\1\72\4\75\1\0\2\76\1\75\1\76\1\75\1"+
    "\0\1\75\2\74\1\0\3\74\1\0\1\76\2\75\1\0\7\72\1\23\2\77\5\23\1\72\3\0\1\72"+
    "\2\0\2\23\7\6\1\0\1\76\4\74\1\76\2\74\1\75\1\0\1\56\1\75\2\0\2\74\1\72\3\0"+
    "\2\76\1\0\1\75\3\74\1\76\3\75\1\74\2\75\1\76\1\75\1\6\3\0\2\62\2\74\2\0\1"+
    "\75\1\76\1\75\2\76\2\0\1\75\1\76\2\75\2\0\1\23\1\0\2\6\2\0\3\23\1\0\3\74\1"+
    "\76\1\0\2\63\2\0\1\74\1\0\2\63\1\74\1\0\2\74\1\0\2\74\1\0\2\74\2\62\2\0\1"+
    "\74\2\0\1\74\1\0\2\74\1\0\3\76\4\23\1\76");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\64\0\1\1\2\2\1\3\1\1\1\4\1\5\3\1"+
    "\1\6\1\7\1\1\1\10\3\1\1\11\1\12\1\13"+
    "\1\14\1\15\3\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\5\1\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\27\1\33\1\1\1\34\1\27\1\35\2\1"+
    "\1\36\1\27\1\37\2\1\1\40\1\27\1\41\1\1"+
    "\1\42\1\27\1\43\2\44\1\45\12\1\1\46\1\1"+
    "\1\46\2\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\3\1\1\56\1\57\1\60\1\61\5\1\1\62\5\0"+
    "\1\63\2\0\1\64\21\0\1\65\1\44\50\0\1\66"+
    "\22\0\2\46\2\0\1\67\5\0\1\62\11\0\1\70"+
    "\2\0\1\71\1\0\1\72\11\0\1\73\21\0\1\74"+
    "\10\0\1\75\30\0\1\76\1\77\1\100\21\0\1\101"+
    "\10\0\1\102\14\0\1\103\3\0\1\104\1\105\1\0"+
    "\1\106\14\0\1\107\1\110\1\111\26\0\1\76\22\0"+
    "\1\112\15\0\1\76\16\0\1\113\11\0\1\112\27\0"+
    "\1\112\25\0\1\113\3\0\1\112\111\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[595];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\100\0\200\0\300\0\u0100\0\u0140\0\u0180\0\u01c0"+
    "\0\u0200\0\u0240\0\u0280\0\u02c0\0\u0300\0\u0340\0\u0380\0\u03c0"+
    "\0\u0400\0\u0440\0\u0480\0\u04c0\0\u0500\0\u0540\0\u0580\0\u05c0"+
    "\0\u0600\0\u0640\0\u0680\0\u06c0\0\u0700\0\u0740\0\u0780\0\u07c0"+
    "\0\u0800\0\u0840\0\u0880\0\u08c0\0\u0900\0\u0940\0\u0980\0\u09c0"+
    "\0\u0a00\0\u0a40\0\u0a80\0\u0ac0\0\u0b00\0\u0b40\0\u0b80\0\u0bc0"+
    "\0\u0c00\0\u0c40\0\u0c80\0\u0cc0\0\u0d00\0\u0d00\0\u0d40\0\u0d80"+
    "\0\u0dc0\0\u0d00\0\u0d00\0\u0e00\0\u0e40\0\u0e80\0\u0d00\0\u0d00"+
    "\0\u0ec0\0\u0f00\0\u0f40\0\u0f80\0\u0fc0\0\u1000\0\u0d00\0\u1040"+
    "\0\u0d00\0\u0d00\0\u1080\0\u10c0\0\u1100\0\u1140\0\u0d00\0\u1180"+
    "\0\u11c0\0\u0d00\0\u1200\0\u0d00\0\u1240\0\u1280\0\u12c0\0\u1300"+
    "\0\u1340\0\u0d00\0\u0d00\0\u1380\0\u0d00\0\u13c0\0\u0d00\0\u1400"+
    "\0\u0d00\0\u1440\0\u0d00\0\u1480\0\u0d00\0\u14c0\0\u1500\0\u0d00"+
    "\0\u1540\0\u0d00\0\u1580\0\u15c0\0\u0d00\0\u1600\0\u0d00\0\u1640"+
    "\0\u0d00\0\u1680\0\u0d00\0\u16c0\0\u1700\0\u0d00\0\u1740\0\u1780"+
    "\0\u17c0\0\u1800\0\u1840\0\u1880\0\u18c0\0\u1900\0\u1940\0\u1980"+
    "\0\u19c0\0\u1a00\0\u1a40\0\u0d00\0\u1a80\0\u0d00\0\u1ac0\0\u0d00"+
    "\0\u1b00\0\u0d00\0\u0d00\0\u1b40\0\u1b80\0\u1bc0\0\u1c00\0\u0d00"+
    "\0\u1c40\0\u0d00\0\u1c80\0\u1cc0\0\u1d00\0\u1d40\0\u1d80\0\u1dc0"+
    "\0\u1e00\0\u1e40\0\u1e80\0\u1ec0\0\u0f40\0\u0d00\0\u1f00\0\u0fc0"+
    "\0\u0d00\0\u1f40\0\u1f80\0\u1fc0\0\u2000\0\u2040\0\u2080\0\u20c0"+
    "\0\u2100\0\u2140\0\u2180\0\u21c0\0\u1440\0\u2200\0\u2240\0\u2280"+
    "\0\u22c0\0\u1640\0\u1640\0\u2300\0\u2340\0\u2380\0\u23c0\0\u2400"+
    "\0\u2440\0\u2480\0\u24c0\0\u2500\0\u2540\0\u2580\0\u25c0\0\u2600"+
    "\0\u2640\0\u2680\0\u26c0\0\u2700\0\u2740\0\u2780\0\u1bc0\0\u27c0"+
    "\0\u2800\0\u2840\0\u2880\0\u28c0\0\u2900\0\u2940\0\u2980\0\u29c0"+
    "\0\u2a00\0\u2a40\0\u2a80\0\u2ac0\0\u2b00\0\u2b40\0\u2b80\0\u2bc0"+
    "\0\u2c00\0\u2c40\0\u2c80\0\u2cc0\0\u21c0\0\u2d00\0\u2d40\0\u2d80"+
    "\0\u2dc0\0\u2e00\0\u2e40\0\u2e80\0\u2ec0\0\u2f00\0\u2f40\0\u2f80"+
    "\0\u2fc0\0\u3000\0\u3040\0\u3080\0\u30c0\0\u3100\0\u3140\0\u3180"+
    "\0\u2700\0\u31c0\0\u3200\0\u3240\0\u3280\0\u32c0\0\u3300\0\u3340"+
    "\0\u3380\0\u0d00\0\u33c0\0\u3400\0\u3440\0\u3480\0\u34c0\0\u3500"+
    "\0\u3540\0\u3580\0\u35c0\0\u0d00\0\u3600\0\u3640\0\u0d00\0\u3680"+
    "\0\u0d00\0\u36c0\0\u3700\0\u3740\0\u3780\0\u37c0\0\u3800\0\u3840"+
    "\0\u3880\0\u38c0\0\u0d00\0\u3900\0\u3940\0\u3980\0\u39c0\0\u3a00"+
    "\0\u3a40\0\u3a80\0\u3ac0\0\u3b00\0\u3b40\0\u3b80\0\u3bc0\0\u3c00"+
    "\0\u3c40\0\u3c80\0\u3cc0\0\u3d00\0\u0d00\0\u3d40\0\u3d80\0\u3dc0"+
    "\0\u3e00\0\u3e40\0\u3e80\0\u3ec0\0\u3f00\0\u0d00\0\u3f40\0\u3f80"+
    "\0\u3fc0\0\u4000\0\u4040\0\u4080\0\u40c0\0\u4100\0\u4140\0\u4180"+
    "\0\u41c0\0\u4200\0\u4240\0\u4280\0\u42c0\0\u4300\0\u4340\0\u4380"+
    "\0\u43c0\0\u4400\0\u4440\0\u4480\0\u44c0\0\u4500\0\u4540\0\u0d00"+
    "\0\u0d00\0\u4580\0\u45c0\0\u4600\0\u4640\0\u4680\0\u46c0\0\u4700"+
    "\0\u4740\0\u4780\0\u47c0\0\u4800\0\u4840\0\u4880\0\u48c0\0\u4900"+
    "\0\u4940\0\u4980\0\u0d00\0\u49c0\0\u4a00\0\u4a40\0\u4a80\0\u4ac0"+
    "\0\u4b00\0\u4540\0\u4b40\0\u0d00\0\u4b80\0\u4bc0\0\u4c00\0\u4c40"+
    "\0\u4c80\0\u4cc0\0\u4d00\0\u4d40\0\u4d80\0\u4dc0\0\u4e00\0\u4e40"+
    "\0\u0d00\0\u4e80\0\u4ec0\0\u4f00\0\u0d00\0\u4a80\0\u4f40\0\u0d00"+
    "\0\u4f80\0\u4fc0\0\u5000\0\u5040\0\u5080\0\u50c0\0\u5100\0\u5140"+
    "\0\u5180\0\u51c0\0\u5200\0\u5240\0\u0d00\0\u0d00\0\u0d00\0\u5280"+
    "\0\u52c0\0\u5300\0\u5340\0\u5380\0\u53c0\0\u5400\0\u5440\0\u5480"+
    "\0\u54c0\0\u5500\0\u5540\0\u5580\0\u55c0\0\u5600\0\u5640\0\u5680"+
    "\0\u56c0\0\u5700\0\u5740\0\u5780\0\u57c0\0\u5800\0\u5840\0\u5880"+
    "\0\u58c0\0\u5900\0\u5940\0\u5980\0\u59c0\0\u5a00\0\u5a40\0\u5a80"+
    "\0\u5ac0\0\u5b00\0\u5b40\0\u5b80\0\u5bc0\0\u5c00\0\u5c40\0\u5c80"+
    "\0\u5cc0\0\u5d00\0\u5d40\0\u5d80\0\u5dc0\0\u5e00\0\u5e40\0\u5e80"+
    "\0\u5ec0\0\u5cc0\0\u5f00\0\u5f40\0\u5f80\0\u5fc0\0\u0d00\0\u6000"+
    "\0\u6040\0\u6080\0\u60c0\0\u6100\0\u6140\0\u6180\0\u61c0\0\u6200"+
    "\0\u6240\0\u6280\0\u62c0\0\u6300\0\u6340\0\u6380\0\u63c0\0\u6400"+
    "\0\u6440\0\u6480\0\u64c0\0\u6500\0\u6540\0\u6580\0\u65c0\0\u6600"+
    "\0\u6640\0\u6680\0\u66c0\0\u6700\0\u6740\0\u6780\0\u67c0\0\u6800"+
    "\0\u6840\0\u6880\0\u68c0\0\u6900\0\u6940\0\u6980\0\u69c0\0\u6a00"+
    "\0\u6a40\0\u6a80\0\u6ac0\0\u6b00\0\u6b40\0\u6b80\0\u6bc0\0\u6c00"+
    "\0\u6c40\0\u6c80\0\u6cc0\0\u6d00\0\u6d40\0\u6d80\0\u6dc0\0\u6e00"+
    "\0\u6e40\0\u6e80\0\u6ec0\0\u6f00\0\u6f40\0\u6f80\0\u6fc0\0\u7000"+
    "\0\u7040\0\u7080\0\u70c0\0\u7100\0\u7140\0\u0d00\0\u7180\0\u71c0"+
    "\0\u7200\0\u0d00\0\u7240\0\u7280\0\u72c0\0\u7300\0\u7340\0\u7380"+
    "\0\u73c0\0\u7400\0\u7440\0\u7480\0\u74c0\0\u7500\0\u7540\0\u7580"+
    "\0\u75c0\0\u7600\0\u7640\0\u7680\0\u76c0\0\u7700\0\u7740\0\u7780"+
    "\0\u77c0\0\u7800\0\u7840\0\u7880\0\u78c0\0\u7900\0\u7940\0\u7980"+
    "\0\u79c0\0\u7a00\0\u7a40\0\u7a80\0\u7ac0\0\u7b00\0\u7b40\0\u7b80"+
    "\0\u7bc0\0\u7c00\0\u7c40\0\u7c80\0\u7cc0\0\u7d00\0\u7d40\0\u7d80"+
    "\0\u7dc0\0\u7e00\0\u7e40\0\u7e80\0\u7ec0\0\u7f00\0\u7f40\0\u7f80"+
    "\0\u7fc0\0\u8000\0\u8040\0\u8080\0\u80c0\0\u8100\0\u8140\0\u8180"+
    "\0\u81c0\0\u8200\0\u8240\0\u8280\0\u82c0\0\u8300\0\u8340\0\u8380"+
    "\0\u83c0\0\u8400\0\u8440";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[595];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\65\1\66\1\67\1\70\1\71\2\65\1\72\15\65"+
    "\1\73\3\65\2\74\2\65\1\75\2\65\1\76\4\65"+
    "\1\77\1\100\24\65\1\0\3\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\1\65\1\102\3\65\4\102\2\65"+
    "\2\102\6\65\15\102\4\65\1\102\2\65\6\102\2\65"+
    "\2\102\5\65\1\0\1\65\1\102\1\65\1\0\1\65"+
    "\1\66\1\67\1\70\1\101\3\65\1\103\62\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\5\65"+
    "\1\104\60\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\4\65\1\105\61\65\1\0\3\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\101\66\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\1\65\1\106"+
    "\3\65\4\106\2\65\2\106\6\65\15\106\4\65\1\106"+
    "\2\65\6\106\2\65\2\106\5\65\1\0\1\65\1\106"+
    "\1\65\1\0\1\65\1\66\1\67\1\70\1\101\11\65"+
    "\1\107\54\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\1\65\1\110\3\65\4\110\2\65\2\110"+
    "\6\65\15\110\4\65\1\110\2\65\6\110\2\65\2\110"+
    "\5\65\1\0\1\65\1\110\1\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\21\65\1\111\44\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\15\65\1\112"+
    "\5\65\1\113\4\65\1\114\3\65\1\115\31\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\1\65"+
    "\1\116\3\65\4\116\2\65\2\116\6\65\15\116\4\65"+
    "\1\116\2\65\6\116\2\65\2\116\5\65\1\0\1\65"+
    "\1\116\1\65\1\0\1\65\1\66\1\67\1\70\1\101"+
    "\11\65\1\117\54\65\1\0\3\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\1\65\1\120\3\65\4\120\2\65"+
    "\2\120\6\65\15\120\4\65\1\120\2\65\6\120\2\65"+
    "\2\120\5\65\1\0\1\65\1\120\1\65\1\0\1\65"+
    "\1\66\1\67\1\121\1\101\22\65\1\122\43\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\1\65"+
    "\1\123\3\65\4\123\2\65\2\123\6\65\15\123\4\65"+
    "\1\123\2\65\6\123\2\65\2\123\5\65\1\0\1\65"+
    "\1\123\1\65\1\0\1\65\1\66\1\67\1\70\1\101"+
    "\42\65\1\124\23\65\1\0\3\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\10\65\1\125\3\65\1\125\15\65"+
    "\1\126\2\65\1\127\1\130\15\65\1\131\11\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\43\65"+
    "\1\132\22\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\43\65\1\133\22\65\1\0\3\65\1\0"+
    "\1\65\1\66\1\67\1\134\1\101\3\65\1\135\62\65"+
    "\1\0\3\65\1\0\1\65\1\66\1\67\1\70\1\101"+
    "\17\65\1\136\25\65\2\136\6\65\2\136\2\65\4\136"+
    "\1\65\1\0\3\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\101\43\65\1\137\22\65\1\0\3\65\1\0\1\65"+
    "\1\66\1\67\1\140\1\101\3\65\1\141\62\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\17\65"+
    "\1\142\25\65\2\142\6\65\2\142\2\65\4\142\1\65"+
    "\1\0\3\65\1\0\1\65\1\66\1\67\1\70\1\101"+
    "\43\65\1\143\22\65\1\0\3\65\1\0\1\65\1\66"+
    "\1\67\1\144\1\101\3\65\1\145\62\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\6\65\1\146"+
    "\41\65\1\147\15\65\1\0\3\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\43\65\1\150\22\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\151\1\101\3\65\1\152"+
    "\62\65\1\0\3\65\1\0\1\65\1\66\1\67\1\70"+
    "\1\101\4\65\1\153\22\65\1\154\36\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\43\65\1\155"+
    "\22\65\1\0\3\65\1\0\1\65\1\66\1\67\1\156"+
    "\1\101\3\65\1\157\62\65\1\0\3\65\1\0\1\65"+
    "\1\66\1\67\1\70\1\101\4\65\1\160\61\65\1\0"+
    "\3\65\1\0\1\65\1\66\1\67\1\70\1\101\43\65"+
    "\1\161\22\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\162\1\101\3\65\1\163\62\65\1\0\3\65\1\0"+
    "\1\164\1\66\1\67\1\70\1\165\65\164\1\65\1\0"+
    "\3\164\1\0\1\65\1\66\1\67\1\70\1\101\2\65"+
    "\1\166\2\65\1\167\1\65\1\170\1\171\3\65\1\171"+
    "\6\65\1\172\2\173\1\65\1\174\1\175\3\65\1\176"+
    "\1\177\12\65\1\200\15\65\1\0\3\65\1\0\1\65"+
    "\1\66\1\67\1\70\1\101\1\65\1\201\2\65\1\202"+
    "\4\201\2\65\2\201\1\65\2\203\3\65\15\201\4\65"+
    "\1\201\2\203\6\201\1\65\1\203\2\201\4\203\1\65"+
    "\1\203\1\65\1\201\1\203\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\1\204\1\205\3\65\4\205\2\65\2\205"+
    "\6\65\15\205\4\65\1\205\2\65\6\205\2\65\2\205"+
    "\5\65\1\0\1\65\1\205\1\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\42\65\1\206\23\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\1\65\1\207"+
    "\3\65\4\207\2\65\2\207\6\65\15\207\4\65\1\207"+
    "\2\65\6\207\2\65\2\207\5\65\1\0\1\65\1\207"+
    "\1\65\1\0\1\65\1\66\1\67\1\70\1\101\11\65"+
    "\1\210\54\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\1\65\1\211\3\65\4\211\2\65\2\211"+
    "\6\65\15\211\4\65\1\211\2\65\6\211\2\65\2\211"+
    "\5\65\1\0\1\65\1\211\1\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\43\65\1\212\22\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\3\65\1\213"+
    "\30\65\1\214\22\65\1\215\6\65\1\0\3\65\1\0"+
    "\1\65\1\66\1\67\1\70\1\101\1\65\1\216\3\65"+
    "\4\216\2\65\2\216\6\65\15\216\4\65\1\216\2\65"+
    "\6\216\2\65\2\216\5\65\1\0\1\65\1\216\1\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\1\65\1\217"+
    "\3\65\4\217\2\65\2\217\6\65\15\217\4\65\1\217"+
    "\2\65\6\217\2\65\2\217\5\65\1\0\1\65\1\217"+
    "\1\65\1\0\1\65\1\66\1\67\1\70\1\101\11\65"+
    "\1\220\54\65\1\0\3\65\1\0\1\65\1\66\1\67"+
    "\1\70\1\101\1\65\1\221\3\65\4\221\2\65\2\221"+
    "\6\65\15\221\4\65\1\221\2\65\6\221\2\65\2\221"+
    "\5\65\1\0\1\65\1\221\1\65\1\0\1\65\1\66"+
    "\1\67\1\70\1\101\22\65\1\222\43\65\1\0\3\65"+
    "\1\0\1\65\1\66\1\67\1\70\1\101\23\65\1\223"+
    "\4\65\1\224\1\65\1\225\3\65\1\226\1\227\26\65"+
    "\1\0\3\65\102\0\1\66\101\0\1\70\100\0\1\230"+
    "\1\231\105\0\1\232\122\0\1\233\74\0\1\234\50\0"+
    "\1\230\101\0\1\102\3\0\4\102\2\0\2\102\6\0"+
    "\15\102\4\0\1\102\2\0\6\102\2\0\2\102\7\0"+
    "\1\102\5\0\1\235\5\0\1\236\101\0\1\237\67\0"+
    "\1\240\16\0\1\241\63\0\1\106\3\0\4\106\2\0"+
    "\2\106\6\0\15\106\4\0\1\106\2\0\6\106\2\0"+
    "\2\106\7\0\1\106\10\0\1\110\3\0\4\110\2\0"+
    "\2\110\1\0\2\110\3\0\15\110\4\0\11\110\1\0"+
    "\7\110\1\0\1\110\1\0\2\110\32\0\2\242\103\0"+
    "\1\243\103\0\1\244\43\0\1\116\3\0\4\116\2\0"+
    "\2\116\6\0\15\116\4\0\1\116\2\0\6\116\2\0"+
    "\2\116\7\0\1\116\10\0\1\120\3\0\4\120\2\0"+
    "\2\120\1\0\2\120\3\0\15\120\4\0\11\120\1\0"+
    "\7\120\1\0\1\120\1\0\2\120\4\0\1\121\23\0"+
    "\1\122\56\0\1\123\3\0\5\123\1\0\2\123\1\0"+
    "\2\123\3\0\15\123\4\0\11\123\1\0\7\123\1\0"+
    "\1\123\1\0\2\123\14\0\1\245\121\0\1\246\3\0"+
    "\1\247\67\0\2\250\2\0\1\251\77\0\1\252\102\0"+
    "\1\253\42\0\1\134\4\0\1\135\113\0\1\136\25\0"+
    "\2\136\6\0\2\136\2\0\4\136\11\0\1\140\4\0"+
    "\1\141\106\0\1\254\4\0\1\255\25\0\2\255\6\0"+
    "\2\255\2\0\4\255\11\0\1\144\4\0\1\145\125\0"+
    "\1\256\102\0\1\257\41\0\1\151\4\0\1\152\113\0"+
    "\1\260\25\0\2\260\6\0\2\260\2\0\4\260\43\0"+
    "\1\261\45\0\1\156\4\0\1\157\67\0\1\262\2\0"+
    "\6\262\1\263\66\262\3\0\1\162\4\0\1\163\67\0"+
    "\1\164\3\0\66\164\2\0\3\164\1\0\1\164\3\0"+
    "\1\264\65\164\2\0\3\164\32\0\2\265\103\0\1\266"+
    "\76\0\1\267\103\0\1\270\12\0\1\271\57\0\1\272"+
    "\15\0\1\273\62\0\1\274\76\0\1\275\77\0\1\276"+
    "\17\0\1\277\60\0\1\300\103\0\1\301\44\0\1\201"+
    "\3\0\4\201\1\302\1\0\2\201\1\0\2\203\2\0"+
    "\1\303\15\201\4\0\1\201\2\203\6\201\1\0\1\203"+
    "\2\201\4\203\1\0\1\203\1\0\1\201\1\203\1\0"+
    "\1\304\2\0\75\304\6\0\1\203\3\0\4\203\2\0"+
    "\2\203\1\0\2\203\2\0\1\303\15\203\4\0\11\203"+
    "\1\0\7\203\1\0\1\203\1\0\2\203\7\0\1\205"+
    "\3\0\5\205\1\0\2\205\1\0\2\205\3\0\15\205"+
    "\4\0\11\205\1\0\7\205\1\0\1\205\1\0\2\205"+
    "\7\0\1\207\3\0\4\207\2\0\2\207\6\0\15\207"+
    "\4\0\1\207\2\0\6\207\2\0\2\207\7\0\1\207"+
    "\10\0\1\211\3\0\4\211\2\0\2\211\1\0\2\211"+
    "\3\0\15\211\4\0\11\211\1\0\7\211\1\0\1\211"+
    "\1\0\2\211\55\0\1\305\63\0\1\306\45\0\1\307"+
    "\3\0\4\307\1\310\1\0\2\307\6\0\15\307\4\0"+
    "\1\307\2\0\6\307\2\0\2\307\7\0\1\307\10\0"+
    "\1\217\3\0\4\217\2\0\2\217\6\0\15\217\4\0"+
    "\1\217\2\0\6\217\2\0\2\217\7\0\1\217\10\0"+
    "\1\221\3\0\4\221\2\0\2\221\1\0\2\221\3\0"+
    "\15\221\4\0\11\221\1\0\7\221\1\0\1\221\1\0"+
    "\2\221\41\0\1\311\53\0\1\312\123\0\1\313\100\0"+
    "\1\314\73\0\1\315\42\0\1\230\2\0\75\230\5\231"+
    "\1\316\72\231\40\0\1\317\76\0\1\320\53\0\1\321"+
    "\77\0\1\322\117\0\1\323\103\0\1\324\55\0\1\325"+
    "\3\0\1\325\114\0\1\326\115\0\1\327\36\0\1\330"+
    "\120\0\1\331\100\0\1\332\76\0\1\333\104\0\1\334"+
    "\62\0\1\335\25\0\2\335\6\0\2\335\2\0\4\335"+
    "\62\0\1\336\66\0\1\337\60\0\1\340\25\0\2\340"+
    "\6\0\2\340\2\0\4\340\67\0\1\341\16\0\1\264"+
    "\2\0\1\230\66\264\2\230\3\264\1\230\37\0\1\342"+
    "\71\0\2\343\2\0\1\344\100\0\1\345\75\0\1\346"+
    "\106\0\1\347\73\0\1\350\113\0\1\351\101\0\1\352"+
    "\66\0\1\353\74\0\1\354\51\0\1\355\121\0\1\356"+
    "\106\0\1\357\41\0\1\360\3\0\4\360\2\0\2\360"+
    "\6\0\15\360\4\0\1\360\2\0\6\360\2\0\2\360"+
    "\7\0\1\360\5\0\1\303\2\0\1\203\3\0\4\203"+
    "\2\0\2\203\1\0\2\203\3\0\15\203\4\0\11\203"+
    "\1\0\7\203\1\0\1\203\1\0\2\203\1\0\1\304"+
    "\2\0\6\304\1\361\66\304\13\0\1\362\122\0\1\363"+
    "\47\0\1\364\3\0\4\364\2\0\2\364\6\0\15\364"+
    "\4\0\1\364\2\0\6\364\2\0\2\364\7\0\1\364"+
    "\15\0\1\365\77\0\1\366\141\0\1\367\73\0\1\370"+
    "\62\0\1\371\43\0\4\231\1\372\1\316\72\231\30\0"+
    "\1\373\107\0\1\374\77\0\1\375\53\0\1\376\114\0"+
    "\2\377\105\0\1\u0100\52\0\1\u0101\115\0\2\u0102\107\0"+
    "\1\u0103\75\0\1\u0104\100\0\1\u0105\101\0\1\u0106\121\0"+
    "\1\u0107\70\0\2\u0108\60\0\1\u0109\54\0\1\336\3\0"+
    "\1\336\102\0\1\u010a\25\0\2\u010a\6\0\2\u010a\2\0"+
    "\4\u010a\55\0\1\u010b\67\0\1\u010c\70\0\1\u010d\62\0"+
    "\1\u010e\77\0\1\u010f\123\0\1\u0110\53\0\1\u0111\124\0"+
    "\1\u0112\73\0\1\u0113\117\0\1\u0114\60\0\1\u0115\105\0"+
    "\1\u0116\71\0\1\u0117\57\0\1\u0118\3\0\1\u0118\116\0"+
    "\1\345\45\0\1\360\3\0\4\360\2\0\2\360\1\0"+
    "\2\360\3\0\15\360\4\0\11\360\1\0\7\360\1\0"+
    "\1\360\1\0\2\360\36\0\1\u0119\57\0\1\u011a\3\0"+
    "\1\u011a\64\0\1\364\3\0\4\364\2\0\2\364\1\0"+
    "\2\364\3\0\15\364\4\0\11\364\1\0\7\364\1\0"+
    "\1\364\1\0\2\364\42\0\1\u011b\67\0\2\u011c\106\0"+
    "\1\u011d\73\0\1\u011e\55\0\1\u011f\77\0\1\u0120\122\0"+
    "\1\u0121\75\0\1\u0122\60\0\1\u0123\1\u0124\2\0\1\u0123"+
    "\112\0\1\u0125\101\0\1\u0126\77\0\1\u0127\75\0\1\u0128"+
    "\106\0\1\u0129\72\0\1\u012a\101\0\1\u012b\75\0\1\u012c"+
    "\65\0\1\u012d\25\0\2\u012d\6\0\2\u012d\2\0\4\u012d"+
    "\56\0\1\u012e\67\0\1\351\100\0\1\u012f\76\0\1\u0130"+
    "\100\0\1\u0131\77\0\1\u0132\67\0\2\u0133\100\0\1\u0134"+
    "\107\0\1\u0135\70\0\1\u0136\114\0\1\u0137\72\0\1\u0138"+
    "\46\0\1\u0139\130\0\1\u013a\64\0\2\u013b\104\0\1\u013c"+
    "\75\0\1\u013d\116\0\1\u013e\77\0\1\u013f\63\0\1\u0140"+
    "\110\0\1\u0141\67\0\1\u0142\75\0\1\u0143\56\0\1\u0124"+
    "\65\0\1\u0144\134\0\1\u0145\77\0\1\u0146\123\0\1\u0147"+
    "\52\0\1\u0148\110\0\1\u0149\67\0\1\u014a\76\0\1\u014b"+
    "\104\0\1\u014c\70\0\1\u014d\105\0\1\u014e\75\0\1\u014f"+
    "\50\0\1\u0150\100\0\1\u014f\123\0\1\u0151\102\0\1\u0152"+
    "\111\0\1\u0153\102\0\1\u0154\55\0\1\u0155\51\0\1\u0156"+
    "\125\0\1\u0157\76\0\1\u0158\103\0\1\u0159\72\0\1\u015a"+
    "\106\0\1\u013f\47\0\1\u015b\120\0\1\u013f\57\0\1\u015c"+
    "\125\0\1\u015d\52\0\1\u015e\3\0\1\u015e\62\0\1\u015f"+
    "\135\0\1\u0160\101\0\1\u0161\36\0\1\u0162\23\0\1\u0163"+
    "\104\0\1\u0164\120\0\1\u0165\74\0\1\u0166\13\0\1\u0167"+
    "\62\0\1\u0113\41\0\1\u0168\127\0\1\u0169\71\0\1\u012f"+
    "\101\0\1\u016a\53\0\1\u016b\127\0\1\u016c\74\0\1\u016d"+
    "\77\0\1\u016e\63\0\1\u016f\25\0\2\u016f\6\0\2\u016f"+
    "\2\0\4\u016f\46\0\1\u0170\73\0\1\u0171\56\0\1\u0172"+
    "\101\0\1\u015b\3\0\1\u015b\116\0\1\u0173\102\0\1\u0174"+
    "\37\0\1\u015e\4\0\1\u0175\73\0\1\u0176\5\0\3\u0176"+
    "\2\0\3\u0176\2\0\1\u0176\3\0\1\u0176\1\0\14\u0176"+
    "\3\0\5\u0176\1\0\3\u0176\2\0\6\u0176\51\0\1\u0177"+
    "\47\0\1\u0178\67\0\1\u0163\7\0\1\u0179\22\0\1\u017a"+
    "\5\0\1\u017b\73\0\1\u017c\111\0\1\u017d\13\0\2\u017d"+
    "\34\0\1\u017d\25\0\2\u017d\13\0\3\u017d\46\0\1\u017e"+
    "\77\0\1\u0113\47\0\1\u017f\127\0\1\u0180\70\0\2\u0181"+
    "\103\0\1\u0182\102\0\1\u014e\55\0\1\u0183\121\0\1\u0184"+
    "\77\0\1\u015b\41\0\1\u0173\4\0\1\u0185\127\0\1\u0186"+
    "\77\0\1\u0187\77\0\1\u0188\70\0\2\u0189\57\0\1\u018a"+
    "\123\0\1\u018b\106\0\1\u018c\71\0\1\u0113\51\0\1\u018d"+
    "\22\0\1\u018e\76\0\1\u018f\110\0\1\u0190\43\0\1\u0191"+
    "\113\0\1\u0113\25\0\2\u0113\6\0\2\u0113\2\0\4\u0113"+
    "\21\0\1\u0192\117\0\1\u0193\110\0\1\u0194\70\0\1\u0195"+
    "\102\0\1\u0196\111\0\1\u0197\13\0\1\u0198\1\u0197\1\u0199"+
    "\63\0\1\u019a\60\0\1\u0113\55\0\1\u0113\77\0\1\u019b"+
    "\75\0\1\u019c\126\0\1\u019d\52\0\1\u019e\76\0\1\u019f"+
    "\116\0\2\u01a0\101\0\1\u01a1\67\0\1\u01a2\25\0\2\u01a2"+
    "\12\0\4\u01a2\32\0\1\u01a2\25\0\2\u01a2\13\0\3\u01a2"+
    "\60\0\1\u01a2\13\0\1\u01a2\45\0\1\u01a3\53\0\1\u01a4"+
    "\145\0\2\u01a5\57\0\1\u0171\101\0\1\u01a6\51\0\1\u01a7"+
    "\130\0\1\u01a8\77\0\1\u01a9\46\0\1\u01aa\77\0\1\u01ab"+
    "\101\0\1\u01ac\3\0\1\u01ac\116\0\1\u01ad\75\0\1\u01ae"+
    "\101\0\1\u01af\77\0\1\u01b0\77\0\1\u01b1\111\0\1\u01b2"+
    "\13\0\1\u01b2\1\u01b3\45\0\1\u01b4\116\0\1\u01b5\74\0"+
    "\1\u01b6\66\0\1\u01b7\72\0\1\u01b8\107\0\1\u01b9\37\0"+
    "\1\u01ba\23\0\1\u01bb\74\0\1\u01bc\25\0\2\u01bc\12\0"+
    "\4\u01bc\60\0\1\u01bc\13\0\3\u01bc\65\0\2\u01bd\50\0"+
    "\1\u0113\130\0\1\u01be\57\0\1\u01bf\51\0\1\u01bf\115\0"+
    "\2\u01c0\50\0\1\u01bb\10\0\1\u01c1\27\0\1\u01c2\10\0"+
    "\1\u01c3\40\0\1\u01c4\121\0\1\u01c5\74\0\1\u01c6\57\0"+
    "\1\u01c7\3\0\1\u01c7\107\0\2\u01c8\106\0\1\u01c9\67\0"+
    "\2\u01ca\117\0\1\u01cb\13\0\4\u01cb\42\0\1\u01cc\101\0"+
    "\1\u01cd\54\0\1\u01ce\130\0\1\u01cf\46\0\1\u01d0\127\0"+
    "\1\u01d1\60\0\1\u01d2\25\0\2\u01d2\12\0\4\u01d2\37\0"+
    "\2\u01d3\104\0\1\u01d4\65\0\1\u01d5\130\0\2\u01d6\60\0"+
    "\1\u01d7\77\0\1\u01d8\55\0\1\u01d9\141\0\1\u01da\30\0"+
    "\1\u0113\124\0\1\u01db\5\0\1\u01dc\73\0\1\u01dd\124\0"+
    "\1\u01de\37\0\1\u01df\124\0\1\u01e0\13\0\4\u01e0\46\0"+
    "\1\u01cd\77\0\1\u01e1\74\0\1\u01e2\100\0\1\u01e3\76\0"+
    "\1\u01e4\117\0\1\u01e5\46\0\1\u01e6\25\0\2\u01e6\12\0"+
    "\4\u01e6\23\0\1\u01e7\3\0\1\u01e7\132\0\1\u01e8\50\0"+
    "\1\u01e9\110\0\1\u01ea\76\0\1\u01eb\61\0\1\u01ec\115\0"+
    "\1\u01ed\76\0\1\u01ee\56\0\1\u01ef\135\0\1\u01f0\71\0"+
    "\1\u01f1\60\0\1\u01f2\25\0\2\u01f2\12\0\4\u01f2\62\0"+
    "\1\u01f3\36\0\1\u01f4\135\0\1\u01f5\53\0\1\u01f6\111\0"+
    "\1\u01f7\64\0\1\u01f8\25\0\2\u01f8\12\0\4\u01f8\44\0"+
    "\1\u01f9\77\0\1\u01fa\55\0\1\u01fb\124\0\1\u01fc\76\0"+
    "\1\u01fd\63\0\1\u01fe\25\0\2\u01fe\12\0\4\u01fe\52\0"+
    "\1\u01ff\104\0\1\u0200\66\0\1\u0201\113\0\1\u0202\61\0"+
    "\1\u0203\107\0\1\u0204\71\0\1\u0205\65\0\1\u0206\1\u0207"+
    "\60\0\1\u0208\102\0\1\u0209\112\0\1\u020a\123\0\1\u020b"+
    "\13\0\1\u020b\1\u020c\52\0\1\u020d\112\0\1\u020e\33\0"+
    "\1\u020f\123\0\1\u0210\66\0\1\u0211\25\0\2\u0211\12\0"+
    "\4\u0211\60\0\1\u0211\13\0\3\u0211\63\0\1\u0212\66\0"+
    "\1\u0213\50\0\1\u0214\14\0\2\u0215\11\0\1\u0216\10\0"+
    "\1\u0217\37\0\1\u0218\3\0\1\u0218\74\0\1\u0219\115\0"+
    "\1\u021a\104\0\1\u021b\77\0\1\u021c\66\0\1\u0214\104\0"+
    "\1\u021d\3\0\1\u021e\67\0\2\u021f\2\0\1\u0220\102\0"+
    "\1\u0221\111\0\1\u0222\13\0\4\u0222\45\0\1\u0223\125\0"+
    "\1\u0224\77\0\1\u0225\46\0\1\u0226\56\0\1\u0227\127\0"+
    "\1\u0225\77\0\1\u0228\77\0\1\u0229\60\0\1\u022a\25\0"+
    "\2\u022a\12\0\4\u022a\51\0\1\u022b\62\0\1\u0206\111\0"+
    "\1\u022c\52\0\1\u022d\124\0\1\u022e\76\0\1\u022f\100\0"+
    "\1\u0230\50\0\1\u012e\126\0\1\u0224\50\0\1\u0231\126\0"+
    "\1\u0232\124\0\1\u0233\52\0\1\u0234\103\0\1\u0235\61\0"+
    "\1\u020a\1\u0236\104\0\1\u0237\100\0\1\u0238\100\0\1\u022c"+
    "\54\0\1\u0239\114\0\1\u023a\62\0\1\u023b\122\0\1\u023c"+
    "\55\0\1\u023d\114\0\2\u023e\122\0\1\u023f\73\0\1\u022c"+
    "\67\0\1\u0240\66\0\1\u0241\104\0\1\u0220\100\0\1\u0242"+
    "\101\0\1\u0243\77\0\1\u0244\47\0\1\u0245\123\0\1\u0246"+
    "\54\0\1\u0247\101\0\1\u0248\76\0\4\u0249\2\0\2\u0249"+
    "\2\0\1\u0249\3\0\17\u0249\2\0\21\u0249\2\0\3\u0249"+
    "\11\0\1\u024a\73\0\1\u024b\5\0\4\u0249\2\0\2\u0249"+
    "\2\0\1\u0249\3\0\17\u0249\2\0\21\u0249\2\0\3\u0249"+
    "\14\0\1\u024c\41\0\1\u024d\27\0\1\u024e\4\0\4\u024f"+
    "\2\0\2\u024f\2\0\1\u024f\3\0\17\u024f\2\0\21\u024f"+
    "\2\0\3\u024f\37\0\1\u0250\102\0\1\u0251\47\0\1\u0203"+
    "\77\0\1\u0203\4\u024f\2\0\2\u024f\2\0\1\u024f\3\0"+
    "\17\u024f\2\0\21\u024f\2\0\3\u024f\55\0\1\u0252\66\0"+
    "\1\u0253\74\0\1\u0203\54\0\1\u0252\3\0\1\u0252\56\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[33920];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\64\0\2\11\3\1\2\11\3\1\2\11\6\1\1\11"+
    "\1\1\2\11\4\1\1\11\2\1\1\11\1\1\1\11"+
    "\5\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\15\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\6\1\5\0"+
    "\1\11\2\0\1\11\21\0\2\1\50\0\1\1\22\0"+
    "\2\1\2\0\1\1\5\0\1\11\11\0\1\11\2\0"+
    "\1\11\1\0\1\11\11\0\1\11\21\0\1\11\10\0"+
    "\1\11\30\0\1\1\2\11\21\0\1\11\10\0\1\11"+
    "\14\0\1\11\3\0\1\11\1\1\1\0\1\11\14\0"+
    "\3\11\26\0\1\1\22\0\1\1\15\0\1\11\16\0"+
    "\1\1\11\0\1\1\27\0\1\1\25\0\1\11\3\0"+
    "\1\11\111\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[595];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 76: break;
          case 2: 
            { yybegin(YYINITIAL); return CndTypes.CRLF;
            }
          case 77: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 78: break;
          case 4: 
            { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
            }
          case 79: break;
          case 5: 
            { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
            }
          case 80: break;
          case 6: 
            { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
            }
          case 81: break;
          case 7: 
            { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
            }
          case 82: break;
          case 8: 
            { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
            }
          case 83: break;
          case 9: 
            { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 84: break;
          case 10: 
            { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 85: break;
          case 11: 
            { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 86: break;
          case 12: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
            }
          case 87: break;
          case 13: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
            }
          case 88: break;
          case 14: 
            { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
            }
          case 89: break;
          case 15: 
            { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
            }
          case 90: break;
          case 16: 
            { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
            }
          case 91: break;
          case 17: 
            { yybegin(NODE_TYPE_INHERITANCE);
            }
          case 92: break;
          case 18: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
            }
          case 93: break;
          case 19: 
            { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
            }
          case 94: break;
          case 20: 
            { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 95: break;
          case 21: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 96: break;
          case 22: 
            { yybegin(PROPERTY_ADDENDUM_LONG); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 97: break;
          case 23: 
            { yybegin(PROPERTY_ADDENDUM_ATTR);
            }
          case 98: break;
          case 24: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_LONG); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 99: break;
          case 25: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_LONG;
            }
          case 100: break;
          case 26: 
            { yybegin(PROPERTY_ADDENDUM_DOUBLE); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 101: break;
          case 27: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_DOUBLE); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 102: break;
          case 28: 
            { yybegin(PROPERTY_ADDENDUM_BOOLEAN); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 103: break;
          case 29: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_BOOLEAN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 104: break;
          case 30: 
            { yybegin(PROPERTY_ADDENDUM_DATE); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 105: break;
          case 31: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_DATE); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 106: break;
          case 32: 
            { yybegin(PROPERTY_ADDENDUM_STRING_TEXT); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 107: break;
          case 33: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_TEXT); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 108: break;
          case 34: 
            { yybegin(PROPERTY_ADDENDUM_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 109: break;
          case 35: 
            { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 110: break;
          case 36: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_CHOICELIST;
            }
          case 111: break;
          case 37: 
            { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
            }
          case 112: break;
          case 38: 
            { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
            }
          case 113: break;
          case 39: 
            { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
            }
          case 114: break;
          case 40: 
            { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 115: break;
          case 41: 
            { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 116: break;
          case 42: 
            { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 117: break;
          case 43: 
            { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 118: break;
          case 44: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 119: break;
          case 45: 
            { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 120: break;
          case 46: 
            { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 121: break;
          case 47: 
            { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 122: break;
          case 48: 
            { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 123: break;
          case 49: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
            }
          case 124: break;
          case 50: 
            { return CndTypes.COMMENT;
            }
          case 125: break;
          case 51: 
            { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
            }
          case 126: break;
          case 52: 
            { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
            }
          case 127: break;
          case 53: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_TEXT;
            }
          case 128: break;
          case 54: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DOUBLE;
            }
          case 129: break;
          case 55: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 130: break;
          case 56: 
            { yybegin(PROPERTY_TYPE_DONE_DATE); return CndTypes.PROPERTY_TYPE_DATE;
            }
          case 131: break;
          case 57: 
            { yybegin(PROPERTY_TYPE_DONE_LONG); return CndTypes.PROPERTY_TYPE_LONG;
            }
          case 132: break;
          case 58: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_BOOLEAN;
            }
          case 133: break;
          case 59: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 134: break;
          case 60: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
            }
          case 135: break;
          case 61: 
            { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DATE;
            }
          case 136: break;
          case 62: 
            { yybegin(PROPERTY_TYPE_DONE_STRING_TEXT); return CndTypes.PROPERTY_TYPE_STRING_TEXT;
            }
          case 137: break;
          case 63: 
            { yybegin(PROPERTY_TYPE_DONE_DOUBLE); return CndTypes.PROPERTY_TYPE_DOUBLE;
            }
          case 138: break;
          case 64: 
            { yybegin(PROPERTY_TYPE_DONE_BINARY); return CndTypes.PROPERTY_TYPE_BINARY;
            }
          case 139: break;
          case 65: 
            { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
            }
          case 140: break;
          case 66: 
            { yybegin(PROPERTY_TYPE_DONE_BOOLEAN); return CndTypes.PROPERTY_TYPE_BOOLEAN;
            }
          case 141: break;
          case 67: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
            }
          case 142: break;
          case 68: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
            }
          case 143: break;
          case 69: 
            { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
            }
          case 144: break;
          case 70: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
            }
          case 145: break;
          case 71: 
            { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
            }
          case 146: break;
          case 72: 
            { yybegin(YYINITIAL); return CndTypes.NODE_TYPE_ORDERABLE;
            }
          case 147: break;
          case 73: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
            }
          case 148: break;
          case 74: 
            { yybegin(PROPERTY_TYPE_DONE_WEAKREFERENCE); return CndTypes.PROPERTY_TYPE_WEAKREFERENCE;
            }
          case 149: break;
          case 75: 
            { yybegin(PROPERTY_TYPE_DONE_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_STRING_CHOICELIST;
            }
          case 150: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
