/* The following code was generated by JFlex 1.7.0-SNAPSHOT tweaked for IntelliJ platform */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0-SNAPSHOT
 * from the specification file <tt>Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NAMESPACES_OVER = 10;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_ADDENDUM = 38;
  public static final int PROPERTY_ADDENDUM_ATTR = 40;
  public static final int PROPERTY_DEFAULT_BEGIN = 42;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 44;
  public static final int PROPERTY_PLUS_BEGIN = 46;
  public static final int PROPERTY_PLUS_NAME_DONE = 48;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 50;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 52;
  public static final int PROPERTY_PLUS_COLON_DONE = 54;
  public static final int PROPERTY_PLUS_TYPE_DONE = 56;
  public static final int PROPERTY_PLUS_ADDENDUM = 58;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 60;
  public static final int EXTEND_BEGIN = 62;
  public static final int EXTEND_NAMESPACE_DONE = 64;
  public static final int EXTEND_COLON_DONE = 66;
  public static final int EXTEND_DONE = 68;
  public static final int EXTEND_ITEM_BEGIN = 70;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17, 18, 18, 19, 19,  5,  5, 20, 20, 21, 21, 22, 22, 
    23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 30, 30, 
    31, 31, 32, 32, 33, 33, 34, 34
  };

  /** 
   * Translates characters to character classes
   * Chosen bits are [12, 6, 3]
   * Total runtime size is 15408 bytes
   */
  public static int ZZ_CMAP(int ch) {
    return ZZ_CMAP_A[(ZZ_CMAP_Y[(ZZ_CMAP_Z[ch>>9]<<6)|((ch>>3)&0x3f)]<<3)|(ch&0x7)];
  }

  /* The ZZ_CMAP_Z table has 2176 entries */
  static final char ZZ_CMAP_Z[] = zzUnpackCMap(
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1"+
    "\20\5\21\1\22\1\23\1\24\1\21\14\25\1\26\50\25\1\27\2\25\1\30\1\31\1\32\1\33"+
    "\25\25\1\34\20\21\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\21\1\44\1\45\1\46\1"+
    "\21\1\47\1\50\1\51\1\52\1\53\3\21\1\25\1\54\1\55\5\21\2\25\1\56\31\21\1\25"+
    "\1\57\1\21\1\60\40\21\1\61\17\21\1\62\1\63\1\64\1\65\13\21\1\66\10\21\123"+
    "\25\1\67\7\25\1\70\1\71\37\21\1\25\1\71\u0582\21\1\72\u017f\21");

  /* The ZZ_CMAP_Y table has 3776 entries */
  static final char ZZ_CMAP_Y[] = zzUnpackCMap(
    "\1\0\1\1\1\0\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1"+
    "\17\3\0\1\20\1\21\1\22\1\23\2\24\1\25\3\24\1\25\71\24\1\26\1\24\1\27\1\30"+
    "\1\31\1\32\2\30\16\0\1\33\1\20\1\34\1\35\2\24\1\36\11\24\1\37\21\24\1\40\1"+
    "\41\23\24\1\30\1\42\3\24\1\25\1\43\1\42\4\24\1\44\1\45\4\0\1\46\1\47\1\30"+
    "\3\24\2\50\1\30\1\51\1\52\1\0\1\53\5\24\1\54\2\0\1\55\1\56\1\57\13\24\1\60"+
    "\1\46\1\61\1\62\1\55\1\63\1\30\1\64\1\65\3\24\3\0\1\66\12\24\1\67\1\0\1\70"+
    "\1\30\1\55\1\71\3\24\1\54\1\72\1\23\2\24\1\67\1\73\1\74\1\75\2\30\3\24\1\76"+
    "\10\30\1\77\1\31\6\30\1\100\2\0\1\101\1\102\6\24\1\103\2\0\1\104\1\24\1\105"+
    "\1\55\2\42\1\106\1\107\1\110\2\24\1\77\1\111\1\112\1\113\1\114\1\64\1\115"+
    "\1\105\1\55\1\116\1\52\1\106\1\117\1\110\2\24\1\77\1\120\1\121\1\122\1\123"+
    "\1\124\1\125\1\126\1\55\1\127\1\30\1\106\1\37\1\36\2\24\1\77\1\130\1\112\1"+
    "\46\1\131\1\132\1\30\1\105\1\55\1\43\1\30\1\106\1\107\1\110\2\24\1\77\1\130"+
    "\1\112\1\113\1\123\1\133\1\115\1\105\1\55\1\43\1\30\1\134\1\135\1\136\1\137"+
    "\1\140\1\135\1\24\1\141\1\142\1\143\1\144\1\30\1\126\1\55\1\30\1\43\1\106"+
    "\1\33\1\77\2\24\1\77\1\145\1\146\1\147\1\143\1\150\1\27\1\105\1\55\2\30\1"+
    "\151\1\33\1\77\2\24\1\77\1\145\1\112\1\147\1\143\1\150\1\34\1\105\1\55\1\152"+
    "\1\30\1\151\1\33\1\77\4\24\1\153\1\147\1\154\1\64\1\30\1\105\1\55\1\30\1\41"+
    "\1\151\1\24\1\25\1\41\2\24\1\36\1\155\1\25\1\156\1\157\1\0\1\160\1\161\1\162"+
    "\1\30\1\42\5\24\1\163\1\164\1\165\1\101\1\55\1\166\4\30\1\167\1\170\1\171"+
    "\1\42\1\172\1\173\1\163\1\174\1\175\1\176\1\55\1\177\4\30\1\132\2\30\1\200"+
    "\1\55\1\166\1\201\1\202\1\24\1\42\3\24\1\31\1\45\1\0\1\147\1\203\1\0\1\45"+
    "\3\0\1\51\1\204\7\30\5\24\1\54\1\0\1\205\1\55\1\166\1\67\1\206\1\207\1\210"+
    "\1\211\1\24\1\212\1\213\1\55\1\214\4\24\1\37\1\22\5\24\1\215\51\24\1\136\1"+
    "\25\1\136\5\24\1\136\4\24\1\136\1\25\1\136\1\24\1\25\7\24\1\136\10\24\1\216"+
    "\4\30\2\24\2\30\12\24\1\31\1\30\1\42\114\24\1\107\2\24\1\42\2\24\1\50\11\24"+
    "\1\135\1\132\1\30\1\24\1\33\1\217\1\30\2\24\1\217\1\30\2\24\1\220\1\30\1\24"+
    "\1\33\1\221\1\30\6\24\1\222\3\0\1\223\1\224\1\55\1\166\3\30\1\225\1\55\1\166"+
    "\13\24\1\30\5\24\1\226\10\24\1\227\1\30\3\24\1\31\1\0\1\2\1\0\1\2\1\126\1"+
    "\55\3\24\1\227\1\31\1\30\5\24\1\116\2\0\1\57\1\200\1\55\1\166\4\30\2\24\1"+
    "\165\1\2\6\24\1\203\1\101\3\0\1\113\1\55\1\166\1\55\1\166\1\44\13\30\1\230"+
    "\5\24\1\222\1\0\1\230\1\116\1\55\1\166\1\30\1\231\1\2\1\30\1\232\3\24\1\104"+
    "\1\210\1\55\1\71\4\24\1\67\1\0\1\2\1\30\4\24\1\222\2\0\1\30\1\55\1\233\1\55"+
    "\1\71\3\24\1\227\12\30\1\234\2\0\1\235\1\236\1\30\30\24\4\0\1\101\2\30\1\100"+
    "\42\24\2\227\4\24\2\227\1\24\1\237\3\24\1\227\6\24\1\33\1\175\1\240\1\31\1"+
    "\241\1\116\1\24\1\31\1\240\1\31\1\30\1\231\3\30\1\242\1\30\1\44\1\132\1\30"+
    "\1\243\1\30\1\51\1\244\1\43\1\44\2\30\1\24\1\31\3\24\1\50\2\30\1\0\1\51\1"+
    "\245\1\0\1\246\1\30\1\247\1\41\1\155\1\250\1\32\1\251\1\24\1\252\1\253\1\254"+
    "\2\30\5\24\1\132\116\30\5\24\1\25\5\24\1\25\20\24\1\31\1\255\1\256\1\30\4"+
    "\24\1\37\1\22\7\24\1\44\1\30\1\64\2\24\1\25\1\30\10\25\4\0\5\30\1\44\72\30"+
    "\1\253\3\30\1\42\1\212\1\250\1\31\1\42\11\24\1\25\1\257\1\42\12\24\1\215\1"+
    "\253\4\24\1\227\1\42\12\24\1\25\2\30\3\24\1\50\6\30\170\24\1\227\11\30\71"+
    "\24\1\31\6\30\21\24\1\31\10\30\5\24\1\227\41\24\1\31\2\24\1\55\1\260\2\30"+
    "\5\24\1\165\1\100\1\261\3\24\1\64\12\24\1\200\3\30\1\44\1\24\1\41\14\24\1"+
    "\262\1\116\1\30\1\24\1\50\11\30\1\24\1\263\1\264\2\24\1\54\2\30\1\132\6\24"+
    "\1\116\1\30\1\265\5\24\1\222\1\0\1\51\1\30\1\55\1\166\2\0\1\265\1\52\1\55"+
    "\1\71\2\24\1\67\1\176\2\24\1\165\1\0\1\2\1\30\3\24\1\31\1\102\5\24\1\54\1"+
    "\0\1\246\1\44\1\55\1\166\2\30\1\161\1\266\5\24\1\104\1\101\1\30\1\264\1\267"+
    "\1\55\1\166\2\24\1\25\1\270\6\24\1\207\1\271\1\226\2\30\1\272\1\24\1\54\1"+
    "\273\1\30\3\274\1\30\2\25\22\30\4\24\1\54\1\275\1\55\1\166\64\24\1\116\1\30"+
    "\2\24\1\25\1\276\5\24\1\116\40\30\55\24\1\227\15\24\1\27\4\30\1\25\1\30\1"+
    "\276\1\277\1\24\1\77\1\25\1\175\1\300\15\24\1\27\3\30\1\276\54\24\1\227\2"+
    "\30\10\24\1\41\6\24\5\30\1\24\1\31\2\0\2\30\1\101\1\30\1\140\2\30\1\253\3"+
    "\30\1\43\1\33\20\24\1\301\1\243\1\30\1\55\1\166\1\42\2\24\1\117\1\42\2\24"+
    "\1\50\1\302\12\24\1\25\3\41\1\303\1\304\2\30\1\305\1\24\1\145\2\24\1\25\2"+
    "\24\1\306\1\24\1\227\1\24\1\227\4\30\17\24\1\50\10\30\6\24\1\31\20\30\1\307"+
    "\20\30\3\24\1\31\6\24\1\132\5\30\3\24\1\25\2\30\3\24\1\50\6\30\3\24\1\227"+
    "\4\24\1\116\1\24\1\250\5\30\23\24\1\227\1\55\1\166\52\30\1\227\1\77\4\24\1"+
    "\37\1\310\2\24\1\227\25\30\2\24\1\227\1\30\3\24\1\27\10\30\7\24\1\302\10\30"+
    "\1\311\1\100\1\145\1\42\2\24\1\116\1\122\4\30\3\24\1\31\20\30\6\24\1\227\1"+
    "\30\2\24\1\227\1\30\2\24\1\50\21\30\11\24\1\132\66\30\1\232\6\24\1\0\1\101"+
    "\3\30\1\126\1\55\2\30\1\232\5\24\1\0\1\312\2\30\3\24\1\132\1\55\1\166\1\232"+
    "\3\24\1\165\1\0\1\313\1\55\10\30\1\232\5\24\1\54\1\0\1\314\1\30\1\55\1\166"+
    "\42\30\1\161\1\266\72\30\1\161\1\266\56\30\1\161\1\266\4\30\5\24\1\54\1\0"+
    "\1\30\1\55\1\166\14\30\1\161\1\266\64\30\1\161\1\266\42\30\55\24\1\25\22\30"+
    "\14\24\1\50\63\30\5\24\1\25\72\30\7\24\1\132\4\30\1\161\1\266\34\30\1\161"+
    "\1\266\64\30\10\24\1\31\1\30\1\104\4\0\1\101\1\30\1\64\1\232\1\24\14\30\1"+
    "\27\153\30\1\315\1\316\2\0\1\317\1\2\3\30\1\320\22\30\1\321\67\30\12\24\1"+
    "\33\10\24\1\33\1\322\1\323\1\24\1\324\1\145\7\24\1\37\1\325\2\33\3\24\1\326"+
    "\1\175\1\41\1\77\51\24\1\227\3\24\1\77\2\24\1\215\3\24\1\215\2\24\1\33\3\24"+
    "\1\33\2\24\1\25\3\24\1\25\3\24\1\77\3\24\1\77\2\24\1\215\1\327\6\55\1\145"+
    "\3\24\1\167\1\42\1\215\1\330\1\247\1\331\1\167\1\237\1\167\2\215\1\125\1\24"+
    "\1\36\1\24\1\116\1\332\1\36\1\24\1\116\50\30\32\24\1\25\5\30\106\24\1\31\1"+
    "\30\33\24\1\227\74\30\1\124\3\30\14\0\20\30\36\0\2\30");

  /* The ZZ_CMAP_A table has 1752 entries */
  static final char ZZ_CMAP_A[] = zzUnpackCMap(
    "\11\20\1\2\1\1\1\64\1\65\1\1\6\20\4\0\1\2\3\0\1\4\2\0\1\7\1\44\1\45\1\43\1"+
    "\42\1\24\1\41\1\15\1\3\1\21\1\61\6\21\1\62\1\21\1\14\1\0\1\5\1\6\1\17\2\0"+
    "\1\16\1\50\15\16\1\56\2\16\1\55\7\16\1\22\1\0\1\23\1\0\1\16\1\0\1\35\1\36"+
    "\1\40\1\33\1\34\1\52\1\46\1\10\1\26\1\16\1\54\1\37\1\25\1\30\1\31\1\12\1\16"+
    "\1\32\1\13\1\11\1\47\1\16\1\53\1\27\1\51\1\63\4\0\6\20\1\66\2\20\2\0\4\4\4"+
    "\0\1\4\2\0\1\20\7\0\1\4\4\0\1\4\5\0\17\4\1\0\2\4\4\0\4\4\16\0\5\4\7\0\1\4"+
    "\1\0\1\4\1\0\5\4\1\0\2\4\6\0\1\4\1\0\3\4\1\0\1\4\1\0\4\4\1\0\13\4\1\0\3\4"+
    "\1\0\5\20\2\0\6\4\1\0\7\4\1\0\1\4\15\0\1\4\1\0\15\20\1\0\1\20\1\0\2\20\1\0"+
    "\2\20\1\0\1\20\3\4\5\0\5\20\6\0\1\4\4\0\3\20\5\0\3\4\5\20\12\60\4\0\2\4\1"+
    "\20\13\4\1\0\1\4\7\20\2\4\2\20\1\0\4\20\2\4\2\60\3\4\2\0\1\4\7\0\1\20\1\4"+
    "\1\20\6\4\3\20\2\0\11\4\3\20\1\4\6\0\2\60\6\4\4\20\2\4\2\0\2\20\1\4\11\20"+
    "\1\4\3\20\1\4\5\20\2\0\1\4\3\20\4\0\1\4\1\0\6\4\4\0\13\20\1\0\4\20\6\4\3\20"+
    "\1\4\2\20\1\4\7\20\2\4\2\20\2\0\2\60\1\0\3\20\1\0\10\4\2\0\2\4\2\0\6\4\1\0"+
    "\1\4\3\0\4\4\2\0\1\20\1\4\7\20\2\0\2\20\2\0\3\20\1\4\5\0\2\4\1\0\5\4\4\0\3"+
    "\4\4\0\2\4\1\0\2\4\1\0\2\4\1\0\2\4\2\0\1\20\1\0\5\20\4\0\2\20\2\0\3\20\3\0"+
    "\1\20\7\0\4\4\1\0\1\4\7\0\2\60\2\20\3\4\1\20\2\0\1\4\1\0\2\4\1\0\3\4\2\20"+
    "\1\0\3\20\2\0\1\4\15\0\2\20\2\0\1\20\1\4\1\0\6\4\3\0\3\4\1\0\4\4\3\0\2\4\1"+
    "\0\1\4\1\0\2\4\3\0\2\4\3\0\2\4\4\0\5\20\3\0\3\20\1\0\4\20\2\0\1\4\6\0\1\20"+
    "\4\4\1\0\5\4\3\0\1\4\7\20\1\0\2\20\5\0\2\20\3\0\2\20\1\0\3\4\1\0\2\4\5\0\3"+
    "\4\2\0\1\4\3\20\1\0\4\20\1\4\1\0\4\4\1\0\1\4\4\0\1\20\4\0\6\20\1\0\1\20\7"+
    "\0\12\57\2\0\2\20\4\0\1\4\1\20\2\4\7\20\4\0\10\4\1\20\2\60\7\0\2\4\1\0\1\4"+
    "\2\0\2\4\1\0\1\4\2\0\1\4\6\0\4\4\1\0\3\4\1\0\1\4\1\0\1\4\2\0\2\4\1\0\3\4\2"+
    "\20\1\0\2\20\1\4\2\0\5\4\1\0\1\4\1\0\6\20\2\0\2\60\2\0\4\4\2\20\13\0\1\20"+
    "\1\0\1\20\1\0\1\20\4\0\2\20\5\4\3\20\6\0\1\20\1\0\7\20\1\4\2\20\4\4\3\20\1"+
    "\4\3\20\2\4\7\20\3\4\4\20\5\4\14\20\1\4\1\20\2\60\4\20\2\0\3\4\1\0\7\4\2\0"+
    "\3\20\2\4\3\20\3\0\2\4\2\20\4\0\1\4\1\0\2\20\4\0\4\4\10\20\3\0\1\4\3\0\2\4"+
    "\1\20\5\0\3\20\2\0\1\4\1\20\1\4\5\0\6\4\2\0\5\20\3\4\3\0\10\20\5\4\2\60\3"+
    "\0\3\4\3\20\1\0\5\20\4\4\1\20\4\4\3\20\2\4\2\0\1\4\1\0\1\4\1\0\1\4\1\0\1\4"+
    "\2\0\3\4\1\0\6\4\2\0\2\4\2\64\5\20\5\0\1\4\5\0\6\20\1\0\1\20\3\0\4\20\11\0"+
    "\1\4\4\0\1\4\1\0\5\4\2\0\1\4\1\0\4\4\1\0\3\4\2\0\4\4\5\0\5\4\4\0\1\4\4\0\4"+
    "\4\3\20\2\4\5\0\2\20\2\0\3\4\2\60\2\4\4\0\6\20\1\0\2\4\2\0\4\4\1\0\2\4\1\20"+
    "\3\4\1\20\4\4\1\20\4\4\2\20\6\4\2\57\6\0\4\4\2\20\4\0\1\4\1\20\4\0\1\20\5"+
    "\4\2\20\3\0\3\4\4\0\3\4\2\20\2\0\6\4\1\0\3\20\1\0\2\20\5\0\5\4\5\0\1\4\1\20"+
    "\3\4\1\0\2\4\1\0\7\4\2\0\1\20\6\0\2\4\2\0\3\4\3\0\2\4\3\0\2\4\2\0\3\20\4\0"+
    "\3\4\1\0\2\4\1\0\1\4\5\0\1\20\2\0\1\4\3\0\1\4\2\0\2\4\3\20\1\0\2\20\1\0\3"+
    "\20\2\0\1\20\2\0\5\20\1\0\2\60\1\20\4\4\10\0\5\20\3\0\6\20\2\0\3\20\2\0\4"+
    "\20\4\0\3\20\5\0\1\4\2\0\2\4\2\0\4\4\1\0\4\4\1\0\1\4\1\0\6\4\2\0\5\4\1\0\4"+
    "\4\1\0\4\4\2\0\2\60\1\0\1\4\1\0\1\4\5\0\1\4\1\0\1\4\1\0\3\4\1\0\3\4\1\0\3"+
    "\4");

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\43\0\1\1\1\2\1\3\1\1\1\4\1\5\2\1"+
    "\1\6\1\7\1\10\3\1\1\11\1\12\1\13\1\14"+
    "\1\15\3\1\1\16\1\17\1\20\2\21\1\22\1\3"+
    "\1\23\1\3\5\1\1\24\1\3\12\1\1\25\1\1"+
    "\2\25\1\26\1\1\1\26\2\27\1\3\1\30\1\31"+
    "\1\32\1\33\1\3\1\1\1\34\1\35\1\36\1\3"+
    "\1\37\3\1\1\40\3\0\1\41\2\0\1\42\3\0"+
    "\1\43\27\0\2\25\3\0\1\44\24\0\1\45\1\46"+
    "\16\0\1\25\2\26\1\47\1\0\1\50\13\0\1\51"+
    "\12\0\1\52\16\0\1\53\21\0\1\25\11\0\1\51"+
    "\16\0\1\54\21\0\1\55\1\56\1\0\1\57\13\0"+
    "\1\60\1\61\22\0\1\51\16\0\1\62\3\0\1\51"+
    "\23\0\1\51\27\0\1\51\115\0\1\51\3\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\67\0\156\0\245\0\334\0\u0113\0\u014a\0\u0181"+
    "\0\u01b8\0\u01ef\0\u0226\0\u025d\0\u0294\0\u02cb\0\u0302\0\u0339"+
    "\0\u0370\0\u03a7\0\u03de\0\u0415\0\u044c\0\u0483\0\u04ba\0\u04f1"+
    "\0\u0528\0\u055f\0\u0596\0\u05cd\0\u0604\0\u063b\0\u0672\0\u06a9"+
    "\0\u06e0\0\u0717\0\u074e\0\u0785\0\u07bc\0\u07f3\0\u082a\0\u0785"+
    "\0\u0785\0\u0861\0\u0898\0\u0785\0\u0785\0\u08cf\0\u0906\0\u093d"+
    "\0\u0974\0\u09ab\0\u0785\0\u09e2\0\u0785\0\u0785\0\u0a19\0\u0a50"+
    "\0\u0a87\0\u0abe\0\u0785\0\u0af5\0\u0785\0\u0b2c\0\u0785\0\u0b2c"+
    "\0\u0b63\0\u0b9a\0\u0bd1\0\u0c08\0\u0c3f\0\u0c76\0\u0cad\0\u0785"+
    "\0\u0ce4\0\u0d1b\0\u0d52\0\u0d89\0\u0dc0\0\u0df7\0\u0e2e\0\u0e65"+
    "\0\u0e9c\0\u0ed3\0\u0f0a\0\u0f41\0\u0f78\0\u0faf\0\u0fe6\0\u101d"+
    "\0\u1054\0\u108b\0\u10c2\0\u0785\0\u10f9\0\u1130\0\u0785\0\u1167"+
    "\0\u0785\0\u119e\0\u11d5\0\u120c\0\u0785\0\u1243\0\u127a\0\u0785"+
    "\0\u12b1\0\u12e8\0\u131f\0\u1356\0\u138d\0\u13c4\0\u0906\0\u0785"+
    "\0\u13fb\0\u0974\0\u0785\0\u1432\0\u1469\0\u14a0\0\u0785\0\u14d7"+
    "\0\u150e\0\u1545\0\u157c\0\u15b3\0\u15ea\0\u1621\0\u1658\0\u168f"+
    "\0\u16c6\0\u16fd\0\u1734\0\u176b\0\u17a2\0\u17d9\0\u1810\0\u1847"+
    "\0\u187e\0\u18b5\0\u18ec\0\u1923\0\u195a\0\u0f78\0\u0f78\0\u1991"+
    "\0\u19c8\0\u19ff\0\u1a36\0\u0785\0\u1a6d\0\u1aa4\0\u11d5\0\u1adb"+
    "\0\u1b12\0\u1b49\0\u1b80\0\u1bb7\0\u1bee\0\u1c25\0\u1c5c\0\u1c93"+
    "\0\u1cca\0\u1d01\0\u1d38\0\u1d6f\0\u1da6\0\u1ddd\0\u1e14\0\u1e4b"+
    "\0\u1658\0\u168f\0\u1e82\0\u1eb9\0\u1ef0\0\u1f27\0\u1f5e\0\u1f95"+
    "\0\u1fcc\0\u2003\0\u203a\0\u2071\0\u20a8\0\u20df\0\u2116\0\u214d"+
    "\0\u2184\0\u21bb\0\u1a36\0\u1a6d\0\u21f2\0\u2229\0\u2260\0\u2297"+
    "\0\u22ce\0\u2305\0\u233c\0\u2373\0\u23aa\0\u23e1\0\u2418\0\u244f"+
    "\0\u2486\0\u0785\0\u24bd\0\u24f4\0\u252b\0\u2562\0\u2599\0\u25d0"+
    "\0\u2607\0\u263e\0\u2675\0\u26ac\0\u0785\0\u26e3\0\u271a\0\u2751"+
    "\0\u2788\0\u27bf\0\u27f6\0\u282d\0\u2864\0\u289b\0\u28d2\0\u2909"+
    "\0\u2940\0\u2977\0\u29ae\0\u0785\0\u29e5\0\u2a1c\0\u2a53\0\u2a8a"+
    "\0\u2ac1\0\u2af8\0\u2b2f\0\u2b66\0\u2b9d\0\u2bd4\0\u2c0b\0\u2c42"+
    "\0\u2c79\0\u2cb0\0\u2ce7\0\u2d1e\0\u2d55\0\u0785\0\u2d8c\0\u2dc3"+
    "\0\u2dfa\0\u2e31\0\u2e68\0\u2e9f\0\u2ed6\0\u2f0d\0\u2f44\0\u2f7b"+
    "\0\u2fb2\0\u2fe9\0\u3020\0\u3057\0\u308e\0\u30c5\0\u30fc\0\u3133"+
    "\0\u316a\0\u31a1\0\u31d8\0\u320f\0\u3246\0\u327d\0\u0785\0\u32b4"+
    "\0\u32eb\0\u3322\0\u3359\0\u3390\0\u33c7\0\u33fe\0\u3435\0\u346c"+
    "\0\u34a3\0\u34da\0\u3511\0\u3548\0\u357f\0\u35b6\0\u35ed\0\u3624"+
    "\0\u0785\0\u3322\0\u365b\0\u0785\0\u3692\0\u36c9\0\u3700\0\u3737"+
    "\0\u376e\0\u37a5\0\u37dc\0\u3813\0\u384a\0\u3881\0\u38b8\0\u0785"+
    "\0\u0785\0\u38ef\0\u3926\0\u395d\0\u3994\0\u39cb\0\u3a02\0\u3a39"+
    "\0\u3a70\0\u3aa7\0\u3ade\0\u3b15\0\u3b4c\0\u3b83\0\u3bba\0\u3bf1"+
    "\0\u3c28\0\u3c5f\0\u3c96\0\u3ccd\0\u3d04\0\u3d3b\0\u3d72\0\u3da9"+
    "\0\u3de0\0\u3e17\0\u3e4e\0\u3e85\0\u3ebc\0\u3ef3\0\u3f2a\0\u3f61"+
    "\0\u3f98\0\u3fcf\0\u0785\0\u4006\0\u403d\0\u4074\0\u40ab\0\u40e2"+
    "\0\u4119\0\u4150\0\u4187\0\u41be\0\u41f5\0\u422c\0\u4263\0\u429a"+
    "\0\u42d1\0\u4308\0\u433f\0\u4376\0\u43ad\0\u43e4\0\u441b\0\u4452"+
    "\0\u4489\0\u44c0\0\u44f7\0\u452e\0\u4565\0\u459c\0\u45d3\0\u460a"+
    "\0\u4641\0\u4678\0\u46af\0\u46e6\0\u471d\0\u4754\0\u478b\0\u47c2"+
    "\0\u47f9\0\u4830\0\u4867\0\u489e\0\u48d5\0\u490c\0\u4943\0\u497a"+
    "\0\u49b1\0\u49e8\0\u4a1f\0\u4a56\0\u4a8d\0\u4ac4\0\u4afb\0\u4b32"+
    "\0\u4b69\0\u4ba0\0\u4bd7\0\u4c0e\0\u4c45\0\u4c7c\0\u4cb3\0\u4cea"+
    "\0\u4d21\0\u4d58\0\u4d8f\0\u4dc6\0\u4dfd\0\u4e34\0\u4e6b\0\u4ea2"+
    "\0\u4ed9\0\u4f10\0\u4f47\0\u4f7e\0\u4fb5\0\u4fec\0\u5023\0\u505a"+
    "\0\u5091\0\u50c8\0\u50ff\0\u5136\0\u516d\0\u51a4\0\u51db\0\u5212"+
    "\0\u5249\0\u5280\0\u52b7\0\u52ee\0\u5325\0\u535c\0\u5393\0\u53ca"+
    "\0\u5401\0\u5438\0\u546f\0\u54a6\0\u54dd\0\u5514\0\u554b\0\u5582"+
    "\0\u55b9\0\u55f0\0\u5627\0\u565e\0\u5695\0\u56cc\0\u5703\0\u573a"+
    "\0\u5771\0\u57a8\0\u57df\0\u5816\0\u584d\0\u5884\0\u58bb\0\u58f2"+
    "\0\u5929\0\u5960\0\u5997\0\u59ce\0\u5a05\0\u5a3c\0\u5a73\0\u5aaa"+
    "\0\u59ce\0\u5ae1\0\u5b18\0\u5b4f";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\44\1\45\1\46\1\47\1\44\1\50\14\44\1\51"+
    "\3\44\1\52\5\44\1\53\4\44\1\54\1\55\21\44"+
    "\1\0\1\46\1\0\1\44\1\45\1\46\1\44\1\56"+
    "\3\44\4\56\2\44\1\56\6\44\14\56\5\44\11\56"+
    "\4\44\1\56\1\0\1\46\1\0\1\44\1\45\1\46"+
    "\3\44\1\57\55\44\1\0\1\46\1\0\1\44\1\45"+
    "\1\46\5\44\1\60\53\44\1\0\1\46\1\0\1\44"+
    "\1\45\1\46\4\44\1\61\54\44\1\0\1\46\1\0"+
    "\1\44\1\45\1\46\61\44\1\0\1\46\1\0\1\44"+
    "\1\45\1\46\1\44\1\62\3\44\4\62\2\44\1\62"+
    "\6\44\14\62\5\44\11\62\4\44\1\62\1\0\1\46"+
    "\1\0\1\44\1\45\1\46\11\44\1\63\47\44\1\0"+
    "\1\46\1\0\1\44\1\45\1\46\1\44\1\64\3\44"+
    "\4\64\2\44\1\64\6\44\14\64\5\44\11\64\4\44"+
    "\1\64\1\0\1\46\1\0\1\44\1\45\1\46\20\44"+
    "\1\65\40\44\1\0\1\46\1\0\1\44\1\45\1\46"+
    "\14\44\1\66\5\44\1\67\3\44\1\70\3\44\1\71"+
    "\26\44\1\0\1\46\1\0\1\44\1\45\1\46\1\44"+
    "\1\72\3\44\4\72\2\44\1\72\6\44\14\72\5\44"+
    "\11\72\4\44\1\72\1\0\1\46\1\0\1\44\1\45"+
    "\1\46\11\44\1\73\47\44\1\0\1\46\1\0\1\44"+
    "\1\45\1\46\1\44\1\74\3\44\4\74\2\44\1\74"+
    "\6\44\14\74\5\44\11\74\4\44\1\74\1\0\1\46"+
    "\1\0\1\75\1\45\1\76\21\75\1\77\37\75\1\0"+
    "\1\100\1\0\1\44\1\45\1\46\1\44\1\101\3\44"+
    "\4\101\2\44\1\101\6\44\14\101\5\44\11\101\4\44"+
    "\1\101\1\0\1\46\1\0\1\44\1\45\1\102\61\44"+
    "\1\0\1\102\1\0\1\44\1\45\1\46\10\44\1\103"+
    "\17\44\1\104\2\44\1\105\1\106\13\44\1\107\10\44"+
    "\1\0\1\46\1\0\1\44\1\45\1\46\42\44\1\110"+
    "\16\44\1\0\1\46\1\0\1\44\1\45\1\111\5\44"+
    "\1\112\1\44\1\113\1\114\11\44\1\115\1\116\1\44"+
    "\1\117\1\120\3\44\1\121\1\122\13\44\1\123\11\44"+
    "\1\0\1\111\1\0\1\44\1\45\1\46\1\44\1\124"+
    "\2\44\1\125\4\124\2\44\1\124\2\44\1\126\3\44"+
    "\3\124\1\127\10\124\5\44\11\124\4\126\1\124\1\0"+
    "\1\46\1\0\1\44\1\45\1\46\1\44\1\130\2\44"+
    "\1\131\4\130\2\44\1\130\1\44\2\132\3\44\14\130"+
    "\5\44\11\130\1\44\3\132\1\130\1\0\1\46\1\132"+
    "\1\44\1\45\1\46\1\44\1\133\3\44\4\133\2\44"+
    "\1\133\6\44\14\133\2\44\1\134\2\44\11\133\4\44"+
    "\1\133\1\0\1\46\1\0\1\44\1\45\1\135\61\44"+
    "\1\0\1\135\1\0\1\44\1\45\1\46\1\44\1\136"+
    "\3\44\4\136\2\44\1\136\6\44\14\136\5\44\11\136"+
    "\4\44\1\136\1\0\1\46\1\0\1\44\1\45\1\46"+
    "\11\44\1\137\47\44\1\0\1\46\1\0\1\44\1\45"+
    "\1\46\1\44\1\140\3\44\4\140\2\44\1\140\6\44"+
    "\14\140\5\44\11\140\4\44\1\140\1\0\1\46\1\0"+
    "\1\44\1\45\1\46\42\44\1\141\16\44\1\0\1\46"+
    "\1\0\1\44\1\45\1\142\61\44\1\0\1\142\1\0"+
    "\1\44\1\45\1\46\1\44\1\143\3\44\4\143\2\44"+
    "\1\143\6\44\14\143\5\44\11\143\4\44\1\143\1\0"+
    "\1\46\1\0\1\44\1\45\1\46\1\44\1\144\3\44"+
    "\4\144\2\44\1\144\6\44\14\144\5\44\11\144\4\44"+
    "\1\144\1\0\1\46\1\0\1\44\1\45\1\46\11\44"+
    "\1\145\47\44\1\0\1\46\1\0\1\44\1\45\1\46"+
    "\1\44\1\146\3\44\4\146\2\44\1\146\6\44\14\146"+
    "\5\44\11\146\4\44\1\146\1\0\1\46\1\0\1\44"+
    "\1\45\1\147\21\44\1\150\37\44\1\0\1\147\1\0"+
    "\1\44\1\45\1\46\26\44\1\151\1\44\1\152\3\44"+
    "\1\153\24\44\1\0\1\46\71\0\1\45\67\0\1\46"+
    "\62\0\1\46\4\0\1\154\74\0\1\155\104\0\1\156"+
    "\43\0\1\56\3\0\4\56\2\0\1\56\6\0\14\56"+
    "\5\0\11\56\4\0\1\56\5\0\1\157\4\0\1\160"+
    "\55\0\1\157\12\0\1\161\57\0\1\162\14\0\1\163"+
    "\45\0\1\162\5\0\1\62\3\0\4\62\2\0\1\62"+
    "\6\0\14\62\5\0\11\62\4\0\1\62\7\0\1\64"+
    "\3\0\4\64\2\0\1\64\1\0\2\64\3\0\14\64"+
    "\5\0\11\64\1\0\4\64\2\0\1\64\26\0\1\164"+
    "\72\0\1\165\72\0\1\166\34\0\1\72\3\0\4\72"+
    "\2\0\1\72\6\0\14\72\5\0\11\72\4\0\1\72"+
    "\7\0\1\74\3\0\4\74\2\0\1\74\1\0\2\74"+
    "\3\0\14\74\5\0\11\74\1\0\4\74\2\0\1\74"+
    "\2\0\1\100\21\0\1\77\40\0\1\100\5\0\1\101"+
    "\3\0\5\101\1\0\1\101\1\0\2\101\3\0\14\101"+
    "\5\0\11\101\1\0\4\101\2\0\1\101\2\0\1\102"+
    "\41\0\1\167\20\0\1\102\12\0\1\170\106\0\1\171"+
    "\3\0\1\172\57\0\1\173\2\0\1\174\66\0\1\175"+
    "\71\0\1\176\34\0\1\111\2\0\1\177\1\200\56\0"+
    "\1\111\27\0\1\201\72\0\1\202\65\0\1\203\72\0"+
    "\1\204\11\0\1\205\47\0\1\206\30\0\1\207\36\0"+
    "\1\210\65\0\1\211\66\0\1\212\16\0\1\213\50\0"+
    "\1\214\72\0\1\215\35\0\1\124\3\0\4\124\2\0"+
    "\1\124\1\0\2\124\3\0\14\124\5\0\11\124\1\0"+
    "\4\124\2\0\1\124\1\216\1\0\5\216\1\217\57\216"+
    "\21\0\1\126\35\0\4\126\10\0\1\124\3\0\4\124"+
    "\2\0\1\124\1\0\2\124\3\0\4\124\1\220\7\124"+
    "\5\0\11\124\1\0\4\124\2\0\1\124\4\0\1\130"+
    "\3\0\4\130\1\221\1\0\1\130\1\0\2\132\2\0"+
    "\1\222\14\130\5\0\11\130\1\0\3\132\1\130\2\0"+
    "\1\132\1\223\1\0\65\223\4\0\1\132\3\0\4\132"+
    "\2\0\1\132\1\0\2\132\2\0\1\222\14\132\5\0"+
    "\11\132\1\0\4\132\2\0\1\132\4\0\1\133\3\0"+
    "\5\133\1\0\1\133\1\0\2\133\3\0\14\133\5\0"+
    "\11\133\1\0\4\133\2\0\1\133\2\0\1\135\41\0"+
    "\1\224\20\0\1\135\5\0\1\136\3\0\4\136\2\0"+
    "\1\136\6\0\14\136\5\0\11\136\4\0\1\136\7\0"+
    "\1\140\3\0\4\140\2\0\1\140\1\0\2\140\3\0"+
    "\14\140\5\0\11\140\1\0\4\140\2\0\1\140\2\0"+
    "\1\142\3\0\1\225\26\0\1\226\27\0\1\142\5\0"+
    "\1\227\3\0\4\227\1\230\1\0\1\227\6\0\14\227"+
    "\5\0\11\227\4\0\1\227\7\0\1\144\3\0\4\144"+
    "\2\0\1\144\6\0\14\144\5\0\11\144\4\0\1\144"+
    "\7\0\1\146\3\0\4\146\2\0\1\146\1\0\2\146"+
    "\3\0\14\146\5\0\11\146\1\0\4\146\2\0\1\146"+
    "\2\0\1\147\21\0\1\150\40\0\1\147\13\0\1\231"+
    "\110\0\1\232\67\0\1\233\31\0\1\154\1\0\65\154"+
    "\34\0\1\234\43\0\1\235\66\0\1\236\104\0\1\237"+
    "\72\0\1\240\46\0\1\241\105\0\1\242\103\0\1\243"+
    "\30\0\1\244\105\0\1\245\67\0\1\246\65\0\1\247"+
    "\73\0\1\250\33\0\1\251\62\0\1\251\3\0\1\252"+
    "\62\0\1\252\34\0\1\253\61\0\1\254\2\0\1\255"+
    "\67\0\1\256\64\0\1\257\75\0\1\260\62\0\1\261"+
    "\115\0\1\262\56\0\1\263\54\0\1\264\63\0\1\265"+
    "\42\0\1\266\106\0\1\267\75\0\1\270\32\0\1\124"+
    "\3\0\4\124\2\0\1\124\1\0\2\124\3\0\14\124"+
    "\5\0\5\124\1\271\3\124\1\0\4\124\2\0\1\124"+
    "\4\0\1\272\3\0\4\272\2\0\1\272\6\0\14\272"+
    "\5\0\11\272\4\0\1\272\5\0\1\222\1\0\1\132"+
    "\3\0\4\132\2\0\1\132\1\0\2\132\3\0\14\132"+
    "\5\0\11\132\1\0\4\132\1\0\1\222\1\132\1\223"+
    "\1\0\5\223\1\273\57\223\2\0\1\274\62\0\1\274"+
    "\50\0\1\275\23\0\1\276\3\0\4\276\2\0\1\276"+
    "\6\0\14\276\5\0\11\276\4\0\1\276\14\0\1\277"+
    "\127\0\1\300\65\0\1\301\42\0\1\302\75\0\1\303"+
    "\44\0\1\304\102\0\1\305\74\0\1\306\43\0\1\307"+
    "\103\0\1\310\76\0\1\311\64\0\1\312\67\0\1\313"+
    "\70\0\1\314\75\0\1\312\74\0\1\315\45\0\1\316"+
    "\60\0\1\317\52\0\1\320\66\0\1\321\110\0\1\322"+
    "\44\0\1\323\111\0\1\324\62\0\1\325\105\0\1\326"+
    "\50\0\1\327\74\0\1\330\60\0\1\331\50\0\1\332"+
    "\107\0\1\256\36\0\1\124\3\0\4\124\2\0\1\124"+
    "\1\0\2\124\3\0\14\124\3\0\1\333\1\0\11\124"+
    "\1\0\4\124\2\0\1\124\4\0\1\272\3\0\4\272"+
    "\2\0\1\272\1\0\2\272\3\0\14\272\5\0\11\272"+
    "\1\0\4\272\2\0\1\272\11\0\1\334\61\0\1\276"+
    "\3\0\4\276\2\0\1\276\1\0\2\276\3\0\14\276"+
    "\5\0\11\276\1\0\4\276\2\0\1\276\26\0\1\335"+
    "\75\0\1\336\62\0\1\337\46\0\1\340\105\0\1\341"+
    "\51\0\1\342\1\343\102\0\1\344\70\0\1\345\66\0"+
    "\1\346\64\0\1\347\75\0\1\244\61\0\1\350\70\0"+
    "\1\351\64\0\1\352\70\0\1\262\67\0\1\353\65\0"+
    "\1\354\67\0\1\355\66\0\1\356\57\0\1\357\67\0"+
    "\1\360\76\0\1\361\57\0\1\362\107\0\1\363\55\0"+
    "\1\364\37\0\1\365\122\0\1\366\52\0\1\367\66\0"+
    "\1\370\104\0\1\371\66\0\1\372\70\0\1\373\50\0"+
    "\1\374\47\0\1\343\55\0\1\375\120\0\1\376\66\0"+
    "\1\377\77\0\1\u0100\71\0\1\312\52\0\1\u0101\65\0"+
    "\1\u0102\64\0\1\u0103\74\0\1\u0104\64\0\1\u0105\41\0"+
    "\1\u0106\67\0\1\u0105\110\0\1\u0107\71\0\1\u0108\101\0"+
    "\1\u0109\77\0\1\u010a\35\0\1\u010b\42\0\1\u010c\120\0"+
    "\1\u010d\56\0\1\u010e\75\0\1\372\40\0\1\u010f\67\0"+
    "\1\u0110\67\0\1\u0111\56\0\1\u0112\121\0\1\u0113\70\0"+
    "\1\u0114\52\0\1\u0115\72\0\1\312\110\0\1\u0116\65\0"+
    "\1\325\26\0\1\u0117\114\0\1\u0118\60\0\1\353\70\0"+
    "\1\u0119\44\0\1\u011a\114\0\1\u011b\63\0\1\u011c\66\0"+
    "\1\u011d\53\0\1\u011e\35\0\4\u011e\36\0\1\u011f\47\0"+
    "\1\u010f\107\0\1\u0120\34\0\1\u0111\3\0\1\u0121\56\0"+
    "\1\u0111\4\0\1\u0122\4\0\4\u0122\1\0\2\u0122\2\0"+
    "\1\u0122\3\0\15\u0122\4\0\11\u0122\2\0\3\u0122\42\0"+
    "\1\u0123\40\0\1\u0124\57\0\1\u0115\6\0\1\u0125\20\0"+
    "\1\u0126\5\0\1\u0127\24\0\1\u0115\35\0\1\u0128\66\0"+
    "\1\u0129\66\0\1\325\40\0\1\u012a\114\0\1\u012b\60\0"+
    "\1\u012c\72\0\1\u012d\71\0\1\u0104\46\0\1\u012e\105\0"+
    "\1\u012f\34\0\1\u0120\3\0\1\u0130\56\0\1\u0120\35\0"+
    "\1\u0131\66\0\1\u0132\60\0\1\u0133\50\0\1\u0134\110\0"+
    "\1\u0135\67\0\1\325\42\0\1\u0136\20\0\1\u0137\65\0"+
    "\1\u0138\77\0\1\u0139\34\0\1\u013a\101\0\1\325\35\0"+
    "\4\325\41\0\1\u013b\60\0\1\u013c\77\0\1\u013d\57\0"+
    "\1\u013e\71\0\1\u013f\101\0\1\u0140\50\0\1\325\46\0"+
    "\1\325\66\0\1\u0141\64\0\1\u0142\70\0\1\u0143\66\0"+
    "\1\u0144\65\0\1\u0145\104\0\1\u0146\70\0\1\u0147\66\0"+
    "\1\u0148\44\0\1\u0149\134\0\1\u014a\46\0\1\u014b\67\0"+
    "\1\u014c\42\0\1\u014d\115\0\1\u014e\66\0\1\u014f\37\0"+
    "\1\u0150\70\0\1\u0151\107\0\1\u0152\65\0\1\u0153\65\0"+
    "\1\u0154\70\0\1\u0155\66\0\1\u0156\66\0\1\u0157\63\0"+
    "\1\u0158\104\0\1\u0159\70\0\1\u015a\51\0\1\u015b\61\0"+
    "\1\u015c\76\0\1\u015d\53\0\1\u015e\116\0\1\u015f\37\0"+
    "\1\325\114\0\1\u0160\50\0\1\312\42\0\1\312\103\0"+
    "\1\u0161\42\0\1\u015e\7\0\1\u0162\25\0\1\u0163\24\0"+
    "\1\u015e\35\0\1\u0164\63\0\1\u0165\50\0\1\u0166\101\0"+
    "\1\u0167\75\0\1\u0168\61\0\1\u0169\70\0\1\u016a\45\0"+
    "\1\u016b\115\0\1\u016c\37\0\1\u016d\103\0\1\u016e\73\0"+
    "\1\u016f\55\0\1\u0170\120\0\1\u0171\46\0\1\u0172\115\0"+
    "\1\u0173\12\0\1\325\111\0\1\u0174\5\0\1\u0175\62\0"+
    "\1\u0176\100\0\1\u0177\54\0\1\u016a\66\0\1\u0178\63\0"+
    "\1\u0179\67\0\1\u017a\65\0\1\u017b\50\0\1\u017c\122\0"+
    "\1\u017d\41\0\1\u017e\76\0\1\u017f\65\0\1\u0180\65\0"+
    "\1\u0181\47\0\1\u0182\126\0\1\u0183\64\0\1\u0184\30\0"+
    "\1\u0185\126\0\1\u0186\37\0\1\u0187\76\0\1\u0188\66\0"+
    "\1\u0189\46\0\1\u018a\111\0\1\u018b\71\0\1\u018c\77\0"+
    "\1\u018d\51\0\1\u018e\101\0\1\u018f\53\0\1\u0190\55\0"+
    "\1\312\1\u0191\50\0\1\u0192\71\0\1\u0193\125\0\1\u0194"+
    "\70\0\1\u0195\23\0\1\u0196\110\0\1\u0197\104\0\1\u0198"+
    "\56\0\1\u0199\41\0\1\u019a\13\0\1\u019b\11\0\1\u019c"+
    "\11\0\1\u019d\71\0\1\u019e\41\0\1\u019f\73\0\1\u01a0"+
    "\66\0\1\u01a1\56\0\1\u019a\72\0\1\u01a2\3\0\1\u01a3"+
    "\57\0\1\u01a4\2\0\1\u01a5\71\0\1\u01a6\65\0\1\u01a7"+
    "\101\0\1\u01a8\66\0\1\u01a9\50\0\1\u01aa\47\0\1\u01ab"+
    "\114\0\1\u01a9\66\0\1\u01ac\66\0\1\u01ad\66\0\1\u01ae"+
    "\52\0\1\312\77\0\1\u01af\43\0\1\u01b0\111\0\1\u01b1"+
    "\65\0\1\u01b2\67\0\1\u01b3\66\0\1\u01a8\41\0\1\u01b4"+
    "\113\0\1\u01b5\100\0\1\u01b6\54\0\1\u01b7\72\0\1\u01b8"+
    "\51\0\1\312\1\u01b9\72\0\1\u01ba\67\0\1\u01bb\67\0"+
    "\1\u01af\45\0\1\u01bc\102\0\1\u01bd\52\0\1\u01be\107\0"+
    "\1\u01bf\112\0\1\u01c0\36\0\1\u01c1\112\0\1\u01c2\65\0"+
    "\1\u01af\52\0\1\u01c3\56\0\1\u01c4\72\0\1\u01a5\67\0"+
    "\1\u01c5\70\0\1\u01c6\66\0\1\u01c7\40\0\1\u01c8\110\0"+
    "\1\u01c9\45\0\1\u01ca\70\0\1\u01cb\55\0\1\u01cc\1\0"+
    "\65\u01cc\6\0\1\u01cd\60\0\1\u01cc\1\0\5\u01cc\1\u01ce"+
    "\57\u01cc\11\0\1\u01cf\40\0\1\u01d0\14\0\1\u01cc\1\0"+
    "\5\u01cc\1\u01ce\13\u01cc\1\u01d1\43\u01cc\32\0\1\u01d2\71\0"+
    "\1\u01d3\100\0\1\u01ae\56\0\1\u01d4\42\0\1\u01ae\53\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[23430];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\43\0\1\11\3\1\2\11\2\1\2\11\5\1\1\11"+
    "\1\1\2\11\4\1\1\11\1\1\1\11\1\1\1\11"+
    "\10\1\1\11\23\1\1\11\2\1\1\11\1\1\1\11"+
    "\3\1\1\11\2\1\1\11\4\1\3\0\1\11\2\0"+
    "\1\11\3\0\1\11\27\0\2\1\3\0\1\11\24\0"+
    "\2\1\16\0\4\1\1\0\1\1\13\0\1\11\12\0"+
    "\1\11\16\0\1\11\21\0\1\11\11\0\1\1\16\0"+
    "\1\11\21\0\1\11\1\1\1\0\1\11\13\0\2\11"+
    "\22\0\1\1\16\0\1\11\3\0\1\1\23\0\1\1"+
    "\27\0\1\1\115\0\1\1\3\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[468];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    int size = 0;
    for (int i = 0, length = packed.length(); i < length; i += 2) {
      size += packed.charAt(i);
    }
    char[] map = new char[size];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < packed.length()) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL/*, zzEndReadL*/);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + ZZ_CMAP(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return TokenType.BAD_CHARACTER;
            }
          case 51: break;
          case 2: 
            { yybegin(YYINITIAL); return TokenType.WHITE_SPACE;
            }
          case 52: break;
          case 3: 
            { return TokenType.WHITE_SPACE;
            }
          case 53: break;
          case 4: 
            { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
            }
          case 54: break;
          case 5: 
            { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
            }
          case 55: break;
          case 6: 
            { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
            }
          case 56: break;
          case 7: 
            { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
            }
          case 57: break;
          case 8: 
            { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
            }
          case 58: break;
          case 9: 
            { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 59: break;
          case 10: 
            { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 60: break;
          case 11: 
            { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 61: break;
          case 12: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
            }
          case 62: break;
          case 13: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
            }
          case 63: break;
          case 14: 
            { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
            }
          case 64: break;
          case 15: 
            { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
            }
          case 65: break;
          case 16: 
            { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
            }
          case 66: break;
          case 17: 
            { yybegin(NODE_TYPE_INHERITANCE);
            }
          case 67: break;
          case 18: 
            { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
            }
          case 68: break;
          case 19: 
            { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
            }
          case 69: break;
          case 20: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 70: break;
          case 21: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 71: break;
          case 22: 
            { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
            }
          case 72: break;
          case 23: 
            { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
            }
          case 73: break;
          case 24: 
            { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 74: break;
          case 25: 
            { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 75: break;
          case 26: 
            { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 76: break;
          case 27: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
            }
          case 77: break;
          case 28: 
            { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
            }
          case 78: break;
          case 29: 
            { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
            }
          case 79: break;
          case 30: 
            { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
            }
          case 80: break;
          case 31: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
            }
          case 81: break;
          case 32: 
            { yybegin(YYINITIAL); return CndTypes.COMMENT;
            }
          case 82: break;
          case 33: 
            { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
            }
          case 83: break;
          case 34: 
            { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
            }
          case 84: break;
          case 35: 
            { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 85: break;
          case 36: 
            { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
            }
          case 86: break;
          case 37: 
            { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
            }
          case 87: break;
          case 38: 
            { yybegin(PROPERTY_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 88: break;
          case 39: 
            { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
            }
          case 89: break;
          case 40: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
            }
          case 90: break;
          case 41: 
            { yybegin(PROPERTY_TYPE_DONE); return CndTypes.PROPERTY_TYPE;
            }
          case 91: break;
          case 42: 
            { yybegin(PROPERTY_ADDENDUM); return CndTypes.PROPERTY_ATTRIBUTE;
            }
          case 92: break;
          case 43: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
            }
          case 93: break;
          case 44: 
            { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
            }
          case 94: break;
          case 45: 
            { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
            }
          case 95: break;
          case 46: 
            { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
            }
          case 96: break;
          case 47: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
            }
          case 97: break;
          case 48: 
            { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
            }
          case 98: break;
          case 49: 
            { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
            }
          case 99: break;
          case 50: 
            { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
            }
          case 100: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
