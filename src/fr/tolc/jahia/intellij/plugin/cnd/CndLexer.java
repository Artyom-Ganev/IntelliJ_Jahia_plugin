/* The following code was generated by JFlex 1.4.3 on 28/09/16 23:47 */

package fr.tolc.jahia.intellij.plugin.cnd;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import fr.tolc.jahia.intellij.plugin.cnd.psi.CndTypes;
import com.intellij.psi.TokenType;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 28/09/16 23:47 from the specification file
 * <tt>E:/Projects/Smile/IntelliJ_Jahia_plugin/src/fr/tolc/jahia/intellij/plugin/cnd/Cnd.flex</tt>
 */
class CndLexer implements FlexLexer {
  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int PROPERTY_TYPE_DONE_WEAKREFERENCE = 78;
  public static final int NODE_TYPE_INHERITANCE_BEGIN = 22;
  public static final int PROPERTY_ADDENDUM_DOUBLE = 50;
  public static final int EXTEND_COLON_DONE = 110;
  public static final int PROPERTY_ADDENDUM_STRING_TEXT = 68;
  public static final int PROPERTY_ADDENDUM_WEAKREFERENCE = 80;
  public static final int NAMESPACE_EQUAL_DONE = 6;
  public static final int EXTEND_BEGIN = 106;
  public static final int NAMESPACES_OVER = 10;
  public static final int PROPERTY_PLUS_NAME_DONE = 92;
  public static final int PROPERTY_PLUS_DEFAULT_BEGIN = 104;
  public static final int PROPERTY_TYPE_DONE_STRING_TEXT = 66;
  public static final int NODE_TYPE_DECLARATION_COLON_DONE = 16;
  public static final int PROPERTY_TYPE_DONE = 36;
  public static final int PROPERTY_DEFAULT_BEGIN_DOUBLE = 52;
  public static final int PROPERTY_PLUS_TYPE_BEGIN = 94;
  public static final int NODE_TYPE_INHERITANCE_COLON_DONE = 26;
  public static final int YYINITIAL = 0;
  public static final int PROPERTY_TYPE_DONE_BOOLEAN = 54;
  public static final int PROPERTY_DEFAULT_BEGIN_DATE = 64;
  public static final int NAMESPACE_URI_DONE = 8;
  public static final int NODE_TYPE_DECLARATION_NAMESPACE_DONE = 14;
  public static final int EXTEND_ITEM_BEGIN = 114;
  public static final int PROPERTY_ADDENDUM_ATTR = 84;
  public static final int EXTEND_DONE = 112;
  public static final int NODE_TYPE_DECLARATION_TYPE_DONE = 18;
  public static final int PROPERTY_TYPE_DONE_LONG = 42;
  public static final int PROPERTY_PLUS_NAMESPACE_DONE = 96;
  public static final int NODE_TYPE_INHERITANCE_NAMESPACE_DONE = 24;
  public static final int PROPERTY_ADDENDUM_LONG = 44;
  public static final int PROPERTY_DEFAULT_BEGIN_BOOLEAN = 58;
  public static final int PROPERTY_PLUS_TYPE_DONE = 100;
  public static final int PROPERTY_TYPE_DONE_BINARY = 38;
  public static final int NODE_TYPE_INHERITANCE = 20;
  public static final int EXTEND_NAMESPACE_DONE = 108;
  public static final int PROPERTY_PLUS_COLON_DONE = 98;
  public static final int NAMESPACE_BEGIN = 2;
  public static final int PROPERTY_ADDENDUM_STRING_CHOICELIST = 74;
  public static final int PROPERTY_DEFAULT_BEGIN = 86;
  public static final int PROPERTY_MINUS_BEGIN = 30;
  public static final int NODE_TYPE_INHERITANCE_TYPE_DONE = 28;
  public static final int PROPERTY_ADDENDUM_BINARY = 40;
  public static final int PROPERTY_TYPE_BEGIN = 34;
  public static final int PROPERTY_ADDENDUM = 82;
  public static final int NAMESPACE_NAME_DONE = 4;
  public static final int PROPERTY_PLUS_BEGIN = 90;
  public static final int NODE_TYPE_DECLARATION_BEGIN = 12;
  public static final int PROPERTY_ADDENDUM_BOOLEAN = 56;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_TEXT = 70;
  public static final int PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST = 76;
  public static final int PROPERTY_NAME_DONE = 32;
  public static final int PROPERTY_TYPE_DONE_DATE = 60;
  public static final int PROPERTY_CONSTRAINT_BEGIN = 88;
  public static final int PROPERTY_PLUS_ADDENDUM = 102;
  public static final int PROPERTY_TYPE_DONE_STRING_CHOICELIST = 72;
  public static final int PROPERTY_TYPE_DONE_DOUBLE = 48;
  public static final int PROPERTY_DEFAULT_BEGIN_LONG = 46;
  public static final int PROPERTY_ADDENDUM_DATE = 62;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5,  5,  6,  6,  7,  7, 
     8,  8,  9,  9, 10, 10, 11, 11, 12, 12, 13, 13, 14, 14, 15, 15, 
    16, 16, 17, 17,  5,  5, 18, 18,  5,  5, 19, 19, 20, 20, 21, 21, 
    22, 22, 23, 23, 24, 24, 25, 25, 26, 26, 27, 27, 28, 28, 29, 29, 
    30, 30, 31, 31, 32, 32, 33, 33, 34, 34, 35, 35, 36, 36, 18, 18, 
     5,  5,  5,  5, 37, 37,  5,  5, 38, 38, 39, 39, 40, 40, 41, 41, 
    42, 42, 43, 43, 44, 44, 45, 45, 46, 46, 47, 47, 48, 48, 49, 49, 
    50, 50, 51, 51
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\21\1\3\1\1\1\0\1\3\1\2\16\21\4\0\1\3\3\0"+
    "\1\5\2\0\1\10\1\45\1\46\1\44\1\43\1\25\1\42\1\16"+
    "\1\4\1\62\1\50\1\63\1\64\2\65\2\22\1\51\1\22\1\15"+
    "\1\0\1\6\1\7\1\20\2\0\1\36\1\37\1\41\1\34\1\35"+
    "\1\53\1\61\1\11\1\27\1\17\1\54\1\40\1\26\1\31\1\32"+
    "\1\13\1\17\1\33\1\14\1\12\1\52\1\60\1\56\1\30\1\47"+
    "\1\55\1\23\1\0\1\24\1\0\1\17\1\0\1\36\1\37\1\41"+
    "\1\34\1\35\1\53\1\61\1\11\1\27\1\17\1\54\1\40\1\26"+
    "\1\31\1\32\1\13\1\17\1\33\1\66\1\12\1\52\1\60\1\67"+
    "\1\30\1\47\1\55\4\0\41\21\2\0\4\5\4\0\1\5\2\0"+
    "\1\21\7\0\1\5\4\0\1\5\5\0\27\5\1\0\37\5\1\0"+
    "\u01ca\5\4\0\14\5\16\0\5\5\7\0\1\5\1\0\1\5\21\0"+
    "\160\21\5\5\1\0\2\5\2\0\4\5\10\0\1\5\1\0\3\5"+
    "\1\0\1\5\1\0\24\5\1\0\123\5\1\0\213\5\1\0\5\21"+
    "\2\0\236\5\11\0\46\5\2\0\1\5\7\0\47\5\7\0\1\5"+
    "\1\0\55\21\1\0\1\21\1\0\2\21\1\0\2\21\1\0\1\21"+
    "\10\0\33\5\5\0\3\5\15\0\5\21\6\0\1\5\4\0\13\21"+
    "\5\0\53\5\25\21\12\57\4\0\2\5\1\21\143\5\1\0\1\5"+
    "\10\21\1\0\6\21\2\5\2\21\1\0\4\21\2\5\12\57\3\5"+
    "\2\0\1\5\17\0\1\21\1\5\1\21\36\5\33\21\2\0\131\5"+
    "\13\21\1\5\16\0\12\57\41\5\11\21\2\5\4\0\1\5\5\0"+
    "\26\5\4\21\1\5\11\21\1\5\3\21\1\5\5\21\22\0\31\5"+
    "\3\21\104\0\1\5\1\0\13\5\67\0\33\21\1\0\4\21\66\5"+
    "\3\21\1\5\22\21\1\5\7\21\12\5\2\21\2\0\12\57\1\0"+
    "\7\5\1\0\7\5\1\0\3\21\1\0\10\5\2\0\2\5\2\0"+
    "\26\5\1\0\7\5\1\0\1\5\3\0\4\5\2\0\1\21\1\5"+
    "\7\21\2\0\2\21\2\0\3\21\1\5\10\0\1\21\4\0\2\5"+
    "\1\0\3\5\2\21\2\0\12\57\4\5\7\0\1\5\5\0\3\21"+
    "\1\0\6\5\4\0\2\5\2\0\26\5\1\0\7\5\1\0\2\5"+
    "\1\0\2\5\1\0\2\5\2\0\1\21\1\0\5\21\4\0\2\21"+
    "\2\0\3\21\3\0\1\21\7\0\4\5\1\0\1\5\7\0\12\57"+
    "\2\21\3\5\1\21\13\0\3\21\1\0\11\5\1\0\3\5\1\0"+
    "\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\21\1\5"+
    "\10\21\1\0\3\21\1\0\3\21\2\0\1\5\17\0\2\5\2\21"+
    "\2\0\12\57\1\0\1\5\17\0\3\21\1\0\10\5\2\0\2\5"+
    "\2\0\26\5\1\0\7\5\1\0\2\5\1\0\5\5\2\0\1\21"+
    "\1\5\7\21\2\0\2\21\2\0\3\21\10\0\2\21\4\0\2\5"+
    "\1\0\3\5\2\21\2\0\12\57\1\0\1\5\20\0\1\21\1\5"+
    "\1\0\6\5\3\0\3\5\1\0\4\5\3\0\2\5\1\0\1\5"+
    "\1\0\2\5\3\0\2\5\3\0\3\5\3\0\14\5\4\0\5\21"+
    "\3\0\3\21\1\0\4\21\2\0\1\5\6\0\1\21\16\0\12\57"+
    "\11\0\1\5\7\0\3\21\1\0\10\5\1\0\3\5\1\0\27\5"+
    "\1\0\12\5\1\0\5\5\3\0\1\5\7\21\1\0\3\21\1\0"+
    "\4\21\7\0\2\21\1\0\2\5\6\0\2\5\2\21\2\0\12\57"+
    "\22\0\2\21\1\0\10\5\1\0\3\5\1\0\27\5\1\0\12\5"+
    "\1\0\5\5\2\0\1\21\1\5\7\21\1\0\3\21\1\0\4\21"+
    "\7\0\2\21\7\0\1\5\1\0\2\5\2\21\2\0\12\57\1\0"+
    "\2\5\17\0\2\21\1\0\10\5\1\0\3\5\1\0\51\5\2\0"+
    "\1\5\7\21\1\0\3\21\1\0\4\21\1\5\10\0\1\21\10\0"+
    "\2\5\2\21\2\0\12\57\12\0\6\5\2\0\2\21\1\0\22\5"+
    "\3\0\30\5\1\0\11\5\1\0\1\5\2\0\7\5\3\0\1\21"+
    "\4\0\6\21\1\0\1\21\1\0\10\21\22\0\2\21\15\0\60\5"+
    "\1\21\2\5\7\21\4\0\10\5\10\21\1\0\12\57\47\0\2\5"+
    "\1\0\1\5\2\0\2\5\1\0\1\5\2\0\1\5\6\0\4\5"+
    "\1\0\7\5\1\0\3\5\1\0\1\5\1\0\1\5\2\0\2\5"+
    "\1\0\4\5\1\21\2\5\6\21\1\0\2\21\1\5\2\0\5\5"+
    "\1\0\1\5\1\0\6\21\2\0\12\57\2\0\4\5\40\0\1\5"+
    "\27\0\2\21\6\0\12\57\13\0\1\21\1\0\1\21\1\0\1\21"+
    "\4\0\2\21\10\5\1\0\44\5\4\0\24\21\1\0\2\21\5\5"+
    "\13\21\1\0\44\21\11\0\1\21\71\0\53\5\24\21\1\5\12\57"+
    "\6\0\6\5\4\21\4\5\3\21\1\5\3\21\2\5\7\21\3\5"+
    "\4\21\15\5\14\21\1\5\1\21\12\57\4\21\2\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\53\5\1\0\u014d\5\1\0\4\5\2\0"+
    "\7\5\1\0\1\5\1\0\4\5\2\0\51\5\1\0\4\5\2\0"+
    "\41\5\1\0\4\5\2\0\7\5\1\0\1\5\1\0\4\5\2\0"+
    "\17\5\1\0\71\5\1\0\4\5\2\0\103\5\2\0\3\21\40\0"+
    "\20\5\20\0\125\5\14\0\u026c\5\2\0\21\5\1\0\32\5\5\0"+
    "\113\5\3\0\3\5\17\0\15\5\1\0\4\5\3\21\13\0\22\5"+
    "\3\21\13\0\22\5\2\21\14\0\15\5\1\0\3\5\1\0\2\21"+
    "\14\0\64\5\40\21\3\0\1\5\3\0\2\5\1\21\2\0\12\57"+
    "\41\0\3\21\2\0\12\57\6\0\130\5\10\0\51\5\1\21\1\5"+
    "\5\0\106\5\12\0\35\5\3\0\14\21\4\0\14\21\12\0\12\57"+
    "\36\5\2\0\5\5\13\0\54\5\4\0\21\21\7\5\2\21\6\0"+
    "\12\57\46\0\27\5\5\21\4\0\65\5\12\21\1\0\35\21\2\0"+
    "\1\21\12\57\6\0\12\57\15\0\1\5\130\0\5\21\57\5\21\21"+
    "\7\5\4\0\12\57\21\0\11\21\14\0\3\21\36\5\15\21\2\5"+
    "\12\57\54\5\16\21\14\0\44\5\24\21\10\0\12\57\3\0\3\5"+
    "\12\57\44\5\122\0\3\21\1\0\25\21\4\5\1\21\4\5\3\21"+
    "\2\5\11\0\300\5\47\21\25\0\4\21\u0116\5\2\0\6\5\2\0"+
    "\46\5\2\0\6\5\2\0\10\5\1\0\1\5\1\0\1\5\1\0"+
    "\1\5\1\0\37\5\2\0\65\5\1\0\7\5\1\0\1\5\3\0"+
    "\3\5\1\0\7\5\3\0\4\5\2\0\6\5\4\0\15\5\5\0"+
    "\3\5\1\0\7\5\16\0\5\21\32\0\5\21\20\0\2\5\23\0"+
    "\1\5\13\0\5\21\5\0\6\21\1\0\1\5\15\0\1\5\20\0"+
    "\15\5\3\0\33\5\25\0\15\21\4\0\1\21\3\0\14\21\21\0"+
    "\1\5\4\0\1\5\2\0\12\5\1\0\1\5\3\0\5\5\6\0"+
    "\1\5\1\0\1\5\1\0\1\5\1\0\4\5\1\0\13\5\2\0"+
    "\4\5\5\0\5\5\4\0\1\5\21\0\51\5\u0a77\0\57\5\1\0"+
    "\57\5\1\0\205\5\6\0\4\5\3\21\2\5\14\0\46\5\1\0"+
    "\1\5\5\0\1\5\2\0\70\5\7\0\1\5\17\0\1\21\27\5"+
    "\11\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5\1\0\7\5"+
    "\1\0\7\5\1\0\7\5\1\0\7\5\1\0\40\21\57\0\1\5"+
    "\u01d5\0\3\5\31\0\11\5\6\21\1\0\5\5\2\0\5\5\4\0"+
    "\126\5\2\0\2\21\2\0\3\5\1\0\132\5\1\0\4\5\5\0"+
    "\51\5\3\0\136\5\21\0\33\5\65\0\20\5\u0200\0\u19b6\5\112\0"+
    "\u51cd\5\63\0\u048d\5\103\0\56\5\2\0\u010d\5\3\0\20\5\12\57"+
    "\2\5\24\0\57\5\1\21\4\0\12\21\1\0\31\5\7\0\1\21"+
    "\120\5\2\21\45\0\11\5\2\0\147\5\2\0\4\5\1\0\4\5"+
    "\14\0\13\5\115\0\12\5\1\21\3\5\1\21\4\5\1\21\27\5"+
    "\5\21\20\0\1\5\7\0\64\5\14\0\2\21\62\5\21\21\13\0"+
    "\12\57\6\0\22\21\6\5\3\0\1\5\4\0\12\57\34\5\10\21"+
    "\2\0\27\5\15\21\14\0\35\5\3\0\4\21\57\5\16\21\16\0"+
    "\1\5\12\57\46\0\51\5\16\21\11\0\3\5\1\21\10\5\2\21"+
    "\2\0\12\57\6\0\27\5\3\0\1\5\1\21\4\0\60\5\1\21"+
    "\1\5\3\21\2\5\2\21\5\5\2\21\1\5\1\21\1\5\30\0"+
    "\3\5\2\0\13\5\5\21\2\0\3\5\2\21\12\0\6\5\2\0"+
    "\6\5\2\0\6\5\11\0\7\5\1\0\7\5\221\0\43\5\10\21"+
    "\1\0\2\21\2\0\12\57\6\0\u2ba4\5\14\0\27\5\4\0\61\5"+
    "\u2104\0\u016e\5\2\0\152\5\46\0\7\5\14\0\5\5\5\0\1\5"+
    "\1\21\12\5\1\0\15\5\1\0\5\5\1\0\1\5\1\0\2\5"+
    "\1\0\2\5\1\0\154\5\41\0\u016b\5\22\0\100\5\2\0\66\5"+
    "\50\0\15\5\3\0\20\21\20\0\7\21\14\0\2\5\30\0\3\5"+
    "\31\0\1\5\6\0\5\5\1\0\207\5\2\0\1\21\4\0\1\5"+
    "\13\0\12\57\7\0\32\5\4\0\1\5\1\0\32\5\13\0\131\5"+
    "\3\0\6\5\2\0\6\5\2\0\6\5\2\0\3\5\3\0\2\5"+
    "\3\0\2\5\22\0\3\21\4\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\64\0\1\1\2\2\1\3\1\1\1\4\1\5\3\1"+
    "\1\6\1\7\1\1\1\10\3\1\1\11\1\12\1\13"+
    "\1\14\1\15\3\1\1\16\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\5\1\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\27\1\33\1\1\1\34\1\27\1\35\2\1"+
    "\1\36\1\27\1\37\2\1\1\40\1\27\1\41\1\1"+
    "\1\42\1\27\1\43\2\44\1\45\12\1\1\46\1\1"+
    "\1\46\2\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\3\1\1\56\1\57\1\60\1\61\5\1\1\62\3\0"+
    "\1\63\1\0\1\64\2\0\1\65\21\0\1\66\1\44"+
    "\47\0\1\67\22\0\2\46\2\0\1\70\16\0\1\71"+
    "\2\0\1\72\1\0\1\73\11\0\1\74\21\0\1\75"+
    "\10\0\1\76\30\0\1\77\1\100\1\101\21\0\1\102"+
    "\10\0\1\103\14\0\1\104\3\0\1\105\1\106\1\0"+
    "\1\107\14\0\1\110\1\111\1\112\26\0\1\77\22\0"+
    "\1\113\15\0\1\77\16\0\1\114\11\0\1\113\27\0"+
    "\1\113\25\0\1\114\3\0\1\113\111\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\70\0\160\0\250\0\340\0\u0118\0\u0150\0\u0188"+
    "\0\u01c0\0\u01f8\0\u0230\0\u0268\0\u02a0\0\u02d8\0\u0310\0\u0348"+
    "\0\u0380\0\u03b8\0\u03f0\0\u0428\0\u0460\0\u0498\0\u04d0\0\u0508"+
    "\0\u0540\0\u0578\0\u05b0\0\u05e8\0\u0620\0\u0658\0\u0690\0\u06c8"+
    "\0\u0700\0\u0738\0\u0770\0\u07a8\0\u07e0\0\u0818\0\u0850\0\u0888"+
    "\0\u08c0\0\u08f8\0\u0930\0\u0968\0\u09a0\0\u09d8\0\u0a10\0\u0a48"+
    "\0\u0a80\0\u0ab8\0\u0af0\0\u0b28\0\u0b60\0\u0b60\0\u0b98\0\u0bd0"+
    "\0\u0c08\0\u0b60\0\u0b60\0\u0c40\0\u0c78\0\u0cb0\0\u0b60\0\u0b60"+
    "\0\u0ce8\0\u0d20\0\u0d58\0\u0d90\0\u0dc8\0\u0e00\0\u0b60\0\u0e38"+
    "\0\u0b60\0\u0b60\0\u0e70\0\u0ea8\0\u0ee0\0\u0f18\0\u0b60\0\u0f50"+
    "\0\u0f88\0\u0b60\0\u0fc0\0\u0b60\0\u0ff8\0\u1030\0\u1068\0\u10a0"+
    "\0\u10d8\0\u0b60\0\u0b60\0\u1110\0\u0b60\0\u1148\0\u0b60\0\u1180"+
    "\0\u0b60\0\u11b8\0\u0b60\0\u11f0\0\u0b60\0\u1228\0\u1260\0\u0b60"+
    "\0\u1298\0\u0b60\0\u12d0\0\u1308\0\u0b60\0\u1340\0\u0b60\0\u1378"+
    "\0\u0b60\0\u13b0\0\u0b60\0\u13e8\0\u1420\0\u0b60\0\u1458\0\u1490"+
    "\0\u14c8\0\u1500\0\u1538\0\u1570\0\u15a8\0\u15e0\0\u1618\0\u1650"+
    "\0\u1688\0\u16c0\0\u16f8\0\u1730\0\u0b60\0\u0b60\0\u1768\0\u0b60"+
    "\0\u17a0\0\u0b60\0\u0b60\0\u17d8\0\u1810\0\u1848\0\u1880\0\u0b60"+
    "\0\u18b8\0\u0b60\0\u18f0\0\u1928\0\u1960\0\u1998\0\u19d0\0\u1a08"+
    "\0\u1a40\0\u1a78\0\u1ab0\0\u1ae8\0\u0d58\0\u0b60\0\u1b20\0\u0dc8"+
    "\0\u0b60\0\u1b58\0\u1b90\0\u1bc8\0\u1c00\0\u1c38\0\u1c70\0\u1ca8"+
    "\0\u1ce0\0\u1d18\0\u1d50\0\u1d88\0\u11b8\0\u1dc0\0\u1df8\0\u1e30"+
    "\0\u1e68\0\u1378\0\u1378\0\u1ea0\0\u1ed8\0\u1f10\0\u1f48\0\u1f80"+
    "\0\u1fb8\0\u1ff0\0\u2028\0\u2060\0\u2098\0\u20d0\0\u2108\0\u2140"+
    "\0\u2178\0\u21b0\0\u21e8\0\u2220\0\u2258\0\u2290\0\u1848\0\u22c8"+
    "\0\u2300\0\u2338\0\u2370\0\u23a8\0\u23e0\0\u2418\0\u2450\0\u2488"+
    "\0\u24c0\0\u24f8\0\u2530\0\u2568\0\u25a0\0\u25d8\0\u2610\0\u2648"+
    "\0\u2680\0\u26b8\0\u26f0\0\u1d88\0\u2728\0\u2760\0\u2798\0\u27d0"+
    "\0\u2808\0\u2840\0\u2878\0\u28b0\0\u28e8\0\u2920\0\u2958\0\u2990"+
    "\0\u29c8\0\u2a00\0\u2a38\0\u2a70\0\u2aa8\0\u2ae0\0\u2b18\0\u2220"+
    "\0\u2b50\0\u2b88\0\u2bc0\0\u2bf8\0\u2c30\0\u2c68\0\u2ca0\0\u2cd8"+
    "\0\u2d10\0\u2d48\0\u2d80\0\u2db8\0\u2df0\0\u2e28\0\u2e60\0\u2e98"+
    "\0\u2ed0\0\u0b60\0\u2f08\0\u2f40\0\u0b60\0\u2f78\0\u0b60\0\u2fb0"+
    "\0\u2fe8\0\u3020\0\u3058\0\u3090\0\u30c8\0\u3100\0\u3138\0\u3170"+
    "\0\u0b60\0\u31a8\0\u31e0\0\u3218\0\u3250\0\u3288\0\u32c0\0\u32f8"+
    "\0\u3330\0\u3368\0\u33a0\0\u33d8\0\u3410\0\u3448\0\u3480\0\u34b8"+
    "\0\u34f0\0\u3528\0\u0b60\0\u3560\0\u3598\0\u35d0\0\u3608\0\u3640"+
    "\0\u3678\0\u36b0\0\u36e8\0\u0b60\0\u3720\0\u3758\0\u3790\0\u37c8"+
    "\0\u3800\0\u3838\0\u3870\0\u38a8\0\u38e0\0\u3918\0\u3950\0\u3988"+
    "\0\u39c0\0\u39f8\0\u3a30\0\u3a68\0\u3aa0\0\u3ad8\0\u3b10\0\u3b48"+
    "\0\u3b80\0\u3bb8\0\u3bf0\0\u3c28\0\u3c60\0\u0b60\0\u0b60\0\u3c98"+
    "\0\u3cd0\0\u3d08\0\u3d40\0\u3d78\0\u3db0\0\u3de8\0\u3e20\0\u3e58"+
    "\0\u3e90\0\u3ec8\0\u3f00\0\u3f38\0\u3f70\0\u3fa8\0\u3fe0\0\u4018"+
    "\0\u0b60\0\u4050\0\u4088\0\u40c0\0\u40f8\0\u4130\0\u4168\0\u3c60"+
    "\0\u41a0\0\u0b60\0\u41d8\0\u4210\0\u4248\0\u4280\0\u42b8\0\u42f0"+
    "\0\u4328\0\u4360\0\u4398\0\u43d0\0\u4408\0\u4440\0\u0b60\0\u4478"+
    "\0\u44b0\0\u44e8\0\u0b60\0\u40f8\0\u4520\0\u0b60\0\u4558\0\u4590"+
    "\0\u45c8\0\u4600\0\u4638\0\u4670\0\u46a8\0\u46e0\0\u4718\0\u4750"+
    "\0\u4788\0\u47c0\0\u0b60\0\u0b60\0\u0b60\0\u47f8\0\u4830\0\u4868"+
    "\0\u48a0\0\u48d8\0\u4910\0\u4948\0\u4980\0\u49b8\0\u49f0\0\u4a28"+
    "\0\u4a60\0\u4a98\0\u4ad0\0\u4b08\0\u4b40\0\u4b78\0\u4bb0\0\u4be8"+
    "\0\u4c20\0\u4c58\0\u4c90\0\u4cc8\0\u4d00\0\u4d38\0\u4d70\0\u4da8"+
    "\0\u4de0\0\u4e18\0\u4e50\0\u4e88\0\u4ec0\0\u4ef8\0\u4f30\0\u4f68"+
    "\0\u4fa0\0\u4fd8\0\u5010\0\u5048\0\u5080\0\u50b8\0\u50f0\0\u5128"+
    "\0\u5160\0\u5198\0\u51d0\0\u5208\0\u5240\0\u5278\0\u52b0\0\u50f0"+
    "\0\u52e8\0\u5320\0\u5358\0\u5390\0\u0b60\0\u53c8\0\u5400\0\u5438"+
    "\0\u5470\0\u54a8\0\u54e0\0\u5518\0\u5550\0\u5588\0\u55c0\0\u55f8"+
    "\0\u5630\0\u5668\0\u56a0\0\u56d8\0\u5710\0\u5748\0\u5780\0\u57b8"+
    "\0\u57f0\0\u5828\0\u5860\0\u5898\0\u58d0\0\u5908\0\u5940\0\u5978"+
    "\0\u59b0\0\u59e8\0\u5a20\0\u5a58\0\u5a90\0\u5ac8\0\u5b00\0\u5b38"+
    "\0\u5b70\0\u5ba8\0\u5be0\0\u5c18\0\u5c50\0\u5c88\0\u5cc0\0\u5cf8"+
    "\0\u5d30\0\u5d68\0\u5da0\0\u5dd8\0\u5e10\0\u5e48\0\u5e80\0\u5eb8"+
    "\0\u5ef0\0\u5f28\0\u5f60\0\u5f98\0\u5fd0\0\u6008\0\u6040\0\u6078"+
    "\0\u60b0\0\u60e8\0\u6120\0\u6158\0\u6190\0\u61c8\0\u6200\0\u6238"+
    "\0\u6270\0\u62a8\0\u62e0\0\u0b60\0\u6318\0\u6350\0\u6388\0\u0b60"+
    "\0\u63c0\0\u63f8\0\u6430\0\u6468\0\u64a0\0\u64d8\0\u6510\0\u6548"+
    "\0\u6580\0\u65b8\0\u65f0\0\u6628\0\u6660\0\u6698\0\u66d0\0\u6708"+
    "\0\u6740\0\u6778\0\u67b0\0\u67e8\0\u6820\0\u6858\0\u6890\0\u68c8"+
    "\0\u6900\0\u6938\0\u6970\0\u69a8\0\u69e0\0\u6a18\0\u6a50\0\u6a88"+
    "\0\u6ac0\0\u6af8\0\u6b30\0\u6b68\0\u6ba0\0\u6bd8\0\u6c10\0\u6c48"+
    "\0\u6c80\0\u6cb8\0\u6cf0\0\u6d28\0\u6d60\0\u6d98\0\u6dd0\0\u6e08"+
    "\0\u6e40\0\u6e78\0\u6eb0\0\u6ee8\0\u6f20\0\u6f58\0\u6f90\0\u6fc8"+
    "\0\u7000\0\u7038\0\u7070\0\u70a8\0\u70e0\0\u7118\0\u7150\0\u7188"+
    "\0\u71c0\0\u71f8\0\u7230\0\u7268\0\u72a0\0\u72d8\0\u7310\0\u7348"+
    "\0\u7380";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\65\1\66\1\67\1\70\1\71\1\65\1\72\14\65"+
    "\1\73\3\65\1\74\2\65\1\75\2\65\1\76\4\65"+
    "\1\77\1\100\25\65\1\66\1\67\1\70\1\101\1\102"+
    "\3\65\4\102\2\65\1\102\6\65\14\102\5\65\1\102"+
    "\2\65\5\102\1\65\2\102\4\65\2\102\1\65\1\66"+
    "\1\67\1\70\1\101\2\65\1\103\61\65\1\66\1\67"+
    "\1\70\1\101\4\65\1\104\57\65\1\66\1\67\1\70"+
    "\1\101\3\65\1\105\60\65\1\66\1\67\1\70\1\101"+
    "\64\65\1\66\1\67\1\70\1\101\1\106\3\65\4\106"+
    "\2\65\1\106\6\65\14\106\5\65\1\106\2\65\5\106"+
    "\1\65\2\106\4\65\2\106\1\65\1\66\1\67\1\70"+
    "\1\101\10\65\1\107\53\65\1\66\1\67\1\70\1\101"+
    "\1\110\3\65\4\110\2\65\1\110\6\65\14\110\5\65"+
    "\1\110\2\65\5\110\1\65\2\110\4\65\2\110\1\65"+
    "\1\66\1\67\1\70\1\101\17\65\1\111\44\65\1\66"+
    "\1\67\1\70\1\101\13\65\1\112\5\65\1\113\3\65"+
    "\1\114\3\65\1\115\32\65\1\66\1\67\1\70\1\101"+
    "\1\116\3\65\4\116\2\65\1\116\6\65\14\116\5\65"+
    "\1\116\2\65\5\116\1\65\2\116\4\65\2\116\1\65"+
    "\1\66\1\67\1\70\1\101\10\65\1\117\53\65\1\66"+
    "\1\67\1\70\1\101\1\120\3\65\4\120\2\65\1\120"+
    "\6\65\14\120\5\65\1\120\2\65\5\120\1\65\2\120"+
    "\4\65\2\120\1\65\1\66\1\67\1\121\1\101\20\65"+
    "\1\122\43\65\1\66\1\67\1\70\1\101\1\123\3\65"+
    "\4\123\2\65\1\123\6\65\14\123\5\65\1\123\2\65"+
    "\5\123\1\65\2\123\4\65\2\123\1\65\1\66\1\67"+
    "\1\70\1\101\40\65\1\124\23\65\1\66\1\67\1\70"+
    "\1\101\7\65\1\125\17\65\1\126\2\65\1\127\1\130"+
    "\15\65\1\131\7\65\1\125\1\131\1\65\1\66\1\67"+
    "\1\70\1\101\41\65\1\132\22\65\1\66\1\67\1\70"+
    "\1\101\41\65\1\133\22\65\1\66\1\67\1\134\1\101"+
    "\2\65\1\135\61\65\1\66\1\67\1\70\1\101\15\65"+
    "\1\136\25\65\2\136\5\65\1\136\2\65\4\136\3\65"+
    "\1\66\1\67\1\70\1\101\41\65\1\137\22\65\1\66"+
    "\1\67\1\140\1\101\2\65\1\141\61\65\1\66\1\67"+
    "\1\70\1\101\15\65\1\142\25\65\2\142\5\65\1\142"+
    "\2\65\4\142\3\65\1\66\1\67\1\70\1\101\41\65"+
    "\1\143\22\65\1\66\1\67\1\144\1\101\2\65\1\145"+
    "\61\65\1\66\1\67\1\70\1\101\5\65\1\146\40\65"+
    "\1\147\15\65\1\66\1\67\1\70\1\101\41\65\1\150"+
    "\22\65\1\66\1\67\1\151\1\101\2\65\1\152\61\65"+
    "\1\66\1\67\1\70\1\101\3\65\1\153\20\65\1\154"+
    "\37\65\1\66\1\67\1\70\1\101\41\65\1\155\22\65"+
    "\1\66\1\67\1\156\1\101\2\65\1\157\61\65\1\66"+
    "\1\67\1\70\1\101\3\65\1\160\60\65\1\66\1\67"+
    "\1\70\1\101\41\65\1\161\22\65\1\66\1\67\1\162"+
    "\1\101\2\65\1\163\60\65\1\164\1\66\1\67\1\164"+
    "\1\165\61\164\1\65\1\164\1\65\1\66\1\67\1\70"+
    "\1\101\1\65\1\166\2\65\1\167\1\65\1\170\1\171"+
    "\11\65\1\172\1\173\1\65\1\174\1\175\3\65\1\176"+
    "\1\177\13\65\1\200\12\65\1\171\2\65\1\66\1\67"+
    "\1\70\1\101\1\201\2\65\1\202\4\201\2\65\1\201"+
    "\1\65\2\203\3\65\14\201\5\65\1\201\2\203\5\201"+
    "\1\203\2\201\4\203\2\201\1\65\1\66\1\67\1\70"+
    "\1\101\1\204\3\65\4\204\2\65\1\204\6\65\14\204"+
    "\2\65\1\205\2\65\1\204\2\65\5\204\1\65\2\204"+
    "\4\65\2\204\1\65\1\66\1\67\1\70\1\101\40\65"+
    "\1\206\23\65\1\66\1\67\1\70\1\101\1\207\3\65"+
    "\4\207\2\65\1\207\6\65\14\207\5\65\1\207\2\65"+
    "\5\207\1\65\2\207\4\65\2\207\1\65\1\66\1\67"+
    "\1\70\1\101\10\65\1\210\53\65\1\66\1\67\1\70"+
    "\1\101\1\211\3\65\4\211\2\65\1\211\6\65\14\211"+
    "\5\65\1\211\2\65\5\211\1\65\2\211\4\65\2\211"+
    "\1\65\1\66\1\67\1\70\1\101\41\65\1\212\22\65"+
    "\1\66\1\67\1\70\1\101\2\65\1\213\26\65\1\214"+
    "\21\65\1\215\10\65\1\66\1\67\1\70\1\101\1\216"+
    "\3\65\4\216\2\65\1\216\6\65\14\216\5\65\1\216"+
    "\2\65\5\216\1\65\2\216\4\65\2\216\1\65\1\66"+
    "\1\67\1\70\1\101\1\217\3\65\4\217\2\65\1\217"+
    "\6\65\14\217\5\65\1\217\2\65\5\217\1\65\2\217"+
    "\4\65\2\217\1\65\1\66\1\67\1\70\1\101\10\65"+
    "\1\220\53\65\1\66\1\67\1\70\1\101\1\221\3\65"+
    "\4\221\2\65\1\221\6\65\14\221\5\65\1\221\2\65"+
    "\5\221\1\65\2\221\4\65\2\221\1\65\1\66\1\67"+
    "\1\70\1\101\20\65\1\222\43\65\1\66\1\67\1\70"+
    "\1\101\21\65\1\223\3\65\1\224\1\65\1\225\3\65"+
    "\1\226\1\227\26\65\71\0\1\66\71\0\1\70\70\0"+
    "\1\230\75\0\1\231\110\0\1\232\64\0\1\233\43\0"+
    "\1\234\70\0\1\102\3\0\4\102\2\0\1\102\6\0"+
    "\14\102\5\0\1\102\2\0\5\102\1\0\2\102\4\0"+
    "\2\102\3\0\1\235\4\0\1\236\71\0\1\237\60\0"+
    "\1\240\14\0\1\241\54\0\1\106\3\0\4\106\2\0"+
    "\1\106\6\0\14\106\5\0\1\106\2\0\5\106\1\0"+
    "\2\106\4\0\2\106\5\0\1\110\3\0\4\110\2\0"+
    "\1\110\1\0\2\110\3\0\14\110\5\0\21\110\27\0"+
    "\1\242\73\0\1\243\73\0\1\244\35\0\1\116\3\0"+
    "\4\116\2\0\1\116\6\0\14\116\5\0\1\116\2\0"+
    "\5\116\1\0\2\116\4\0\2\116\5\0\1\120\3\0"+
    "\4\120\2\0\1\120\1\0\2\120\3\0\14\120\5\0"+
    "\21\120\3\0\1\121\21\0\1\122\47\0\1\123\3\0"+
    "\5\123\1\0\1\123\1\0\2\123\3\0\14\123\5\0"+
    "\21\123\12\0\1\245\107\0\1\246\3\0\1\247\60\0"+
    "\1\250\2\0\1\251\67\0\1\252\72\0\1\253\35\0"+
    "\1\134\3\0\1\135\102\0\1\136\25\0\2\136\5\0"+
    "\1\136\2\0\4\136\5\0\1\140\3\0\1\141\76\0"+
    "\1\254\3\0\1\255\25\0\2\255\5\0\1\255\2\0"+
    "\4\255\5\0\1\144\3\0\1\145\113\0\1\256\72\0"+
    "\1\257\34\0\1\151\3\0\1\152\102\0\1\260\25\0"+
    "\2\260\5\0\1\260\2\0\4\260\34\0\1\261\40\0"+
    "\1\156\3\0\1\157\60\0\1\262\2\0\5\262\1\263"+
    "\57\262\3\0\1\162\3\0\1\163\60\0\1\164\2\0"+
    "\63\164\1\0\2\164\2\0\1\164\1\264\61\164\1\0"+
    "\1\164\27\0\1\265\73\0\1\266\66\0\1\267\73\0"+
    "\1\270\13\0\1\271\46\0\1\272\16\0\1\273\51\0"+
    "\1\274\66\0\1\275\67\0\1\276\20\0\1\277\47\0"+
    "\1\300\73\0\1\301\36\0\1\201\3\0\4\201\1\302"+
    "\1\0\1\201\1\0\2\203\2\0\1\303\14\201\5\0"+
    "\1\201\2\203\5\201\1\203\2\201\4\203\2\201\1\304"+
    "\2\0\65\304\5\0\1\203\3\0\4\203\2\0\1\203"+
    "\1\0\2\203\2\0\1\303\14\203\5\0\21\203\5\0"+
    "\1\204\3\0\5\204\1\0\1\204\1\0\2\204\3\0"+
    "\14\204\5\0\21\204\5\0\1\207\3\0\4\207\2\0"+
    "\1\207\6\0\14\207\5\0\1\207\2\0\5\207\1\0"+
    "\2\207\4\0\2\207\5\0\1\211\3\0\4\211\2\0"+
    "\1\211\1\0\2\211\3\0\14\211\5\0\21\211\52\0"+
    "\1\305\52\0\1\306\37\0\1\307\3\0\4\307\1\310"+
    "\1\0\1\307\6\0\14\307\5\0\1\307\2\0\5\307"+
    "\1\0\2\307\4\0\2\307\5\0\1\217\3\0\4\217"+
    "\2\0\1\217\6\0\14\217\5\0\1\217\2\0\5\217"+
    "\1\0\2\217\4\0\2\217\5\0\1\221\3\0\4\221"+
    "\2\0\1\221\1\0\2\221\3\0\14\221\5\0\21\221"+
    "\35\0\1\311\45\0\1\312\111\0\1\313\70\0\1\314"+
    "\63\0\1\315\35\0\1\230\2\0\65\230\35\0\1\316"+
    "\66\0\1\317\45\0\1\320\55\0\1\234\2\0\65\234"+
    "\12\0\1\321\105\0\1\322\73\0\1\323\47\0\1\324"+
    "\51\0\1\324\34\0\1\325\106\0\1\326\27\0\1\327"+
    "\106\0\1\330\70\0\1\331\66\0\1\332\74\0\1\333"+
    "\53\0\1\334\25\0\2\334\5\0\1\334\2\0\4\334"+
    "\54\0\1\335\55\0\1\336\51\0\1\337\25\0\2\337"+
    "\5\0\1\337\2\0\4\337\60\0\1\340\10\0\1\340"+
    "\1\264\2\0\63\264\1\234\1\264\34\0\1\341\62\0"+
    "\1\342\2\0\1\343\70\0\1\344\65\0\1\345\76\0"+
    "\1\346\63\0\1\347\104\0\1\350\71\0\1\351\55\0"+
    "\1\352\64\0\1\353\43\0\1\354\107\0\1\355\76\0"+
    "\1\356\33\0\1\357\3\0\4\357\2\0\1\357\6\0"+
    "\14\357\5\0\1\357\2\0\5\357\1\0\2\357\4\0"+
    "\2\357\3\0\1\303\1\0\1\203\3\0\4\203\2\0"+
    "\1\203\1\0\2\203\3\0\14\203\5\0\21\203\1\304"+
    "\2\0\5\304\1\360\57\304\12\0\1\361\110\0\1\362"+
    "\41\0\1\363\3\0\4\363\2\0\1\363\6\0\14\363"+
    "\5\0\1\363\2\0\5\363\1\0\2\363\4\0\2\363"+
    "\12\0\1\364\67\0\1\365\130\0\1\366\63\0\1\367"+
    "\51\0\1\370\64\0\1\371\76\0\1\372\67\0\1\373"+
    "\45\0\1\374\103\0\1\375\75\0\1\376\44\0\1\377"+
    "\104\0\1\u0100\77\0\1\u0101\65\0\1\u0102\70\0\1\u0103"+
    "\71\0\1\u0104\110\0\1\u0105\62\0\1\u0106\50\0\1\u0107"+
    "\46\0\1\335\51\0\1\335\23\0\1\u0108\25\0\2\u0108"+
    "\5\0\1\u0108\2\0\4\u0108\47\0\1\u0109\56\0\1\u010a"+
    "\61\0\1\u010b\53\0\1\u010c\67\0\1\u010d\111\0\1\u010e"+
    "\45\0\1\u010f\112\0\1\u0110\63\0\1\u0111\110\0\1\u0112"+
    "\47\0\1\u0113\75\0\1\u0114\61\0\1\u0115\51\0\1\u0116"+
    "\51\0\1\u0116\36\0\1\344\37\0\1\357\3\0\4\357"+
    "\2\0\1\357\1\0\2\357\3\0\14\357\5\0\21\357"+
    "\32\0\1\u0117\51\0\1\u0118\51\0\1\u0118\6\0\1\363"+
    "\3\0\4\363\2\0\1\363\1\0\2\363\3\0\14\363"+
    "\5\0\21\363\36\0\1\u0119\60\0\1\u011a\76\0\1\u011b"+
    "\63\0\1\u011c\47\0\1\u011d\67\0\1\u011e\110\0\1\u011f"+
    "\65\0\1\u0120\52\0\1\u0121\1\u0122\50\0\1\u0121\32\0"+
    "\1\u0123\71\0\1\u0124\67\0\1\u0125\65\0\1\u0126\76\0"+
    "\1\u0127\62\0\1\u0128\71\0\1\u0129\65\0\1\u012a\56\0"+
    "\1\u012b\25\0\2\u012b\5\0\1\u012b\2\0\4\u012b\50\0"+
    "\1\u012c\56\0\1\350\70\0\1\u012d\66\0\1\u012e\70\0"+
    "\1\u012f\67\0\1\u0130\60\0\1\u0131\70\0\1\u0132\77\0"+
    "\1\u0133\60\0\1\u0134\105\0\1\u0135\61\0\1\u0136\40\0"+
    "\1\u0137\116\0\1\u0138\55\0\1\u0139\74\0\1\u013a\65\0"+
    "\1\u013b\107\0\1\u013c\67\0\1\u013d\52\0\1\u013e\101\0"+
    "\1\u013f\56\0\1\u0140\65\0\1\u0141\50\0\1\u0122\56\0"+
    "\1\u0142\121\0\1\u0143\67\0\1\u0144\112\0\1\u0145\43\0"+
    "\1\u0146\101\0\1\u0147\56\0\1\u0148\66\0\1\u0149\74\0"+
    "\1\u014a\60\0\1\u014b\75\0\1\u014c\65\0\1\u014d\42\0"+
    "\1\u014e\70\0\1\u014d\111\0\1\u014f\72\0\1\u0150\102\0"+
    "\1\u0151\71\0\1\u0152\45\0\1\u0153\43\0\1\u0154\113\0"+
    "\1\u0155\66\0\1\u0156\73\0\1\u0157\62\0\1\u0158\76\0"+
    "\1\u013d\41\0\1\u0159\106\0\1\u013d\51\0\1\u015a\113\0"+
    "\1\u015b\44\0\1\u015c\51\0\1\u015c\5\0\1\u015d\122\0"+
    "\1\u015e\71\0\1\u015f\31\0\1\u0160\21\0\1\u0161\73\0"+
    "\1\u0162\111\0\1\u0163\64\0\1\u0164\11\0\1\u0165\54\0"+
    "\1\u0111\32\0\1\u0166\115\0\1\u0167\61\0\1\u012d\71\0"+
    "\1\u0168\45\0\1\u0169\115\0\1\u016a\64\0\1\u016b\67\0"+
    "\1\u016c\54\0\1\u016d\25\0\2\u016d\5\0\1\u016d\2\0"+
    "\4\u016d\37\0\1\u016e\63\0\1\u016f\50\0\1\u0170\71\0"+
    "\1\u0159\51\0\1\u0159\36\0\1\u0171\72\0\1\u0172\32\0"+
    "\1\u015c\3\0\1\u0173\64\0\1\u0174\4\0\4\u0174\1\0"+
    "\2\u0174\2\0\1\u0174\3\0\15\u0174\4\0\10\u0174\1\0"+
    "\10\u0174\40\0\1\u0175\41\0\1\u0176\60\0\1\u0161\6\0"+
    "\1\u0177\20\0\1\u0178\5\0\1\u0179\63\0\1\u017a\102\0"+
    "\1\u017b\11\0\2\u017b\26\0\1\u017b\25\0\2\u017b\11\0"+
    "\3\u017b\37\0\1\u017c\67\0\1\u0111\41\0\1\u017d\115\0"+
    "\1\u017e\61\0\1\u017f\73\0\1\u0180\72\0\1\u014c\47\0"+
    "\1\u0181\107\0\1\u0182\67\0\1\u0159\34\0\1\u0171\3\0"+
    "\1\u0183\115\0\1\u0184\67\0\1\u0185\67\0\1\u0186\61\0"+
    "\1\u0187\51\0\1\u0188\111\0\1\u0189\76\0\1\u018a\61\0"+
    "\1\u0111\43\0\1\u018b\20\0\1\u018c\66\0\1\u018d\100\0"+
    "\1\u018e\35\0\1\u018f\102\0\1\u0111\25\0\2\u0111\5\0"+
    "\1\u0111\2\0\4\u0111\14\0\1\u0190\105\0\1\u0191\100\0"+
    "\1\u0192\60\0\1\u0193\72\0\1\u0194\102\0\1\u0195\11\0"+
    "\1\u0196\1\u0195\1\u0197\55\0\1\u0198\47\0\1\u0111\47\0"+
    "\1\u0111\67\0\1\u0199\65\0\1\u019a\114\0\1\u019b\44\0"+
    "\1\u019c\66\0\1\u019d\105\0\1\u019e\71\0\1\u019f\60\0"+
    "\1\u01a0\25\0\2\u01a0\10\0\4\u01a0\24\0\1\u01a0\25\0"+
    "\2\u01a0\11\0\3\u01a0\52\0\1\u01a0\11\0\1\u01a0\36\0"+
    "\1\u01a1\45\0\1\u01a2\134\0\1\u01a3\47\0\1\u016f\71\0"+
    "\1\u01a4\43\0\1\u01a5\116\0\1\u01a6\67\0\1\u01a7\40\0"+
    "\1\u01a8\67\0\1\u01a9\71\0\1\u01aa\51\0\1\u01aa\36\0"+
    "\1\u01ab\65\0\1\u01ac\71\0\1\u01ad\67\0\1\u01ae\67\0"+
    "\1\u01af\102\0\1\u01b0\11\0\1\u01b0\1\u01b1\36\0\1\u01b2"+
    "\107\0\1\u01b3\64\0\1\u01b4\55\0\1\u01b5\62\0\1\u01b6"+
    "\77\0\1\u01b7\32\0\1\u01b8\21\0\1\u01b9\64\0\1\u01ba"+
    "\25\0\2\u01ba\10\0\4\u01ba\52\0\1\u01ba\11\0\3\u01ba"+
    "\57\0\1\u01bb\41\0\1\u0111\117\0\1\u01bc\10\0\1\u01bc"+
    "\36\0\1\u01bd\43\0\1\u01bd\104\0\1\u01be\43\0\1\u01b9"+
    "\7\0\1\u01bf\25\0\1\u01c0\11\0\1\u01c1\31\0\1\u01c2"+
    "\107\0\1\u01c3\64\0\1\u01c4\51\0\1\u01c5\51\0\1\u01c5"+
    "\30\0\1\u01c6\76\0\1\u01c7\60\0\1\u01c8\110\0\1\u01c9"+
    "\11\0\4\u01c9\33\0\1\u01ca\71\0\1\u01cb\46\0\1\u01cc"+
    "\116\0\1\u01cd\40\0\1\u01ce\115\0\1\u01cf\51\0\1\u01d0"+
    "\25\0\2\u01d0\10\0\4\u01d0\31\0\1\u01d1\74\0\1\u01d2"+
    "\56\0\1\u01d3\120\0\1\u01d4\50\0\1\u01d5\67\0\1\u01d6"+
    "\47\0\1\u01d7\127\0\1\u01d8\22\0\1\u0111\112\0\1\u01d9"+
    "\5\0\1\u01da\63\0\1\u01db\113\0\1\u01dc\31\0\1\u01dd"+
    "\114\0\1\u01de\11\0\4\u01de\37\0\1\u01cb\67\0\1\u01df"+
    "\64\0\1\u01e0\70\0\1\u01e1\66\0\1\u01e2\110\0\1\u01e3"+
    "\36\0\1\u01e4\25\0\2\u01e4\10\0\4\u01e4\16\0\1\u01e5"+
    "\51\0\1\u01e5\53\0\1\u01e6\40\0\1\u01e7\77\0\1\u01e8"+
    "\66\0\1\u01e9\53\0\1\u01ea\103\0\1\u01eb\66\0\1\u01ec"+
    "\50\0\1\u01ed\124\0\1\u01ee\60\0\1\u01ef\51\0\1\u01f0"+
    "\25\0\2\u01f0\10\0\4\u01f0\54\0\1\u01f1\27\0\1\u01f2"+
    "\124\0\1\u01f3\43\0\1\u01f4\100\0\1\u01f5\55\0\1\u01f6"+
    "\25\0\2\u01f6\10\0\4\u01f6\35\0\1\u01f7\67\0\1\u01f8"+
    "\47\0\1\u01f9\112\0\1\u01fa\66\0\1\u01fb\54\0\1\u01fc"+
    "\25\0\2\u01fc\10\0\4\u01fc\43\0\1\u01fd\75\0\1\u01fe"+
    "\55\0\1\u01ff\104\0\1\u0200\50\0\1\u0201\77\0\1\u0202"+
    "\61\0\1\u0203\56\0\1\u0204\1\u0205\51\0\1\u0206\72\0"+
    "\1\u0207\101\0\1\u0208\113\0\1\u0209\11\0\1\u0209\1\u020a"+
    "\43\0\1\u020b\103\0\1\u020c\24\0\1\u020d\111\0\1\u020e"+
    "\57\0\1\u020f\25\0\2\u020f\10\0\4\u020f\52\0\1\u020f"+
    "\11\0\3\u020f\55\0\1\u0210\55\0\1\u0211\42\0\1\u0212"+
    "\13\0\1\u0213\11\0\1\u0214\11\0\1\u0215\30\0\1\u0216"+
    "\51\0\1\u0216\16\0\1\u0217\103\0\1\u0218\74\0\1\u0219"+
    "\67\0\1\u021a\57\0\1\u0212\73\0\1\u021b\3\0\1\u021c"+
    "\60\0\1\u021d\2\0\1\u021e\72\0\1\u021f\102\0\1\u0220"+
    "\11\0\4\u0220\36\0\1\u0221\114\0\1\u0222\67\0\1\u0223"+
    "\37\0\1\u0224\50\0\1\u0225\115\0\1\u0223\67\0\1\u0226"+
    "\67\0\1\u0227\51\0\1\u0228\25\0\2\u0228\10\0\4\u0228"+
    "\42\0\1\u0229\53\0\1\u0204\100\0\1\u022a\44\0\1\u022b"+
    "\112\0\1\u022c\66\0\1\u022d\70\0\1\u022e\42\0\1\u012c"+
    "\114\0\1\u0222\42\0\1\u022f\114\0\1\u0230\113\0\1\u0231"+
    "\43\0\1\u0232\73\0\1\u0233\52\0\1\u0208\1\u0234\73\0"+
    "\1\u0235\70\0\1\u0236\70\0\1\u022a\46\0\1\u0237\103\0"+
    "\1\u0238\53\0\1\u0239\110\0\1\u023a\47\0\1\u023b\103\0"+
    "\1\u023c\113\0\1\u023d\63\0\1\u022a\56\0\1\u023e\57\0"+
    "\1\u023f\73\0\1\u021e\70\0\1\u0240\71\0\1\u0241\67\0"+
    "\1\u0242\41\0\1\u0243\111\0\1\u0244\46\0\1\u0245\71\0"+
    "\1\u0246\117\0\2\u0247\23\0\1\u0247\7\0\1\u0248\64\0"+
    "\1\u0249\35\0\2\u0247\23\0\1\u0247\12\0\1\u024a\40\0"+
    "\1\u024b\56\0\2\u024c\1\u024d\22\0\1\u024c\33\0\1\u024e"+
    "\72\0\1\u024f\41\0\1\u0201\31\0\2\u024c\23\0\1\u024c"+
    "\10\0\1\u0201\131\0\1\u0250\55\0\1\u0251\64\0\1\u0201"+
    "\46\0\1\u0250\51\0\1\u0250\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[29624];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;
  private static final char[] EMPTY_BUFFER = new char[0];
  private static final int YYEOF = -1;
  private static java.io.Reader zzReader = null; // Fake

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\64\0\2\11\3\1\2\11\3\1\2\11\6\1\1\11"+
    "\1\1\2\11\4\1\1\11\2\1\1\11\1\1\1\11"+
    "\5\1\2\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\1\1\1\11\1\1\1\11\2\1\1\11\1\1\1\11"+
    "\2\1\1\11\1\1\1\11\1\1\1\11\1\1\1\11"+
    "\2\1\1\11\16\1\2\11\1\1\1\11\1\1\2\11"+
    "\4\1\1\11\1\1\1\11\6\1\3\0\1\1\1\0"+
    "\1\11\2\0\1\11\21\0\2\1\47\0\1\1\22\0"+
    "\2\1\2\0\1\1\16\0\1\11\2\0\1\11\1\0"+
    "\1\11\11\0\1\11\21\0\1\11\10\0\1\11\30\0"+
    "\1\1\2\11\21\0\1\11\10\0\1\11\14\0\1\11"+
    "\3\0\1\11\1\1\1\0\1\11\14\0\3\11\26\0"+
    "\1\1\22\0\1\1\15\0\1\11\16\0\1\1\11\0"+
    "\1\1\27\0\1\1\25\0\1\11\3\0\1\11\111\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[593];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** this buffer may contains the current text array to be matched when it is cheap to acquire it */
  private char[] zzBufferArray;

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;


  CndLexer(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  CndLexer(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 2310) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }

  public final int getTokenStart(){
    return zzStartRead;
  }

  public final int getTokenEnd(){
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end,int initialState){
    zzBuffer = buffer;
    zzBufferArray = com.intellij.util.text.CharArrayUtil.fromSequenceWithoutCopying(buffer);
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzPushbackPos = 0;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBufferArray != null ? zzBufferArray[zzStartRead+pos]:zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;
    char[] zzBufferArrayL = zzBufferArray;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL)
            zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = (zzBufferArrayL != null ? zzBufferArrayL[zzCurrentPosL++] : zzBufferL.charAt(zzCurrentPosL++));
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 20: 
          { yybegin(PROPERTY_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 77: break;
        case 5: 
          { yybegin(NODE_TYPE_DECLARATION_BEGIN); return CndTypes.NODE_TYPE_DECLARATION_OPENING;
          }
        case 78: break;
        case 16: 
          { yybegin(NODE_TYPE_INHERITANCE_TYPE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_NAME;
          }
        case 79: break;
        case 12: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_DECLARATION_CLOSING;
          }
        case 80: break;
        case 31: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_DATE); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 81: break;
        case 75: 
          { yybegin(PROPERTY_TYPE_DONE_WEAKREFERENCE); return CndTypes.PROPERTY_TYPE_WEAKREFERENCE;
          }
        case 82: break;
        case 68: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_PLUS_ATTRIBUTE;
          }
        case 83: break;
        case 23: 
          { yybegin(PROPERTY_ADDENDUM_ATTR);
          }
        case 84: break;
        case 19: 
          { yybegin(PROPERTY_NAME_DONE); return CndTypes.PROPERTY_NAME;
          }
        case 85: break;
        case 27: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_DOUBLE); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 86: break;
        case 57: 
          { yybegin(PROPERTY_TYPE_DONE_DATE); return CndTypes.PROPERTY_TYPE_DATE;
          }
        case 87: break;
        case 42: 
          { yybegin(PROPERTY_PLUS_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 88: break;
        case 35: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_CHOICELIST); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 89: break;
        case 69: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_OPENING;
          }
        case 90: break;
        case 40: 
          { yybegin(PROPERTY_PLUS_TYPE_BEGIN); return CndTypes.PROPERTY_TYPE_OPENING;
          }
        case 91: break;
        case 22: 
          { yybegin(PROPERTY_ADDENDUM_LONG); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 92: break;
        case 43: 
          { yybegin(PROPERTY_PLUS_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 93: break;
        case 10: 
          { yybegin(NODE_TYPE_DECLARATION_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 94: break;
        case 53: 
          { yybegin(YYINITIAL); return CndTypes.NAMESPACE_CLOSING;
          }
        case 95: break;
        case 3: 
          { return TokenType.WHITE_SPACE;
          }
        case 96: break;
        case 30: 
          { yybegin(PROPERTY_ADDENDUM_DATE); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 97: break;
        case 71: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ABSTRACT;
          }
        case 98: break;
        case 24: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_LONG); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 99: break;
        case 18: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_TYPE_COMMA;
          }
        case 100: break;
        case 54: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_TEXT;
          }
        case 101: break;
        case 51: 
          { return CndTypes.COMMENT;
          }
        case 102: break;
        case 14: 
          { yybegin(NODE_TYPE_INHERITANCE_NAMESPACE_DONE); return CndTypes.NODE_TYPE_INHERITANCE_NAMESPACE;
          }
        case 103: break;
        case 44: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 104: break;
        case 58: 
          { yybegin(PROPERTY_TYPE_DONE_LONG); return CndTypes.PROPERTY_TYPE_LONG;
          }
        case 105: break;
        case 7: 
          { yybegin(PROPERTY_PLUS_BEGIN); return CndTypes.PROPERTY_PLUS_OPENING;
          }
        case 106: break;
        case 34: 
          { yybegin(PROPERTY_ADDENDUM_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 107: break;
        case 17: 
          { yybegin(NODE_TYPE_INHERITANCE);
          }
        case 108: break;
        case 2: 
          { yybegin(YYINITIAL); return CndTypes.CRLF;
          }
        case 109: break;
        case 8: 
          { yybegin(NAMESPACE_NAME_DONE); return CndTypes.NAMESPACE_NAME;
          }
        case 110: break;
        case 29: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_BOOLEAN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 111: break;
        case 59: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_BOOLEAN;
          }
        case 112: break;
        case 39: 
          { yybegin(PROPERTY_PLUS_NAME_DONE); return CndTypes.PROPERTY_PLUS_NAME;
          }
        case 113: break;
        case 6: 
          { yybegin(PROPERTY_MINUS_BEGIN); return CndTypes.PROPERTY_MINUS_OPENING;
          }
        case 114: break;
        case 66: 
          { yybegin(YYINITIAL); return CndTypes.EXTEND_ITEM_TYPE;
          }
        case 115: break;
        case 73: 
          { yybegin(YYINITIAL); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 116: break;
        case 13: 
          { yybegin(NODE_TYPE_INHERITANCE_BEGIN); return CndTypes.NODE_TYPE_INHERITANCE_OPENING;
          }
        case 117: break;
        case 25: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_LONG;
          }
        case 118: break;
        case 45: 
          { yybegin(PROPERTY_PLUS_DEFAULT_BEGIN); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 119: break;
        case 46: 
          { yybegin(EXTEND_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 120: break;
        case 1: 
          { return TokenType.BAD_CHARACTER;
          }
        case 121: break;
        case 74: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_ORDERABLE;
          }
        case 122: break;
        case 9: 
          { yybegin(NODE_TYPE_DECLARATION_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 123: break;
        case 64: 
          { yybegin(PROPERTY_TYPE_DONE_DOUBLE); return CndTypes.PROPERTY_TYPE_DOUBLE;
          }
        case 124: break;
        case 61: 
          { yybegin(NODE_TYPE_INHERITANCE); return CndTypes.NODE_TYPE_MIXIN;
          }
        case 125: break;
        case 28: 
          { yybegin(PROPERTY_ADDENDUM_BOOLEAN); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 126: break;
        case 55: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DOUBLE;
          }
        case 127: break;
        case 36: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_STRING_CHOICELIST;
          }
        case 128: break;
        case 76: 
          { yybegin(PROPERTY_TYPE_DONE_STRING_CHOICELIST); return CndTypes.PROPERTY_TYPE_STRING_CHOICELIST;
          }
        case 129: break;
        case 15: 
          { yybegin(NODE_TYPE_INHERITANCE_COLON_DONE); return CndTypes.NODE_TYPE_INHERITANCE_COLON;
          }
        case 130: break;
        case 47: 
          { yybegin(EXTEND_COLON_DONE); return CndTypes.NODE_TYPE_DECLARATION_COLON;
          }
        case 131: break;
        case 50: 
          { yybegin(YYINITIAL); return CndTypes.COMMENT;
          }
        case 132: break;
        case 4: 
          { yybegin(NAMESPACE_BEGIN); return CndTypes.NAMESPACE_OPENING;
          }
        case 133: break;
        case 67: 
          { yybegin(PROPERTY_TYPE_DONE_BOOLEAN); return CndTypes.PROPERTY_TYPE_BOOLEAN;
          }
        case 134: break;
        case 72: 
          { yybegin(EXTEND_ITEM_BEGIN); return CndTypes.EXTEND_ITEM_START;
          }
        case 135: break;
        case 65: 
          { yybegin(PROPERTY_TYPE_DONE_BINARY); return CndTypes.PROPERTY_TYPE_BINARY;
          }
        case 136: break;
        case 32: 
          { yybegin(PROPERTY_ADDENDUM_STRING_TEXT); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 137: break;
        case 62: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_DEFAULT_DATE;
          }
        case 138: break;
        case 52: 
          { yybegin(NAMESPACE_EQUAL_DONE); return CndTypes.NAMESPACE_EQUAL;
          }
        case 139: break;
        case 56: 
          { yybegin(PROPERTY_PLUS_ADDENDUM); return CndTypes.PROPERTY_DEFAULT_VALUE;
          }
        case 140: break;
        case 38: 
          { yybegin(YYINITIAL); return CndTypes.PROPERTY_CONSTRAINT;
          }
        case 141: break;
        case 33: 
          { yybegin(PROPERTY_DEFAULT_BEGIN_STRING_TEXT); return CndTypes.PROPERTY_DEFAULT_OPENING;
          }
        case 142: break;
        case 11: 
          { yybegin(NODE_TYPE_DECLARATION_TYPE_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 143: break;
        case 63: 
          { yybegin(PROPERTY_TYPE_DONE_STRING_TEXT); return CndTypes.PROPERTY_TYPE_STRING_TEXT;
          }
        case 144: break;
        case 48: 
          { yybegin(EXTEND_DONE); return CndTypes.NODE_TYPE_NAME;
          }
        case 145: break;
        case 21: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 146: break;
        case 26: 
          { yybegin(PROPERTY_ADDENDUM_DOUBLE); return CndTypes.PROPERTY_TYPE_CLOSING;
          }
        case 147: break;
        case 60: 
          { yybegin(PROPERTY_ADDENDUM_ATTR); return CndTypes.PROPERTY_ATTRIBUTE;
          }
        case 148: break;
        case 49: 
          { yybegin(EXTEND_BEGIN); return CndTypes.EXTEND_COMMA;
          }
        case 149: break;
        case 37: 
          { yybegin(PROPERTY_CONSTRAINT_BEGIN); return CndTypes.PROPERTY_CONSTRAINT_OPENING;
          }
        case 150: break;
        case 70: 
          { yybegin(NAMESPACE_URI_DONE); return CndTypes.NAMESPACE_URI;
          }
        case 151: break;
        case 41: 
          { yybegin(PROPERTY_PLUS_NAMESPACE_DONE); return CndTypes.NODE_TYPE_NAMESPACE;
          }
        case 152: break;
        default:
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
            return null;
          }
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
